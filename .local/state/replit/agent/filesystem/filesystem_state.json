{"file_contents":{"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/pages/Spaces.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, MoreVertical, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport SpaceCard from \"@/components/SpaceCard\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { SpaceWithChannels } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Spaces() {\n  const { currentUserId } = useAppStore();\n  const queryClient = useQueryClient();\n\n  // Fetch user spaces\n  const { data: spaces = [], isLoading } = useQuery<SpaceWithChannels[]>({\n    queryKey: [\"/api/spaces/user\", currentUserId],\n  });\n\n  // Delete space mutation\n  const deleteSpaceMutation = useMutation({\n    mutationFn: async (spaceId: string) => {\n      await apiRequest(\"DELETE\", `/api/spaces/${spaceId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/spaces/user\", currentUserId] });\n    },\n  });\n\n  const handleSpaceClick = (space: SpaceWithChannels) => {\n    console.log(\"Viewing space:\", space.name);\n    // TODO: Navigate to space-specific feed\n  };\n\n  const handleCreateSpace = () => {\n    console.log(\"Creating new space\");\n    // TODO: Open create space modal/form\n  };\n\n  const handleEditSpace = (space: SpaceWithChannels) => {\n    console.log(\"Editing space:\", space.name);\n    // TODO: Open edit space modal/form\n  };\n\n  const handleDeleteSpace = (space: SpaceWithChannels) => {\n    if (confirm(`Are you sure you want to delete \"${space.name}\"?`)) {\n      deleteSpaceMutation.mutate(space.id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-muted animate-pulse rounded\"></div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"h-48 bg-muted animate-pulse rounded-xl\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Your Spaces</h1>\n          <p className=\"text-muted-foreground\">\n            Organize your favorite channels into custom spaces for focused content discovery.\n          </p>\n        </div>\n        <Button onClick={handleCreateSpace} data-testid=\"button-create-space\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Space\n        </Button>\n      </div>\n\n      {/* Empty State */}\n      {spaces.length === 0 && (\n        <Card className=\"border-dashed border-2 border-border\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <div className=\"w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center mb-4\">\n              <Plus className=\"h-8 w-8 text-primary\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No spaces yet</h3>\n            <p className=\"text-muted-foreground text-center max-w-md mb-6\">\n              Create your first space to organize channels by topic, mood, or any way you like. \n              Each space will have its own personalized feed.\n            </p>\n            <Button onClick={handleCreateSpace} data-testid=\"button-create-first-space\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Your First Space\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Spaces Grid */}\n      {spaces.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {spaces.map((space) => (\n            <div key={space.id} className=\"relative group\">\n              <SpaceCard\n                space={space}\n                onClick={() => handleSpaceClick(space)}\n              />\n              \n              {/* Space Actions */}\n              <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                <div className=\"flex gap-1\">\n                  <Button\n                    variant=\"secondary\"\n                    size=\"icon\"\n                    className=\"w-8 h-8\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleEditSpace(space);\n                    }}\n                    data-testid={`button-edit-space-${space.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    size=\"icon\"\n                    className=\"w-8 h-8 text-destructive hover:text-destructive\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleDeleteSpace(space);\n                    }}\n                    data-testid={`button-delete-space-${space.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {/* Create New Space Card */}\n          <div\n            className=\"bg-card border-2 border-dashed border-border rounded-xl p-5 hover:border-primary transition cursor-pointer flex items-center justify-center min-h-[200px]\"\n            onClick={handleCreateSpace}\n            data-testid=\"button-create-space-card\"\n          >\n            <div className=\"text-center\">\n              <Plus className=\"h-12 w-12 text-primary mx-auto mb-3\" />\n              <h3 className=\"text-base font-semibold text-foreground mb-1\">Create New Space</h3>\n              <p className=\"text-sm text-muted-foreground\">Organize channels by topic or mood</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Quick Tips */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">💡 Space Tips</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3 text-sm text-muted-foreground\">\n          <p>• Create spaces for different topics like \"Gaming\", \"Tech News\", or \"Cooking\"</p>\n          <p>• Add multiple channels to each space for diverse content in that category</p>\n          <p>• Each space has its own personalized feed with content only from those channels</p>\n          <p>• Use spaces to discover new content within your areas of interest</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6571},"client/src/pages/studio/Content.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Search, Upload, MoreVertical, Eye, MessageSquare, ThumbsUp, Video, Pencil, Trash2, Play } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport UploadVideoDialog from \"@/components/UploadVideoDialog\";\nimport EditVideoDialog from \"@/components/EditVideoDialog\";\n\nexport default function StudioContent() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);\n  const [editVideoDialogOpen, setEditVideoDialogOpen] = useState(false);\n  const [selectedVideo, setSelectedVideo] = useState<any>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [videoToDelete, setVideoToDelete] = useState<any>(null);\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    if (params.get('upload') === 'true') {\n      setUploadDialogOpen(true);\n      setLocation('/studio/content', { replace: true });\n    }\n  }, [location, setLocation]);\n\n  const { data: channel } = useQuery<any>({\n    queryKey: ['/api/users', user?.id, 'channel'],\n    queryFn: async () => {\n      const res = await fetch(`/api/users/${user?.id}/channel`);\n      if (!res.ok) return null;\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: videos = [] } = useQuery<any[]>({\n    queryKey: ['/api/videos'],\n    queryFn: async () => {\n      const res = await fetch('/api/videos');\n      if (!res.ok) return [];\n      return res.json();\n    },\n  });\n\n  const channelVideos = videos.filter((v: any) => v.channelId === channel?.id);\n  const channelShorts = channelVideos.filter((v: any) => v.isShorts === true);\n  const channelLongVideos = channelVideos.filter((v: any) => !v.isShorts);\n\n  const deleteVideoMutation = useMutation({\n    mutationFn: async (videoId: string) => {\n      const response = await fetch(`/api/videos/${videoId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to delete video\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Video deleted successfully\",\n      });\n      setDeleteDialogOpen(false);\n      setVideoToDelete(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete video\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditVideo = (video: any) => {\n    setSelectedVideo(video);\n    setEditVideoDialogOpen(true);\n  };\n\n  const handleDeleteClick = (video: any) => {\n    setVideoToDelete(video);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (videoToDelete) {\n      deleteVideoMutation.mutate(videoToDelete.id);\n    }\n  };\n\n  const getVisibilityBadge = (visibility: string) => {\n    switch (visibility?.toLowerCase()) {\n      case \"private\":\n        return <Badge variant=\"secondary\">Private</Badge>;\n      case \"unlisted\":\n        return <Badge variant=\"outline\">Unlisted</Badge>;\n      case \"public\":\n      default:\n        return <Badge variant=\"default\">Public</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3 sm:gap-0\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold\">Channel content</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage and analyze your content</p>\n        </div>\n        <Button className=\"gap-2\" onClick={() => setUploadDialogOpen(true)}>\n          <Upload className=\"h-4 w-4\" />\n          Upload video\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"videos\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"videos\">Videos</TabsTrigger>\n          <TabsTrigger value=\"shorts\">Shorts</TabsTrigger>\n          <TabsTrigger value=\"live\">Live</TabsTrigger>\n          <TabsTrigger value=\"posts\">Posts</TabsTrigger>\n          <TabsTrigger value=\"playlists\">Playlists</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"videos\" className=\"space-y-4\">\n          <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n            <div className=\"relative w-full sm:flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search across your channel\"\n                className=\"pl-10\"\n              />\n            </div>\n            <Button variant=\"outline\">Filter</Button>\n          </div>\n\n          {channelLongVideos.length > 0 ? (\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Video</TableHead>\n                        <TableHead>Visibility</TableHead>\n                        <TableHead>Date</TableHead>\n                        <TableHead className=\"text-right\">Views</TableHead>\n                        <TableHead className=\"text-right\">Comments</TableHead>\n                        <TableHead className=\"text-right\">Likes</TableHead>\n                        <TableHead></TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {channelLongVideos.map((video: any) => (\n                        <TableRow key={video.id}>\n                          <TableCell>\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"relative w-24 h-14 bg-muted rounded overflow-hidden flex-shrink-0\">\n                                <img\n                                  src={video.thumbnail}\n                                  alt={video.title}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                                <div className=\"absolute bottom-1 right-1 bg-black/80 text-white text-xs px-1 rounded\">\n                                  {video.duration}\n                                </div>\n                              </div>\n                              <div className=\"min-w-0 flex-1\">\n                                <div className=\"flex items-center gap-2\">\n                                  <p className=\"font-medium line-clamp-2 text-sm\">{video.title}</p>\n                                  {video.isShorts && (\n                                    <Badge variant=\"secondary\" className=\"flex items-center gap-1 bg-primary/10 text-primary shrink-0\">\n                                      <Play className=\"h-3 w-3\" />\n                                      Short\n                                    </Badge>\n                                  )}\n                                </div>\n                                <p className=\"text-xs text-muted-foreground mt-1 line-clamp-1\">\n                                  {video.description || 'No description'}\n                                </p>\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {getVisibilityBadge(video.visibility || \"public\")}\n                          </TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\">\n                            {new Date(video.createdAt).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell className=\"text-right\">{video.views || 0}</TableCell>\n                          <TableCell className=\"text-right\">0</TableCell>\n                          <TableCell className=\"text-right\">\n                            {video.likes || 0} ({video.dislikes ? `${(video.likes / (video.likes + video.dislikes) * 100).toFixed(1)}%` : '0%'})\n                          </TableCell>\n                          <TableCell>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditVideo(video)}>\n                                  <Pencil className=\"h-4 w-4 mr-2\" />\n                                  Edit video\n                                </DropdownMenuItem>\n                                <DropdownMenuItem>View analytics</DropdownMenuItem>\n                                <DropdownMenuSeparator />\n                                <DropdownMenuItem \n                                  className=\"text-destructive\" \n                                  onClick={() => handleDeleteClick(video)}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                <Video className=\"h-10 w-10 sm:h-12 sm:w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No videos uploaded yet</h3>\n                <p className=\"text-muted-foreground mb-6 text-center max-w-md\">\n                  Start creating content for your channel. Upload your first video to get started.\n                </p>\n                <Button className=\"gap-2\" onClick={() => setUploadDialogOpen(true)}>\n                  <Upload className=\"h-4 w-4\" />\n                  Upload video\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"shorts\" className=\"space-y-4\">\n          <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n            <div className=\"relative w-full sm:flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search across your shorts\"\n                className=\"pl-10\"\n              />\n            </div>\n            <Button variant=\"outline\">Filter</Button>\n          </div>\n\n          {channelShorts.length > 0 ? (\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Short</TableHead>\n                        <TableHead>Visibility</TableHead>\n                        <TableHead>Date</TableHead>\n                        <TableHead className=\"text-right\">Views</TableHead>\n                        <TableHead className=\"text-right\">Comments</TableHead>\n                        <TableHead className=\"text-right\">Likes</TableHead>\n                        <TableHead></TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {channelShorts.map((video: any) => (\n                        <TableRow key={video.id}>\n                          <TableCell>\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"relative w-14 h-24 bg-muted rounded overflow-hidden flex-shrink-0\">\n                                <img\n                                  src={video.thumbnail}\n                                  alt={video.title}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                                <div className=\"absolute bottom-1 right-1 bg-black/80 text-white text-xs px-1 rounded\">\n                                  {video.duration}\n                                </div>\n                                <Badge variant=\"secondary\" className=\"absolute top-1 left-1 text-xs px-1 py-0 bg-primary/90 text-white\">\n                                  <Play className=\"h-2 w-2\" />\n                                </Badge>\n                              </div>\n                              <div className=\"min-w-0 flex-1\">\n                                <p className=\"font-medium line-clamp-2 text-sm\">{video.title}</p>\n                                <p className=\"text-xs text-muted-foreground mt-1 line-clamp-1\">\n                                  {video.description || 'No description'}\n                                </p>\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {getVisibilityBadge(video.visibility || \"public\")}\n                          </TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\">\n                            {new Date(video.createdAt).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell className=\"text-right\">{video.views || 0}</TableCell>\n                          <TableCell className=\"text-right\">0</TableCell>\n                          <TableCell className=\"text-right\">\n                            {video.likes || 0} ({video.dislikes ? `${(video.likes / (video.likes + video.dislikes) * 100).toFixed(1)}%` : '0%'})\n                          </TableCell>\n                          <TableCell>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => handleEditVideo(video)}>\n                                  <Pencil className=\"h-4 w-4 mr-2\" />\n                                  Edit short\n                                </DropdownMenuItem>\n                                <DropdownMenuItem>View analytics</DropdownMenuItem>\n                                <DropdownMenuSeparator />\n                                <DropdownMenuItem \n                                  className=\"text-destructive\" \n                                  onClick={() => handleDeleteClick(video)}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                <Video className=\"h-10 w-10 sm:h-12 sm:w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No Shorts yet</h3>\n                <p className=\"text-muted-foreground mb-6 text-center max-w-md\">\n                  Create short-form vertical videos (under 60 seconds) to reach a wider audience\n                </p>\n                <Button className=\"gap-2\" onClick={() => setUploadDialogOpen(true)}>\n                  <Upload className=\"h-4 w-4\" />\n                  Upload short\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"live\">\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <Video className=\"h-10 w-10 sm:h-12 sm:w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Go live</h3>\n              <p className=\"text-muted-foreground mb-6 text-center max-w-md\">\n                Stream live content to connect with your audience in real-time\n              </p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"posts\">\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <MessageSquare className=\"h-10 w-10 sm:h-12 sm:w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Share community posts</h3>\n              <p className=\"text-muted-foreground mb-6 text-center max-w-md\">\n                Engage with your subscribers through text, images, and polls\n              </p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"playlists\">\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <Video className=\"h-10 w-10 sm:h-12 sm:w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Create playlists</h3>\n              <p className=\"text-muted-foreground mb-6 text-center max-w-md\">\n                Organize your videos into collections for easier viewing\n              </p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <UploadVideoDialog \n        open={uploadDialogOpen} \n        onOpenChange={setUploadDialogOpen} \n      />\n\n      {selectedVideo && (\n        <EditVideoDialog\n          video={selectedVideo}\n          open={editVideoDialogOpen}\n          onOpenChange={setEditVideoDialogOpen}\n        />\n      )}\n\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Video</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{videoToDelete?.title}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {deleteVideoMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":20269},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  Play, \n  TrendingUp, \n  FolderOpen, \n  Layers, \n  BookOpen, \n  History, \n  Clock,\n  ShoppingBag,\n  Music,\n  Film,\n  Radio,\n  Gamepad2,\n  Newspaper,\n  Volleyball,\n  GraduationCap,\n  Shirt,\n  Mic,\n  Settings,\n  Flag,\n  HelpCircle,\n  MessageSquare\n} from \"lucide-react\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { cn } from \"@/lib/utils\";\n\nconst mainNavItems = [\n  { icon: Home, label: \"Home\", path: \"/\" },\n  { icon: Play, label: \"Shorts\", path: \"/shorts\" },\n  { icon: TrendingUp, label: \"Trending\", path: \"/trending\" },\n  { icon: FolderOpen, label: \"Subscriptions\", path: \"/subscriptions\" },\n  { icon: Layers, label: \"Spaces\", path: \"/spaces\" },\n];\n\nconst libraryItems = [\n  { icon: BookOpen, label: \"Library\", path: \"/library\" },\n  { icon: History, label: \"History\", path: \"/history\" },\n  { icon: Clock, label: \"Watch Later\", path: \"/watch-later\" },\n];\n\nconst exploreItems = [\n  { icon: ShoppingBag, label: \"Shopping\", path: \"/explore/shopping\" },\n  { icon: Music, label: \"Music\", path: \"/explore/music\" },\n  { icon: Film, label: \"Movies\", path: \"/explore/movies\" },\n  { icon: Radio, label: \"Live\", path: \"/explore/live\" },\n  { icon: Gamepad2, label: \"Gaming\", path: \"/explore/gaming\" },\n  { icon: Newspaper, label: \"News\", path: \"/explore/news\" },\n  { icon: Volleyball, label: \"Sports\", path: \"/explore/sports\" },\n  { icon: GraduationCap, label: \"Courses\", path: \"/explore/courses\" },\n  { icon: Shirt, label: \"Fashion & Beauty\", path: \"/explore/fashion\" },\n  { icon: Mic, label: \"Podcasts\", path: \"/explore/podcasts\" },\n];\n\nconst toolsItems = [\n  { icon: Settings, label: \"Settings\", path: \"/settings\" },\n  { icon: Flag, label: \"Report history\", path: \"/report-history\" },\n  { icon: HelpCircle, label: \"Help\", path: \"/help\" },\n  { icon: MessageSquare, label: \"Send feedback\", path: \"/feedback\" },\n];\n\ninterface SidebarProps {\n  isMobile?: boolean;\n}\n\nexport default function Sidebar({ isMobile = false }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const { sidebarCollapsed, setSearchQuery, setMobileSidebarOpen } = useAppStore();\n\n  const isActive = (path: string) => location === path;\n\n  const handleNavClick = (path: string) => {\n    if (path === \"/\") {\n      setSearchQuery(\"\");\n    }\n    if (isMobile) {\n      setMobileSidebarOpen(false);\n    }\n    setLocation(path);\n  };\n\n  return (\n    <aside className={cn(\n      \"bg-background border-r border-border overflow-y-auto sidebar-scrollbar z-40 transition-all duration-300\",\n      isMobile \n        ? \"w-full\" \n        : \"hidden md:fixed md:left-0 md:top-14 md:bottom-0 md:block\",\n      !isMobile && (sidebarCollapsed ? \"w-20\" : \"w-60\")\n    )}>\n      <div className=\"py-2\">\n        \n        {/* Main Navigation */}\n        <div className=\"py-2 border-b border-border\">\n          {mainNavItems.map((item) => {\n            const Icon = item.icon;\n            const collapsed = !isMobile && sidebarCollapsed;\n            return (\n              <button\n                key={item.path}\n                onClick={() => handleNavClick(item.path)}\n                className={cn(\n                  \"nav-item flex items-center py-2.5 text-sm font-medium transition-colors w-full\",\n                  collapsed ? \"justify-center px-0\" : \"gap-4 px-4\",\n                  isActive(item.path)\n                    ? \"active text-primary bg-muted\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                )}\n                data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                title={collapsed ? item.label : undefined}\n              >\n                <Icon className=\"h-5 w-5 flex-shrink-0\" />\n                {!collapsed && <span>{item.label}</span>}\n              </button>\n            );\n          })}\n        </div>\n        \n        {/* Library Section */}\n        <div className=\"py-2 border-b border-border\">\n          {libraryItems.map((item) => {\n            const Icon = item.icon;\n            const collapsed = !isMobile && sidebarCollapsed;\n            return (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={cn(\n                  \"nav-item flex items-center py-2.5 text-sm font-medium transition-colors\",\n                  collapsed ? \"justify-center px-0\" : \"gap-4 px-4\",\n                  isActive(item.path)\n                    ? \"active text-primary bg-muted\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                )}\n                data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                title={collapsed ? item.label : undefined}\n              >\n                <Icon className=\"h-5 w-5 flex-shrink-0\" />\n                {!collapsed && <span>{item.label}</span>}\n              </Link>\n            );\n          })}\n        </div>\n        \n        {/* Explore Section */}\n        <div className=\"py-2 border-b border-border\">\n          {(isMobile || !sidebarCollapsed) && (\n            <div className=\"px-4 py-2 text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n              Explore\n            </div>\n          )}\n          {exploreItems.map((item) => {\n            const Icon = item.icon;\n            const collapsed = !isMobile && sidebarCollapsed;\n            return (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={cn(\n                  \"nav-item flex items-center py-2.5 text-sm font-medium transition-colors\",\n                  collapsed ? \"justify-center px-0\" : \"gap-4 px-4\",\n                  isActive(item.path)\n                    ? \"active text-primary bg-muted\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                )}\n                data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                title={collapsed ? item.label : undefined}\n              >\n                <Icon className=\"h-5 w-5 flex-shrink-0\" />\n                {!collapsed && <span>{item.label}</span>}\n              </Link>\n            );\n          })}\n        </div>\n        \n        {/* Tools Section */}\n        <div className=\"py-2 border-b border-border\">\n          {toolsItems.map((item) => {\n            const Icon = item.icon;\n            const collapsed = !isMobile && sidebarCollapsed;\n            return (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={cn(\n                  \"nav-item flex items-center py-2.5 text-sm font-medium transition-colors\",\n                  collapsed ? \"justify-center px-0\" : \"gap-4 px-4\",\n                  isActive(item.path)\n                    ? \"active text-primary bg-muted\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                )}\n                data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                title={collapsed ? item.label : undefined}\n              >\n                <Icon className=\"h-5 w-5 flex-shrink-0\" />\n                {!collapsed && <span>{item.label}</span>}\n              </Link>\n            );\n          })}\n        </div>\n        \n        {/* Footer Links */}\n        {(isMobile || !sidebarCollapsed) && (\n          <div className=\"px-4 py-4\">\n            <div className=\"text-xs text-muted-foreground space-y-1\">\n              <div className=\"flex flex-wrap gap-x-2\">\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-about\">About</a>\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-press\">Press</a>\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-copyright\">Copyright</a>\n              </div>\n              <div className=\"flex flex-wrap gap-x-2\">\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-contact\">Contact us</a>\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-creators\">Creators</a>\n              </div>\n              <div className=\"flex flex-wrap gap-x-2\">\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-advertise\">Advertise</a>\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-developers\">Developers</a>\n              </div>\n              <div className=\"flex flex-wrap gap-x-2 mt-2\">\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-terms\">Terms</a>\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-privacy\">Privacy</a>\n              </div>\n              <div className=\"flex flex-wrap gap-x-2\">\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-policy\">Policy & Safety</a>\n              </div>\n              <div className=\"flex flex-wrap gap-x-2\">\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-how-works\">How CineWeave works</a>\n              </div>\n              <div className=\"flex flex-wrap gap-x-2\">\n                <a href=\"#\" className=\"hover:text-foreground\" data-testid=\"link-test-features\">Test new features</a>\n              </div>\n              <div className=\"mt-3 text-muted-foreground/70\">\n                © 2025 CineWeave Pvt. Ltd.\n              </div>\n            </div>\n          </div>\n        )}\n        \n      </div>\n    </aside>\n  );\n}\n","size_bytes":9442},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    hmr: {\n      clientPort: 443,\n    },\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n  preview: {\n    host: \"0.0.0.0\",\n    port: 5000,\n  },\n});\n","size_bytes":1235},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/pages/History.tsx":{"content":"import { History as HistoryIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function History() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n            <HistoryIcon className=\"h-6 w-6\" />\n            Watch History\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">Videos you've watched</p>\n        </div>\n        <Button variant=\"outline\" size=\"sm\">\n          Clear All History\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12 border border-dashed border-border rounded-lg\">\n        <HistoryIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n        <p className=\"text-muted-foreground mb-2\">No watch history yet</p>\n        <p className=\"text-sm text-muted-foreground\">Videos you watch will appear here</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":980},"client/src/pages/ReportHistory.tsx":{"content":"import { Flag } from \"lucide-react\";\n\nexport default function ReportHistory() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Flag className=\"h-6 w-6\" />\n          Report History\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">View your reported content</p>\n      </div>\n\n      <div className=\"text-center py-12 border border-dashed border-border rounded-lg\">\n        <Flag className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n        <p className=\"text-muted-foreground mb-2\">No reports yet</p>\n        <p className=\"text-sm text-muted-foreground\">Your reported videos and channels will appear here</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":746},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/Appearance.tsx":{"content":"import { Monitor, Sun, Moon, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAppStore, type Theme } from \"@/store/useAppStore\";\n\nexport default function Appearance() {\n  const { theme: selectedTheme, setTheme } = useAppStore();\n\n  const themes = [\n    {\n      id: \"light\" as Theme,\n      icon: Sun,\n      label: \"Light\",\n      description: \"Bright and clean interface\"\n    },\n    {\n      id: \"dark\" as Theme,\n      icon: Moon,\n      label: \"Dark\",\n      description: \"Easy on the eyes in low light\"\n    },\n    {\n      id: \"device\" as Theme,\n      icon: Monitor,\n      label: \"Device theme\",\n      description: \"Matches your system preference\"\n    }\n  ];\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Appearance</h1>\n        <p className=\"text-muted-foreground\">\n          Customize how CineWeave looks on your device\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Theme</h2>\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            {themes.map((theme) => {\n              const Icon = theme.icon;\n              return (\n                <Card\n                  key={theme.id}\n                  className={`cursor-pointer transition-all hover:border-primary ${\n                    selectedTheme === theme.id ? \"border-primary bg-primary/5\" : \"\"\n                  }`}\n                  onClick={() => setTheme(theme.id)}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <Icon className=\"h-6 w-6\" />\n                      {selectedTheme === theme.id && (\n                        <Check className=\"h-5 w-5 text-primary\" />\n                      )}\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">{theme.label}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{theme.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"pt-4 border-t\">\n          <p className=\"text-sm text-muted-foreground\">\n            Theme changes are applied immediately and saved automatically.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2479},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/AccountMenu.tsx":{"content":"import { \n  User, \n  LogOut, \n  UserPlus, \n  Crown, \n  Video, \n  CreditCard, \n  Palette, \n  Globe, \n  MapPin, \n  Keyboard,\n  ChevronRight,\n  Settings,\n  UserCircle\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport { useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport AuthModal from \"./AuthModal\";\nimport ChannelCreationDialog from \"./ChannelCreationDialog\";\n\ninterface AccountMenuProps {\n  onClose?: () => void;\n}\n\nexport default function AccountMenu({ onClose }: AccountMenuProps) {\n  const { currentUserId, personalMode, setPersonalMode } = useAppStore();\n  const { user, isAuthenticated } = useAuth();\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [showChannelCreation, setShowChannelCreation] = useState(false);\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  // Check if user has a channel\n  const { data: userChannel, isLoading: channelLoading } = useQuery({\n    queryKey: ['/api/users', user?.id, 'channel'],\n    queryFn: async () => {\n      if (!user?.id) return null;\n      const res = await fetch(`/api/users/${user.id}/channel`);\n      if (res.status === 404) return null;\n      if (!res.ok) throw new Error('Failed to fetch channel');\n      return res.json();\n    },\n    enabled: !!user?.id && isAuthenticated,\n  });\n\n  const handleSignOut = async () => {\n    try {\n      // Close the menu first\n      onClose?.();\n      \n      // Clear the authentication cache immediately\n      queryClient.setQueryData(['/api/auth/user'], null);\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      \n      // Try email logout first\n      const res = await fetch('/api/auth/email/logout', {\n        method: 'POST',\n      });\n      \n      if (res.ok) {\n        // Redirect to home page\n        setLocation('/');\n        // Force reload to ensure clean state\n        setTimeout(() => window.location.reload(), 100);\n      } else {\n        // Fallback to Replit Auth logout (this will redirect)\n        window.location.href = '/api/logout';\n      }\n    } catch (error) {\n      // If email logout fails, try Replit Auth logout\n      window.location.href = '/api/logout';\n    }\n  };\n\n  const menuSections = [\n    {\n      items: [\n        { icon: UserPlus, label: \"Switch account\", action: () => console.log(\"Switch account\") },\n        { icon: LogOut, label: \"Sign out\", action: handleSignOut }\n      ]\n    },\n    {\n      items: [\n        { icon: Crown, label: \"CineWeave Premium\", action: () => console.log(\"Premium\") },\n        { icon: Video, label: \"CineWeave Studio\", link: \"/studio\" },\n        { icon: CreditCard, label: \"Purchases and memberships\", action: () => console.log(\"Purchases\") }\n      ]\n    },\n    {\n      items: [\n        { icon: Palette, label: \"Appearance\", value: \"Device theme\", hasArrow: true, link: \"/appearance\" },\n        { icon: Globe, label: \"Language\", value: \"English\", hasArrow: true, link: \"/language\" },\n        { icon: MapPin, label: \"Location\", value: \"India\", hasArrow: true, link: \"/location\" },\n        { icon: Keyboard, label: \"Keyboard shortcuts\", hasArrow: true, link: \"/keyboard-shortcuts\" }\n      ]\n    },\n    {\n      items: [\n        { icon: Settings, label: \"Settings\", link: \"/settings\" }\n      ]\n    }\n  ];\n\n  // Show auth prompt for unauthenticated users\n  if (!isAuthenticated) {\n    return (\n      <>\n        <div className=\"w-80 bg-background border-l border-border h-full overflow-y-auto\">\n          <div className=\"p-4\">\n            <div className=\"text-center py-8\">\n              <UserCircle className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"font-semibold text-lg mb-2\">Sign in to CineWeave</h3>\n              <p className=\"text-sm text-muted-foreground mb-6\">\n                Access your channels, subscriptions, and personalized content\n              </p>\n              <Button \n                className=\"w-full\" \n                onClick={() => {\n                  setShowAuthModal(true);\n                }}\n                data-testid=\"button-sign-in\"\n              >\n                Sign In\n              </Button>\n            </div>\n\n            <Separator className=\"my-4\" />\n\n            <div className=\"py-2\">\n              {[\n                { icon: Palette, label: \"Appearance\", value: \"Device theme\", hasArrow: true, link: \"/appearance\" },\n                { icon: Globe, label: \"Language\", value: \"English\", hasArrow: true, link: \"/language\" },\n                { icon: MapPin, label: \"Location\", value: \"India\", hasArrow: true, link: \"/location\" },\n                { icon: Keyboard, label: \"Keyboard shortcuts\", hasArrow: true, link: \"/keyboard-shortcuts\" },\n                { icon: Settings, label: \"Settings\", link: \"/settings\" }\n              ].map((item, index) => {\n                const Icon = item.icon;\n                if ('link' in item && item.link) {\n                  return (\n                    <Link\n                      key={index}\n                      href={item.link}\n                      onClick={onClose}\n                      className=\"flex items-center gap-3 px-3 py-2.5 rounded-lg hover:bg-muted transition-colors cursor-pointer\"\n                    >\n                      <Icon className=\"h-5 w-5\" />\n                      <span className=\"flex-1 text-sm font-medium\">{item.label}</span>\n                      {'hasArrow' in item && item.hasArrow && <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />}\n                    </Link>\n                  );\n                }\n                return null;\n              })}\n            </div>\n          </div>\n        </div>\n        <AuthModal \n          open={showAuthModal} \n          onOpenChange={(open) => {\n            setShowAuthModal(open);\n            if (!open) {\n              onClose?.();\n            }\n          }} \n        />\n      </>\n    );\n  }\n\n  // Show full menu for authenticated users\n  return (\n    <div className=\"w-80 bg-background border-l border-border h-full overflow-y-auto\">\n      <div className=\"p-4\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarImage src={user?.profileImageUrl || undefined} alt={user?.firstName || user?.email || \"User\"} />\n            <AvatarFallback className=\"bg-gradient-to-br from-purple-500 to-pink-500 text-white font-semibold\">\n              {user?.firstName?.[0]?.toUpperCase() || user?.email?.[0]?.toUpperCase() || 'U'}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"font-semibold truncate\">\n              {user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : user?.firstName || user?.username || 'User'}\n            </div>\n            <div className=\"text-sm text-muted-foreground truncate\">{user?.email || `@${user?.username || 'user'}`}</div>\n            {!channelLoading && (\n              userChannel ? (\n                <Link \n                  href={`/channel/${userChannel.id}`} \n                  onClick={onClose}\n                  className=\"text-sm text-primary hover:underline inline-block border-b-2 border-primary pb-0.5\"\n                >\n                  View your channel\n                </Link>\n              ) : (\n                <button\n                  onClick={() => setShowChannelCreation(true)}\n                  className=\"text-sm text-primary hover:underline inline-block border-b-2 border-primary pb-0.5\"\n                >\n                  Create channel\n                </button>\n              )\n            )}\n          </div>\n        </div>\n\n        <Separator className=\"my-2\" />\n        \n        {/* Personal Mode Toggle */}\n        <div className=\"py-2\">\n          <div className=\"flex items-center justify-between px-3 py-2.5 rounded-lg hover:bg-muted transition-colors\">\n            <div className=\"flex items-center gap-3\">\n              <UserCircle className=\"h-5 w-5\" />\n              <span className=\"text-sm font-medium\">Personal Mode</span>\n            </div>\n            <Switch\n              checked={personalMode}\n              onCheckedChange={setPersonalMode}\n              data-testid=\"switch-personal-mode\"\n            />\n          </div>\n        </div>\n\n        {menuSections.map((section, sectionIndex) => (\n          <div key={sectionIndex}>\n            <Separator className=\"my-2\" />\n            <div className=\"py-2\">\n              {section.items.map((item, itemIndex) => {\n                const Icon = item.icon;\n                \n                if ('link' in item && item.link) {\n                  return (\n                    <Link\n                      key={itemIndex}\n                      href={item.link}\n                      onClick={onClose}\n                      className=\"flex items-center gap-3 px-3 py-2.5 rounded-lg hover:bg-muted transition-colors cursor-pointer\"\n                    >\n                      <Icon className=\"h-5 w-5\" />\n                      <span className=\"flex-1 text-sm font-medium\">{item.label}</span>\n                    </Link>\n                  );\n                }\n\n                return (\n                  <div\n                    key={itemIndex}\n                    onClick={'action' in item ? item.action : undefined}\n                    className=\"flex items-center gap-3 px-3 py-2.5 rounded-lg hover:bg-muted transition-colors cursor-pointer\"\n                  >\n                    <Icon className=\"h-5 w-5\" />\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium\">{item.label}</div>\n                      {'value' in item && item.value && (\n                        <div className=\"text-xs text-muted-foreground\">{item.value}</div>\n                      )}\n                    </div>\n                    {'hasArrow' in item && item.hasArrow && <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {/* Channel Creation Dialog */}\n      <ChannelCreationDialog \n        open={showChannelCreation}\n        onOpenChange={setShowChannelCreation}\n      />\n    </div>\n  );\n}\n","size_bytes":10550},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/pages/Trending.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp } from \"lucide-react\";\nimport VideoCard from \"@/components/VideoCard\";\nimport { VideoWithChannel } from \"@shared/schema\";\n\nexport default function Trending() {\n  const { data: videos = [], isLoading } = useQuery<VideoWithChannel[]>({\n    queryKey: [\"/api/videos/trending\"],\n    queryFn: async () => {\n      const response = await fetch('/api/videos');\n      if (!response.ok) throw new Error('Failed to fetch trending videos');\n      const allVideos = await response.json();\n      return allVideos.sort((a: VideoWithChannel, b: VideoWithChannel) => \n        (b.views || 0) - (a.views || 0)\n      );\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-muted animate-pulse rounded w-48\"></div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <div className=\"aspect-video bg-muted animate-pulse rounded-xl\"></div>\n              <div className=\"flex gap-3\">\n                <div className=\"w-9 h-9 bg-muted animate-pulse rounded-full\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted animate-pulse rounded\"></div>\n                  <div className=\"h-3 bg-muted animate-pulse rounded w-2/3\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <TrendingUp className=\"h-6 w-6\" />\n          Trending\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">See what's popular right now</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n        {videos.map((video) => (\n          <VideoCard\n            key={video.id}\n            video={video}\n            onClick={() => console.log('Play video:', video.id)}\n          />\n        ))}\n      </div>\n\n      {videos.length === 0 && (\n        <div className=\"text-center py-12\">\n          <TrendingUp className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n          <p className=\"text-muted-foreground\">No trending videos available</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2437},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/pages/Feedback.tsx":{"content":"import { MessageSquare } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function Feedback() {\n  return (\n    <div className=\"space-y-6 max-w-3xl\">\n      <div>\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <MessageSquare className=\"h-6 w-6\" />\n          Send Feedback\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">Help us improve CineWeave</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>We'd love to hear from you!</CardTitle>\n          <CardDescription>\n            Your feedback helps us make CineWeave better for everyone\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"feedback-type\">Feedback Type</Label>\n            <Select>\n              <SelectTrigger id=\"feedback-type\">\n                <SelectValue placeholder=\"Select a type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"bug\">Bug Report</SelectItem>\n                <SelectItem value=\"feature\">Feature Request</SelectItem>\n                <SelectItem value=\"improvement\">Improvement Suggestion</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"feedback-message\">Your Feedback</Label>\n            <Textarea\n              id=\"feedback-message\"\n              placeholder=\"Tell us what you think...\"\n              className=\"min-h-[150px]\"\n            />\n          </div>\n\n          <Button className=\"w-full\">Submit Feedback</Button>\n        </CardContent>\n      </Card>\n\n      <div className=\"text-sm text-muted-foreground\">\n        <p>By submitting feedback, you agree to our terms of service and privacy policy.</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2252},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/Subscriptions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { FolderOpen } from \"lucide-react\";\nimport VideoCard from \"@/components/VideoCard\";\nimport { VideoWithChannel } from \"@shared/schema\";\nimport { useAppStore } from \"@/store/useAppStore\";\n\nexport default function Subscriptions() {\n  const { currentUserId } = useAppStore();\n\n  const { data: videos = [], isLoading } = useQuery<VideoWithChannel[]>({\n    queryKey: [\"/api/subscriptions/videos\", currentUserId],\n    queryFn: async () => {\n      const subsResponse = await fetch(`/api/subscriptions/${currentUserId}`);\n      if (!subsResponse.ok) return [];\n      const subscriptions = await subsResponse.json();\n      const channelIds = subscriptions.map((sub: any) => sub.channelId);\n      \n      if (channelIds.length === 0) return [];\n      \n      const videosResponse = await fetch(`/api/videos/by-channels?channelIds=${channelIds.join(',')}`);\n      if (!videosResponse.ok) return [];\n      return videosResponse.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-muted animate-pulse rounded w-48\"></div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <div className=\"aspect-video bg-muted animate-pulse rounded-xl\"></div>\n              <div className=\"flex gap-3\">\n                <div className=\"w-9 h-9 bg-muted animate-pulse rounded-full\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted animate-pulse rounded\"></div>\n                  <div className=\"h-3 bg-muted animate-pulse rounded w-2/3\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <FolderOpen className=\"h-6 w-6\" />\n          Subscriptions\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">Latest from your subscribed channels</p>\n      </div>\n\n      {videos.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <FolderOpen className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n          <p className=\"text-muted-foreground mb-2\">No subscriptions yet</p>\n          <p className=\"text-sm text-muted-foreground\">Subscribe to channels to see their videos here</p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {videos.map((video) => (\n            <VideoCard\n              key={video.id}\n              video={video}\n              onClick={() => console.log('Play video:', video.id)}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2890},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/Help.tsx":{"content":"import { HelpCircle, Search, MessageSquare, Book, Video } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nconst helpTopics = [\n  {\n    icon: Video,\n    title: \"Getting Started\",\n    description: \"Learn the basics of using CineWeave\",\n    topics: [\"How to watch videos\", \"Creating an account\", \"Subscribing to channels\"]\n  },\n  {\n    icon: Book,\n    title: \"Account & Settings\",\n    description: \"Manage your account preferences\",\n    topics: [\"Change password\", \"Privacy settings\", \"Notification preferences\"]\n  },\n  {\n    icon: MessageSquare,\n    title: \"Troubleshooting\",\n    description: \"Fix common issues\",\n    topics: [\"Video playback issues\", \"Login problems\", \"App not loading\"]\n  }\n];\n\nexport default function Help() {\n  return (\n    <div className=\"space-y-6 max-w-5xl\">\n      <div>\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <HelpCircle className=\"h-6 w-6\" />\n          Help Center\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">Find answers and get support</p>\n      </div>\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search for help...\"\n          className=\"pl-10 h-12\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {helpTopics.map((topic) => {\n          const Icon = topic.icon;\n          return (\n            <Card key={topic.title} className=\"hover:bg-muted/50 transition-colors\">\n              <CardHeader>\n                <div className=\"h-10 w-10 bg-primary/10 rounded-lg flex items-center justify-center mb-2\">\n                  <Icon className=\"h-5 w-5 text-primary\" />\n                </div>\n                <CardTitle className=\"text-lg\">{topic.title}</CardTitle>\n                <CardDescription>{topic.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {topic.topics.map((item) => (\n                    <li key={item} className=\"text-sm text-muted-foreground hover:text-foreground cursor-pointer\">\n                      • {item}\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Need More Help?</CardTitle>\n          <CardDescription>Contact our support team</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex gap-3\">\n          <Button>Contact Support</Button>\n          <Button variant=\"outline\">Community Forum</Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2899},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Trash2, Shield, User, Bell, Eye, Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { Channel } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Settings() {\n  const { currentUserId, personalMode, setPersonalMode } = useAppStore();\n  const queryClient = useQueryClient();\n  const [notifications, setNotifications] = useState(true);\n  const [autoplay, setAutoplay] = useState(true);\n\n  // Fetch blocked channels\n  const { data: blockedChannels = [], isLoading } = useQuery<Channel[]>({\n    queryKey: [\"/api/users\", currentUserId, \"blocked-channels\"],\n  });\n\n  // Unblock channel mutation\n  const unblockChannelMutation = useMutation({\n    mutationFn: async (channelId: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${currentUserId}/block/${channelId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/users\", currentUserId, \"blocked-channels\"] \n      });\n    },\n  });\n\n  const handleUnblockChannel = (channel: Channel) => {\n    if (confirm(`Unblock ${channel.name}? They will appear in your recommendations again.`)) {\n      unblockChannelMutation.mutate(channel.id);\n    }\n  };\n\n  const handleExportBlockList = () => {\n    const exportData = {\n      blockedChannels: blockedChannels.map(channel => ({\n        id: channel.id,\n        name: channel.name,\n        username: channel.username\n      })),\n      exportDate: new Date().toISOString()\n    };\n    \n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `cineweave-blocked-channels-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6 max-w-4xl\">\n        <div className=\"h-8 bg-muted animate-pulse rounded\"></div>\n        <div className=\"space-y-4\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <div key={i} className=\"h-32 bg-muted animate-pulse rounded-xl\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8 max-w-4xl\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">Settings</h1>\n        <p className=\"text-muted-foreground\">\n          Manage your CineWeave experience and privacy preferences.\n        </p>\n      </div>\n\n      {/* Account Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Account Settings\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-sm font-medium text-foreground\">Personal Mode</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Show only content from subscribed channels in your feed\n              </p>\n            </div>\n            <Switch\n              checked={personalMode}\n              onCheckedChange={setPersonalMode}\n              data-testid=\"switch-personal-mode-settings\"\n            />\n          </div>\n          \n          <Separator />\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-sm font-medium text-foreground\">Notifications</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Receive notifications for new videos from subscribed channels\n              </p>\n            </div>\n            <Switch\n              checked={notifications}\n              onCheckedChange={setNotifications}\n              data-testid=\"switch-notifications\"\n            />\n          </div>\n          \n          <Separator />\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-sm font-medium text-foreground\">Autoplay</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Automatically play the next video when one ends\n              </p>\n            </div>\n            <Switch\n              checked={autoplay}\n              onCheckedChange={setAutoplay}\n              data-testid=\"switch-autoplay\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Privacy & Blocking */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Privacy & Blocking\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-sm font-medium text-foreground\">Blocked Channels</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {blockedChannels.length} channels blocked from appearing in recommendations\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExportBlockList}\n                disabled={blockedChannels.length === 0}\n                data-testid=\"button-export-blocklist\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export List\n              </Button>\n            </div>\n          </div>\n\n          {/* Blocked Channels List */}\n          {blockedChannels.length > 0 && (\n            <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n              <Separator />\n              <h4 className=\"text-sm font-medium text-foreground\">Blocked Channels</h4>\n              {blockedChannels.map((channel) => (\n                <div\n                  key={channel.id}\n                  className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n                  data-testid={`blocked-channel-${channel.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 rounded-full bg-secondary overflow-hidden\">\n                      {channel.avatar && (\n                        <img\n                          src={channel.avatar}\n                          alt={channel.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      )}\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">{channel.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{channel.username}</p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleUnblockChannel(channel)}\n                    data-testid={`button-unblock-${channel.id}`}\n                  >\n                    Unblock\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {blockedChannels.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Shield className=\"h-12 w-12 text-muted-foreground mx-auto mb-3\" />\n              <h3 className=\"text-sm font-medium text-foreground mb-2\">No blocked channels</h3>\n              <p className=\"text-xs text-muted-foreground\">\n                Block channels to prevent them from appearing in your feed\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Data & Privacy */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Eye className=\"h-5 w-5\" />\n            Data & Privacy\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Button variant=\"outline\" data-testid=\"button-download-data\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download My Data\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-clear-history\">\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Clear Watch History\n            </Button>\n          </div>\n          \n          <Separator />\n          \n          <div className=\"text-sm text-muted-foreground space-y-2\">\n            <p>• Your data is stored securely and never shared with third parties</p>\n            <p>• You can export your data or delete your account at any time</p>\n            <p>• Blocked channels and spaces are stored locally to your account</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Help & Support */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Help & Support</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Button variant=\"outline\" data-testid=\"button-help-center\">\n              Visit Help Center\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-contact-support\">\n              Contact Support\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-report-issue\">\n              Report an Issue\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-feature-request\">\n              Request a Feature\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10083},"client/src/components/TopNavigation.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Search, Menu, Bell, UserCircle, Plus, Video, Radio, FileText, Clock, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { VisuallyHidden } from \"@radix-ui/react-visually-hidden\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport AccountMenu from \"@/components/AccountMenu\";\nimport Sidebar from \"@/components/Sidebar\";\nimport logoImage from \"@/assets/cineweave-logo.png\";\n\nconst MAX_SEARCH_HISTORY = 10;\n\nexport default function TopNavigation() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\n  const [showSearchHistory, setShowSearchHistory] = useState(false);\n  const [searchHistory, setSearchHistory] = useState<string[]>([]);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const { setSearchQuery: setGlobalSearchQuery, sidebarCollapsed, setSidebarCollapsed, mobileSidebarOpen, setMobileSidebarOpen } = useAppStore();\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n\n  const { data: unreadData } = useQuery<{ count: number }>({\n    queryKey: ['/api/notifications', user?.id, 'unread-count'],\n    enabled: !!user?.id,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  useEffect(() => {\n    const history = localStorage.getItem(\"searchHistory\");\n    if (history) {\n      setSearchHistory(JSON.parse(history));\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setShowSearchHistory(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  const saveToHistory = (query: string) => {\n    if (!query.trim()) return;\n    \n    const updatedHistory = [\n      query,\n      ...searchHistory.filter(item => item !== query)\n    ].slice(0, MAX_SEARCH_HISTORY);\n    \n    setSearchHistory(updatedHistory);\n    localStorage.setItem(\"searchHistory\", JSON.stringify(updatedHistory));\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      saveToHistory(searchQuery.trim());\n      setGlobalSearchQuery(searchQuery.trim());\n      setShowSearchHistory(false);\n    }\n  };\n\n  const handleHistoryItemClick = (item: string) => {\n    setSearchQuery(item);\n    setGlobalSearchQuery(item);\n    setShowSearchHistory(false);\n  };\n\n  const deleteHistoryItem = (item: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    const updatedHistory = searchHistory.filter(h => h !== item);\n    setSearchHistory(updatedHistory);\n    localStorage.setItem(\"searchHistory\", JSON.stringify(updatedHistory));\n  };\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 h-14 bg-background border-b border-border z-50 flex items-center justify-between px-4\">\n      {/* Left Section */}\n      <div className=\"flex items-center gap-2 sm:gap-4\">\n        {/* Mobile Menu - Shows on < md */}\n        <Sheet open={mobileSidebarOpen} onOpenChange={setMobileSidebarOpen}>\n          <SheetTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden w-10 h-10 hover:bg-muted\"\n              data-testid=\"button-menu-mobile\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"left\" className=\"p-0 w-60\">\n            <VisuallyHidden>\n              <SheetHeader>\n                <SheetTitle>Navigation Menu</SheetTitle>\n              </SheetHeader>\n            </VisuallyHidden>\n            <div className=\"pt-2\">\n              <Sidebar isMobile={true} />\n            </div>\n          </SheetContent>\n        </Sheet>\n        \n        {/* Desktop Menu - Shows on >= md */}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"hidden md:flex w-10 h-10 hover:bg-muted\"\n          onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n          data-testid=\"button-menu\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n        \n        <div className=\"flex items-center gap-2\">\n          <img src={logoImage} alt=\"CineWeave Logo\" className=\"h-10 w-10 sm:h-12 sm:w-12 object-contain\" />\n          <span className=\"text-lg sm:text-xl font-bold text-foreground hidden sm:inline\">CineWeave</span>\n        </div>\n      </div>\n      \n      {/* Center Section - Search */}\n      <div className=\"flex-1 max-w-2xl mx-2 sm:mx-8 relative\" ref={searchRef}>\n        <form onSubmit={handleSearch} className=\"flex items-center\">\n          {/* Full search bar - hidden on < sm */}\n          <div className=\"hidden sm:flex flex-1 items-center bg-secondary border border-border rounded-l-full overflow-hidden\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onFocus={() => setShowSearchHistory(true)}\n              className=\"flex-1 bg-transparent px-4 py-2 text-sm text-foreground placeholder-muted-foreground border-0 rounded-none focus-visible:ring-0\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          <Button\n            type=\"submit\"\n            className=\"hidden sm:flex px-6 py-2 bg-muted border border-l-0 border-border rounded-r-full hover:bg-secondary\"\n            data-testid=\"button-search\"\n          >\n            <Search className=\"h-4 w-4\" />\n          </Button>\n          \n          {/* Mobile search icon - shows only on < sm */}\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"sm:hidden w-10 h-10 hover:bg-muted\"\n            onClick={() => setLocation(\"/search\")}\n            data-testid=\"button-search-mobile\"\n          >\n            <Search className=\"h-5 w-5\" />\n          </Button>\n        </form>\n\n        {/* Desktop Search History Dropdown */}\n        {showSearchHistory && searchHistory.length > 0 && (\n          <div className=\"hidden sm:block absolute top-full left-0 right-0 mt-2 bg-background border border-border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\">\n            <div className=\"p-2\">\n              {searchHistory.map((item, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center gap-3 py-2 px-3 hover:bg-muted rounded-md group cursor-pointer\"\n                  onClick={() => handleHistoryItemClick(item)}\n                >\n                  <Clock className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                  <span className=\"flex-1 text-sm\">{item}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={(e) => deleteHistoryItem(item, e)}\n                    className=\"w-8 h-8 opacity-0 group-hover:opacity-100 transition-opacity\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Right Section */}\n      <div className=\"flex items-center gap-2\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              className=\"gap-2 px-3 h-9 hover:bg-muted\"\n              data-testid=\"button-create\"\n            >\n              <Plus className=\"h-5 w-5\" />\n              <span className=\"hidden sm:inline\">Create</span>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-48\">\n            <DropdownMenuItem \n              onClick={() => setLocation(\"/studio/content?upload=true\")}\n              className=\"gap-3 cursor-pointer\"\n            >\n              <Video className=\"h-4 w-4\" />\n              <span>Upload video</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem className=\"gap-3 cursor-pointer opacity-50\" disabled>\n              <Radio className=\"h-4 w-4\" />\n              <span>Go live</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem className=\"gap-3 cursor-pointer opacity-50\" disabled>\n              <FileText className=\"h-4 w-4\" />\n              <span>Create post</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"w-10 h-10 hover:bg-muted relative\"\n          onClick={() => setLocation(\"/notifications\")}\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {unreadData && unreadData.count > 0 && (\n            <span className=\"absolute top-2 right-2 h-2 w-2 bg-red-500 rounded-full\"></span>\n          )}\n        </Button>\n        \n        <Sheet open={accountMenuOpen} onOpenChange={setAccountMenuOpen}>\n          <SheetTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-10 h-10 overflow-hidden rounded-full p-0\"\n              data-testid=\"button-profile\"\n            >\n              {user ? (\n                <Avatar className=\"w-10 h-10\">\n                  <AvatarImage src={user.profileImageUrl || undefined} alt={user.firstName || user.email || \"User\"} />\n                  <AvatarFallback className=\"bg-gradient-to-br from-purple-500 to-pink-500 text-white font-semibold\">\n                    {user.firstName?.[0]?.toUpperCase() || user.email?.[0]?.toUpperCase() || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n              ) : (\n                <UserCircle className=\"w-8 h-8 text-muted-foreground\" />\n              )}\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"right\" className=\"p-0 w-80\">\n            <VisuallyHidden>\n              <SheetHeader>\n                <SheetTitle>Account Menu</SheetTitle>\n              </SheetHeader>\n            </VisuallyHidden>\n            <AccountMenu onClose={() => setAccountMenuOpen(false)} />\n          </SheetContent>\n        </Sheet>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":10754},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Layout from \"@/components/Layout\";\nimport StudioLayout from \"@/components/StudioLayout\";\nimport Landing from \"@/pages/Landing\";\nimport Home from \"@/pages/Home\";\nimport Shorts from \"@/pages/Shorts\";\nimport Trending from \"@/pages/Trending\";\nimport Subscriptions from \"@/pages/Subscriptions\";\nimport Spaces from \"@/pages/Spaces\";\nimport Library from \"@/pages/Library\";\nimport History from \"@/pages/History\";\nimport WatchLater from \"@/pages/WatchLater\";\nimport Watch from \"@/pages/Watch\";\nimport Channel from \"@/pages/Channel\";\nimport Explore from \"@/pages/Explore\";\nimport Settings from \"@/pages/Settings\";\nimport ReportHistory from \"@/pages/ReportHistory\";\nimport Help from \"@/pages/Help\";\nimport Feedback from \"@/pages/Feedback\";\nimport Notifications from \"@/pages/Notifications\";\nimport Appearance from \"@/pages/Appearance\";\nimport Language from \"@/pages/Language\";\nimport Location from \"@/pages/Location\";\nimport KeyboardShortcuts from \"@/pages/KeyboardShortcuts\";\nimport StudioDashboard from \"@/pages/studio/Dashboard\";\nimport StudioContent from \"@/pages/studio/Content\";\nimport StudioAnalytics from \"@/pages/studio/Analytics\";\nimport StudioSettings from \"@/pages/studio/Settings\";\nimport SearchPage from \"@/pages/Search\";\nimport NotFound from \"@/pages/not-found\";\n\n// Protected route wrapper\nfunction ProtectedRoute({ component: Component }: { component: () => JSX.Element }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  \n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n  \n  // For now, just render the component - auth modal will be handled by navigation\n  return <Component />;\n}\n\nfunction Router() {\n  const { isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Studio routes with StudioLayout */}\n      <Route path=\"/studio\">\n        {() => (\n          <ProtectedRoute component={() => (\n            <StudioLayout>\n              <StudioDashboard />\n            </StudioLayout>\n          )} />\n        )}\n      </Route>\n      <Route path=\"/studio/content\">\n        {() => (\n          <ProtectedRoute component={() => (\n            <StudioLayout>\n              <StudioContent />\n            </StudioLayout>\n          )} />\n        )}\n      </Route>\n      <Route path=\"/studio/analytics\">\n        {() => (\n          <ProtectedRoute component={() => (\n            <StudioLayout>\n              <StudioAnalytics />\n            </StudioLayout>\n          )} />\n        )}\n      </Route>\n      <Route path=\"/studio/community\">\n        {() => (\n          <ProtectedRoute component={() => (\n            <StudioLayout>\n              <div className=\"text-center py-16\">\n                <h2 className=\"text-2xl font-bold mb-2\">Community</h2>\n                <p className=\"text-muted-foreground\">Manage comments and engage with your audience</p>\n              </div>\n            </StudioLayout>\n          )} />\n        )}\n      </Route>\n      <Route path=\"/studio/settings\">\n        {() => (\n          <ProtectedRoute component={() => (\n            <StudioLayout>\n              <StudioSettings />\n            </StudioLayout>\n          )} />\n        )}\n      </Route>\n\n      {/* Main app routes with Layout */}\n      <Route path=\"/\">\n        {() => (\n          <Layout>\n            <Home />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/shorts\">\n        {() => (\n          <Layout>\n            <Shorts />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/trending\">\n        {() => (\n          <Layout>\n            <Trending />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/subscriptions\">\n        {() => (\n          <Layout>\n            <ProtectedRoute component={Subscriptions} />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/spaces\">\n        {() => (\n          <Layout>\n            <ProtectedRoute component={Spaces} />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/library\">\n        {() => (\n          <Layout>\n            <ProtectedRoute component={Library} />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/history\">\n        {() => (\n          <Layout>\n            <ProtectedRoute component={History} />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/watch-later\">\n        {() => (\n          <Layout>\n            <ProtectedRoute component={WatchLater} />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/watch/:id\">\n        {() => (\n          <Layout>\n            <Watch />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/channel/:id\">\n        {() => (\n          <Layout>\n            <Channel />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/explore/:category\">\n        {() => (\n          <Layout>\n            <Explore />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/settings\">\n        {() => (\n          <Layout>\n            <ProtectedRoute component={Settings} />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/report-history\">\n        {() => (\n          <Layout>\n            <ProtectedRoute component={ReportHistory} />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/help\">\n        {() => (\n          <Layout>\n            <Help />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/feedback\">\n        {() => (\n          <Layout>\n            <Feedback />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/notifications\">\n        {() => (\n          <Layout>\n            <ProtectedRoute component={Notifications} />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/appearance\">\n        {() => (\n          <Layout>\n            <Appearance />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/language\">\n        {() => (\n          <Layout>\n            <Language />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/location\">\n        {() => (\n          <Layout>\n            <Location />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/keyboard-shortcuts\">\n        {() => (\n          <Layout>\n            <KeyboardShortcuts />\n          </Layout>\n        )}\n      </Route>\n      <Route path=\"/search\">\n        <SearchPage />\n      </Route>\n      <Route>\n        {() => (\n          <Layout>\n            <NotFound />\n          </Layout>\n        )}\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  const { theme, setCurrentUserId } = useAppStore();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n    \n    if (theme === 'device') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n  }, [theme]);\n\n  // Sync authenticated user ID with store\n  useEffect(() => {\n    if (user?.id) {\n      setCurrentUserId(user.id);\n    } else {\n      setCurrentUserId(\"\");\n    }\n  }, [user, setCurrentUserId]);\n\n  return (\n    <TooltipProvider>\n      <div className={theme === 'device' ? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light') : theme}>\n        <Toaster />\n        <Router />\n      </div>\n    </TooltipProvider>\n  );\n}\n\nexport default App;\n","size_bytes":7942},"client/src/components/ShortsCard.tsx":{"content":"import { Play } from \"lucide-react\";\nimport { VideoWithChannel } from \"@shared/schema\";\nimport { formatViews } from \"@/lib/utils\";\n\ninterface ShortsCardProps {\n  short: VideoWithChannel;\n  onClick?: () => void;\n}\n\nexport default function ShortsCard({ short, onClick }: ShortsCardProps) {\n  return (\n    <div\n      className=\"flex-shrink-0 w-[160px] sm:w-[180px] cursor-pointer group\"\n      onClick={onClick}\n    >\n      <div className=\"aspect-[9/16] rounded-xl overflow-hidden relative mb-2 bg-muted\">\n        <img\n          src={short.thumbnail}\n          alt={short.title}\n          className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n        />\n        \n        {/* Gradient overlay */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent\"></div>\n        \n        {/* Play icon overlay */}\n        <div className=\"absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\">\n          <div className=\"bg-black/60 rounded-full p-3\">\n            <Play className=\"h-8 w-8 text-white fill-white\" />\n          </div>\n        </div>\n\n        {/* Views count at bottom */}\n        <div className=\"absolute bottom-2 left-2 right-2\">\n          <p className=\"text-white text-xs font-medium\">\n            {formatViews(short.views || 0)} views\n          </p>\n        </div>\n      </div>\n      \n      {/* Title and channel */}\n      <h3 className=\"font-semibold text-sm line-clamp-2 text-foreground mb-1\">\n        {short.title}\n      </h3>\n      <p className=\"text-xs text-muted-foreground truncate\">\n        {short.channel.name}\n      </p>\n    </div>\n  );\n}\n","size_bytes":1674},"client/src/components/VideoCard.tsx":{"content":"import { MoreVertical, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { VideoWithChannel } from \"@shared/schema\";\nimport { formatViews } from \"@/lib/utils\";\n\ninterface VideoCardProps {\n  video: VideoWithChannel;\n  onClick?: () => void;\n}\n\nfunction formatTimeAgo(date: Date | string | null): string {\n  if (!date) return 'recently';\n  const now = new Date();\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  if (isNaN(dateObj.getTime())) return 'recently';\n  const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000);\n  \n  if (diffInSeconds < 60) return `${diffInSeconds} seconds ago`;\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n  if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 604800)} weeks ago`;\n  if (diffInSeconds < 31536000) return `${Math.floor(diffInSeconds / 2592000)} months ago`;\n  return `${Math.floor(diffInSeconds / 31536000)} years ago`;\n}\n\nexport default function VideoCard({ video, onClick }: VideoCardProps) {\n  return (\n    <div \n      className=\"video-card cursor-pointer space-y-2 sm:space-y-3\"\n      onClick={onClick}\n      data-testid={`video-card-${video.id}`}\n    >\n      <div className=\"video-card-thumbnail rounded-xl overflow-hidden\">\n        <img \n          src={video.thumbnail} \n          alt={video.title}\n          loading=\"lazy\"\n          className=\"w-full h-full object-cover\"\n        />\n        {video.isLive ? (\n          <div className=\"live-badge\">LIVE</div>\n        ) : (\n          <div className=\"duration-badge text-xs px-1.5 sm:px-2\">{video.duration}</div>\n        )}\n      </div>\n      <div className=\"flex gap-2 sm:gap-3\">\n        <div className=\"channel-avatar flex-shrink-0 h-8 w-8 sm:h-9 sm:w-9\">\n          <img \n            src={video.channel.avatar || \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?w=80&h=80&fit=crop\"} \n            alt={video.channel.name}\n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"text-sm sm:text-base font-semibold text-foreground line-clamp-2 mb-1\">\n            {video.title}\n          </h3>\n          <p className=\"text-xs sm:text-sm text-muted-foreground mb-0.5 flex items-center gap-1\">\n            {video.channel.name}\n            {video.channel.verified && (\n              <CheckCircle className=\"h-3 w-3 text-muted-foreground\" />\n            )}\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            {video.isLive \n              ? `${formatViews(video.views ?? 0)} watching now`\n              : `${formatViews(video.views ?? 0)} views • ${formatTimeAgo(video.uploadedAt!)}`\n            }\n          </p>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"min-w-[44px] min-h-[44px] w-11 h-11 sm:w-6 sm:h-6 text-muted-foreground hover:text-foreground -mt-1\"\n          onClick={(e) => {\n            e.stopPropagation();\n            // Handle options menu\n          }}\n          data-testid={`button-video-options-${video.id}`}\n        >\n          <MoreVertical className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3431},"client/src/components/CustomVideoPlayer.tsx":{"content":"import { useRef, useState, useEffect } from \"react\";\nimport { Play, Pause, Volume2, VolumeX, Maximize, Minimize, Settings, RotateCw, RotateCcw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface CustomVideoPlayerProps {\n  src: string;\n  onPlay?: () => void;\n  onError?: (e: React.SyntheticEvent<HTMLVideoElement, Event>) => void;\n  videoRef?: React.RefObject<HTMLVideoElement>;\n}\n\nexport default function CustomVideoPlayer({ src, onPlay, onError, videoRef: externalVideoRef }: CustomVideoPlayerProps) {\n  const internalVideoRef = useRef<HTMLVideoElement>(null);\n  const videoRef = externalVideoRef || internalVideoRef;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const progressRef = useRef<HTMLDivElement>(null);\n  \n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showControls, setShowControls] = useState(true);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [quality, setQuality] = useState(\"Auto\");\n  const [showPlayPauseAnimation, setShowPlayPauseAnimation] = useState(false);\n\n  const controlsTimeout = useRef<NodeJS.Timeout | null>(null);\n  const playPauseAnimationTimeout = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    const handleLoadedMetadata = () => {\n      setDuration(video.duration);\n    };\n\n    const handleTimeUpdate = () => {\n      setCurrentTime(video.currentTime);\n    };\n\n    const handlePlay = () => {\n      setIsPlaying(true);\n      if (onPlay) onPlay();\n    };\n\n    const handlePause = () => {\n      setIsPlaying(false);\n    };\n\n    const handleVolumeChange = () => {\n      setVolume(video.volume);\n      setIsMuted(video.muted);\n    };\n\n    video.addEventListener('loadedmetadata', handleLoadedMetadata);\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    video.addEventListener('play', handlePlay);\n    video.addEventListener('pause', handlePause);\n    video.addEventListener('volumechange', handleVolumeChange);\n\n    return () => {\n      video.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n      video.removeEventListener('play', handlePlay);\n      video.removeEventListener('pause', handlePause);\n      video.removeEventListener('volumechange', handleVolumeChange);\n    };\n  }, [onPlay]);\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  const togglePlay = () => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    if (video.paused) {\n      video.play();\n    } else {\n      video.pause();\n    }\n\n    // Show play/pause animation for 1 second (YouTube style)\n    setShowPlayPauseAnimation(true);\n    if (playPauseAnimationTimeout.current) {\n      clearTimeout(playPauseAnimationTimeout.current);\n    }\n    playPauseAnimationTimeout.current = setTimeout(() => {\n      setShowPlayPauseAnimation(false);\n    }, 1000);\n  };\n\n  const handleProgressClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    const video = videoRef.current;\n    const progressBar = progressRef.current;\n    if (!video || !progressBar) return;\n\n    const rect = progressBar.getBoundingClientRect();\n    const pos = (e.clientX - rect.left) / rect.width;\n    video.currentTime = pos * video.duration;\n  };\n\n  const toggleMute = () => {\n    const video = videoRef.current;\n    if (!video) return;\n    video.muted = !video.muted;\n  };\n\n  const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const video = videoRef.current;\n    if (!video) return;\n    const newVolume = parseFloat(e.target.value);\n    video.volume = newVolume;\n    if (newVolume > 0 && video.muted) {\n      video.muted = false;\n    }\n  };\n\n  const toggleFullscreen = () => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    if (!document.fullscreenElement) {\n      container.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n  };\n\n  const changePlaybackRate = (rate: number) => {\n    const video = videoRef.current;\n    if (!video) return;\n    video.playbackRate = rate;\n    setPlaybackRate(rate);\n  };\n\n  const skipForward = () => {\n    const video = videoRef.current;\n    if (!video) return;\n    video.currentTime = Math.min(video.currentTime + 10, video.duration);\n  };\n\n  const skipBackward = () => {\n    const video = videoRef.current;\n    if (!video) return;\n    video.currentTime = Math.max(video.currentTime - 10, 0);\n  };\n\n  const formatTime = (seconds: number) => {\n    if (isNaN(seconds)) return \"0:00\";\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleMouseMove = () => {\n    setShowControls(true);\n    if (controlsTimeout.current) {\n      clearTimeout(controlsTimeout.current);\n    }\n    // Hide controls after 1 second (YouTube style)\n    controlsTimeout.current = setTimeout(() => {\n      if (isPlaying) {\n        setShowControls(false);\n      }\n    }, 1000);\n  };\n\n  const progress = duration > 0 ? (currentTime / duration) * 100 : 0;\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"relative w-full h-full bg-black group\"\n      onMouseMove={handleMouseMove}\n      onMouseLeave={() => {\n        if (isPlaying) setShowControls(false);\n      }}\n    >\n      <video\n        ref={videoRef}\n        src={src}\n        className=\"w-full h-full cursor-pointer\"\n        onClick={togglePlay}\n        onError={onError}\n      />\n\n      {/* Modern Play/Pause Animation Overlay (YouTube style) */}\n      {showPlayPauseAnimation && (\n        <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none z-10\">\n          <div className=\"bg-black/60 rounded-full p-4 sm:p-6 animate-in fade-in zoom-in duration-200\">\n            {isPlaying ? (\n              <Play className=\"h-12 w-12 sm:h-16 sm:w-16 text-white\" fill=\"white\" />\n            ) : (\n              <Pause className=\"h-12 w-12 sm:h-16 sm:w-16 text-white\" fill=\"white\" />\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Static Play button when paused */}\n      {!isPlaying && !showPlayPauseAnimation && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <Button\n            size=\"lg\"\n            className=\"h-20 w-20 rounded-full bg-white/90 hover:bg-white text-black transition-transform hover:scale-110\"\n            onClick={(e) => {\n              e.stopPropagation();\n              togglePlay();\n            }}\n          >\n            <Play className=\"h-10 w-10 ml-1\" fill=\"currentColor\" />\n          </Button>\n        </div>\n      )}\n\n      {/* 10-Second Skip Controls (YouTube style - center sides) */}\n      <div className={`absolute inset-0 flex items-center justify-between px-4 sm:px-8 pointer-events-none transition-opacity duration-300 ${\n        showControls || !isPlaying ? 'opacity-100' : 'opacity-0'\n      }`}>\n        {/* Skip Backward 10s - Left Side */}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"pointer-events-auto h-14 w-14 sm:h-16 sm:w-16 rounded-full bg-black/50 hover:bg-black/70 text-white backdrop-blur-sm transition-all hover:scale-110\"\n          onClick={(e) => {\n            e.stopPropagation();\n            skipBackward();\n          }}\n          title=\"Rewind 10 seconds\"\n        >\n          <RotateCcw className=\"h-6 w-6 sm:h-7 sm:w-7\" />\n        </Button>\n\n        {/* Skip Forward 10s - Right Side */}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"pointer-events-auto h-14 w-14 sm:h-16 sm:w-16 rounded-full bg-black/50 hover:bg-black/70 text-white backdrop-blur-sm transition-all hover:scale-110\"\n          onClick={(e) => {\n            e.stopPropagation();\n            skipForward();\n          }}\n          title=\"Forward 10 seconds\"\n        >\n          <RotateCw className=\"h-6 w-6 sm:h-7 sm:w-7\" />\n        </Button>\n      </div>\n\n      {/* Controls */}\n      <div\n        className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 to-transparent p-2 sm:p-4 transition-opacity duration-300 ${\n          showControls || !isPlaying ? 'opacity-100' : 'opacity-0'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Progress bar */}\n        <div\n          ref={progressRef}\n          className=\"w-full h-2 sm:h-1 bg-white/30 rounded-full cursor-pointer mb-2 sm:mb-3 hover:h-2.5 sm:hover:h-1.5 transition-all group touch-none\"\n          onClick={handleProgressClick}\n        >\n          <div\n            className=\"h-full bg-red-600 rounded-full relative\"\n            style={{ width: `${progress}%` }}\n          >\n            <div className=\"absolute right-0 top-1/2 -translate-y-1/2 w-4 h-4 sm:w-3 sm:h-3 bg-red-600 rounded-full opacity-0 group-hover:opacity-100 transition-opacity\" />\n          </div>\n        </div>\n\n        {/* Control buttons */}\n        <div className=\"flex items-center justify-between text-white gap-1\">\n          <div className=\"flex items-center gap-1 sm:gap-2\">\n            {/* Play/Pause */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white hover:bg-white/20 h-10 w-10 sm:h-9 sm:w-9\"\n              onClick={togglePlay}\n            >\n              {isPlaying ? (\n                <Pause className=\"h-5 w-5 sm:h-5 sm:w-5\" fill=\"currentColor\" />\n              ) : (\n                <Play className=\"h-5 w-5 sm:h-5 sm:w-5\" fill=\"currentColor\" />\n              )}\n            </Button>\n\n            {/* Volume - hide on very small screens */}\n            <div className=\"hidden sm:flex items-center gap-2 group/volume\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-white hover:bg-white/20\"\n                onClick={toggleMute}\n              >\n                {isMuted || volume === 0 ? (\n                  <VolumeX className=\"h-5 w-5\" />\n                ) : (\n                  <Volume2 className=\"h-5 w-5\" />\n                )}\n              </Button>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"1\"\n                step=\"0.1\"\n                value={isMuted ? 0 : volume}\n                onChange={handleVolumeChange}\n                className=\"w-0 group-hover/volume:w-20 transition-all opacity-0 group-hover/volume:opacity-100\"\n              />\n            </div>\n\n            {/* Time */}\n            <span className=\"text-xs sm:text-sm whitespace-nowrap\">\n              {formatTime(currentTime)} / {formatTime(duration)}\n            </span>\n          </div>\n\n          <div className=\"flex items-center gap-1 sm:gap-2\">\n            {/* Playback Speed - Now visible on mobile */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-white hover:bg-white/20 text-xs h-8 px-2 sm:px-3\"\n                >\n                  {playbackRate === 1 ? 'Normal' : `${playbackRate}x`}\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                {[0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2].map((rate) => (\n                  <DropdownMenuItem\n                    key={rate}\n                    onClick={() => changePlaybackRate(rate)}\n                    className={playbackRate === rate ? 'bg-primary/10' : ''}\n                  >\n                    {rate === 1 ? 'Normal' : `${rate}x`}\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Quality Settings - Now visible on mobile */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"text-white hover:bg-white/20 h-10 w-10 sm:h-9 sm:w-9\"\n                >\n                  <Settings className=\"h-5 w-5\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                <DropdownMenuItem onClick={() => setQuality(\"Auto\")} className={quality === \"Auto\" ? 'bg-primary/10' : ''}>\n                  Auto (Current)\n                </DropdownMenuItem>\n                <DropdownMenuItem disabled className=\"text-muted-foreground\">\n                  1080p (Coming soon)\n                </DropdownMenuItem>\n                <DropdownMenuItem disabled className=\"text-muted-foreground\">\n                  720p (Coming soon)\n                </DropdownMenuItem>\n                <DropdownMenuItem disabled className=\"text-muted-foreground\">\n                  480p (Coming soon)\n                </DropdownMenuItem>\n                <DropdownMenuItem disabled className=\"text-muted-foreground\">\n                  360p (Coming soon)\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Fullscreen */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white hover:bg-white/20 h-10 w-10 sm:h-9 sm:w-9\"\n              onClick={toggleFullscreen}\n            >\n              {isFullscreen ? (\n                <Minimize className=\"h-5 w-5\" />\n              ) : (\n                <Maximize className=\"h-5 w-5\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14092},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nconst isReplitEnvironment = !!process.env.REPLIT_DOMAINS;\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  if (!process.env.SESSION_SECRET) {\n    throw new Error('SESSION_SECRET environment variable is required. Please set it in your deployment environment.');\n  }\n  \n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      // In production (HTTPS), secure should be true. In development, false.\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n      sameSite: 'lax',\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Only setup Replit OIDC authentication if in Replit environment\n  if (isReplitEnvironment) {\n    const config = await getOidcConfig();\n\n    const verify: VerifyFunction = async (\n      tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n      verified: passport.AuthenticateCallback\n    ) => {\n      const user = {};\n      updateUserSession(user, tokens);\n      await upsertUser(tokens.claims());\n      verified(null, user);\n    };\n\n    for (const domain of process.env\n      .REPLIT_DOMAINS!.split(\",\")) {\n      const strategy = new Strategy(\n        {\n          name: `replitauth:${domain}`,\n          config,\n          scope: \"openid email profile offline_access\",\n          callbackURL: `https://${domain}/api/callback`,\n        },\n        verify,\n      );\n      passport.use(strategy);\n    }\n\n    passport.serializeUser((user: Express.User, cb) => cb(null, user));\n    passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n    app.get(\"/api/login\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        prompt: \"login consent\",\n        scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n      })(req, res, next);\n    });\n\n    app.get(\"/api/callback\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        successReturnToOrRedirect: \"/\",\n        failureRedirect: \"/api/login\",\n      })(req, res, next);\n    });\n\n    app.get(\"/api/logout\", (req, res) => {\n      req.logout(() => {\n        res.redirect(\n          client.buildEndSessionUrl(config, {\n            client_id: process.env.REPL_ID!,\n            post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n          }).href\n        );\n      });\n    });\n  } else {\n    // For non-Replit environments (like Render), use Google OAuth\n    const useGoogleOAuth = !!(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET);\n    \n    if (useGoogleOAuth) {\n      // Google OAuth Strategy\n      const callbackURL = process.env.GOOGLE_CALLBACK_URL || `${process.env.RENDER_EXTERNAL_URL || 'http://localhost:5000'}/api/auth/google/callback`;\n      \n      passport.use(new GoogleStrategy({\n        clientID: process.env.GOOGLE_CLIENT_ID!,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n        callbackURL: callbackURL,\n      }, async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n        try {\n          // Create or update user in database\n          await storage.upsertUser({\n            id: profile.id,\n            email: profile.emails?.[0]?.value || null,\n            firstName: profile.name?.givenName || null,\n            lastName: profile.name?.familyName || null,\n            profileImageUrl: profile.photos?.[0]?.value || null,\n          });\n          \n          const user = {\n            googleId: profile.id,\n            displayName: profile.displayName,\n            email: profile.emails?.[0]?.value,\n            photo: profile.photos?.[0]?.value,\n          };\n          \n          done(null, user);\n        } catch (error) {\n          done(error, null);\n        }\n      }));\n\n      passport.serializeUser((user: any, done) => {\n        done(null, user.googleId);\n      });\n\n      passport.deserializeUser(async (id: string, done) => {\n        try {\n          const user = await storage.getUser(id);\n          if (!user) {\n            return done(null, false);\n          }\n          done(null, user as Express.User);\n        } catch (error) {\n          done(error, null);\n        }\n      });\n\n      // Google OAuth Routes\n      app.get(\"/api/auth/google\", \n        passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] })\n      );\n\n      app.get(\"/api/auth/google/callback\",\n        passport.authenticate(\"google\", { failureRedirect: \"/\" }),\n        (req, res) => {\n          res.redirect(\"/\");\n        }\n      );\n\n      // Legacy /api/login redirects to Google OAuth\n      app.get(\"/api/login\", (req, res) => {\n        res.redirect(\"/api/auth/google\");\n      });\n\n      app.get(\"/api/logout\", (req, res) => {\n        req.logout(() => {\n          res.redirect(\"/\");\n        });\n      });\n    } else {\n      // No OAuth configured - only email/OTP will work\n      passport.serializeUser((user: Express.User, cb) => cb(null, user));\n      passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n      app.get(\"/api/login\", (req, res) => {\n        res.status(501).json({ \n          message: \"OAuth not configured. Please use email/OTP authentication or set GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET environment variables.\" \n        });\n      });\n\n      app.get(\"/api/logout\", (req, res) => {\n        req.logout(() => {\n          res.redirect(\"/\");\n        });\n      });\n    }\n  }\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  // Skip authentication check in non-Replit environments\n  if (!isReplitEnvironment) {\n    return next();\n  }\n\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":7841},"client/src/pages/Watch.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { ThumbsUp, ThumbsDown, Share2, Clock, Send, Edit, Trash, Reply, Heart, ChevronDown, ChevronUp, MoreVertical } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { VideoWithChannel, Comment } from \"@shared/schema\";\nimport { useState, useRef } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport CustomVideoPlayer from \"@/components/CustomVideoPlayer\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface CommentWithUser extends Comment {\n  user?: {\n    id: string;\n    username: string | null;\n    profileImageUrl: string | null;\n  };\n  replies?: CommentWithUser[];\n}\n\nexport default function Watch() {\n  const [, params] = useRoute(\"/watch/:id\");\n  const [, setLocation] = useLocation();\n  const videoId = params?.id;\n  const { currentUserId } = useAppStore();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [hasTrackedView, setHasTrackedView] = useState(false);\n  const [descriptionExpanded, setDescriptionExpanded] = useState(false);\n  \n  const [commentText, setCommentText] = useState(\"\");\n  const [replyTo, setReplyTo] = useState<string | null>(null);\n  const [replyText, setReplyText] = useState(\"\");\n  const [editingComment, setEditingComment] = useState<string | null>(null);\n  const [editText, setEditText] = useState(\"\");\n  const [saveDialogOpen, setSaveDialogOpen] = useState(false);\n  const [newPlaylistName, setNewPlaylistName] = useState(\"\");\n\n  const { data: video, isLoading } = useQuery<VideoWithChannel>({\n    queryKey: [\"/api/videos\", videoId],\n    queryFn: async () => {\n      const response = await fetch(`/api/videos/${videoId}`);\n      if (!response.ok) throw new Error('Failed to fetch video');\n      return response.json();\n    },\n    enabled: !!videoId\n  });\n\n  const { data: likeCounts = { likes: 0, dislikes: 0 } } = useQuery({\n    queryKey: [\"/api/videos/likes\", videoId],\n    queryFn: async () => {\n      const response = await fetch(`/api/videos/${videoId}/likes`);\n      if (!response.ok) return { likes: 0, dislikes: 0 };\n      return response.json();\n    },\n    enabled: !!videoId\n  });\n\n  const { data: userLike } = useQuery({\n    queryKey: [\"/api/videos/user-like\", videoId, currentUserId],\n    queryFn: async () => {\n      const response = await fetch(`/api/videos/${videoId}/user-like/${currentUserId}`);\n      if (!response.ok) return null;\n      return response.json();\n    },\n    enabled: !!videoId && !!currentUserId\n  });\n\n  const { data: subscriptions = [] } = useQuery({\n    queryKey: [\"/api/subscriptions\", currentUserId],\n    queryFn: async () => {\n      const response = await fetch(`/api/subscriptions/${currentUserId}`);\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!currentUserId\n  });\n\n  const isSubscribed = subscriptions.some((sub: any) => sub.channelId === video?.channelId);\n\n  const { data: comments = [] } = useQuery<CommentWithUser[]>({\n    queryKey: [\"/api/videos/comments\", videoId],\n    queryFn: async () => {\n      const response = await fetch(`/api/videos/${videoId}/comments`);\n      if (!response.ok) return [];\n      const data = await response.json();\n      \n      const topLevelComments = data.filter((c: Comment) => !c.parentId);\n      const replies = data.filter((c: Comment) => c.parentId);\n      \n      return topLevelComments.map((comment: Comment) => ({\n        ...comment,\n        replies: replies.filter((r: Comment) => r.parentId === comment.id)\n      }));\n    },\n    enabled: !!videoId\n  });\n\n  const { data: relatedVideos = [] } = useQuery<VideoWithChannel[]>({\n    queryKey: [\"/api/videos/related\", videoId],\n    queryFn: async () => {\n      const response = await fetch('/api/videos');\n      if (!response.ok) return [];\n      const allVideos = await response.json();\n      return allVideos.filter((v: VideoWithChannel) => v.id !== videoId).slice(0, 15);\n    },\n    enabled: !!videoId\n  });\n\n  const trackViewMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/videos/${videoId}/view`, { method: 'POST' });\n      if (!response.ok) throw new Error('Failed to track view');\n      return response.json();\n    }\n  });\n\n  const likeMutation = useMutation({\n    mutationFn: async (type: 'like' | 'dislike') => {\n      const response = await fetch(`/api/videos/${videoId}/like`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ type })\n      });\n      if (!response.ok) {\n        if (response.status === 401 || response.status === 403) {\n          throw new Error('UNAUTHORIZED');\n        }\n        throw new Error('Failed to like/dislike');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos/likes\", videoId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos/user-like\", videoId, currentUserId] });\n    },\n    onError: (error: Error) => {\n      if (error.message === 'UNAUTHORIZED') {\n        toast({ \n          title: \"Authentication required\", \n          description: \"Please log in to like videos\", \n          variant: \"destructive\" \n        });\n      } else {\n        toast({ \n          title: \"Error\", \n          description: \"Failed to like/dislike video\", \n          variant: \"destructive\" \n        });\n      }\n    }\n  });\n\n  const subscribeMutation = useMutation({\n    mutationFn: async () => {\n      if (isSubscribed) {\n        const response = await fetch('/api/subscriptions', {\n          method: 'DELETE',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ channelId: video?.channelId })\n        });\n        if (!response.ok) {\n          if (response.status === 401 || response.status === 403) {\n            throw new Error('UNAUTHORIZED');\n          }\n          throw new Error('Failed to unsubscribe');\n        }\n      } else {\n        const response = await fetch('/api/subscriptions', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ channelId: video?.channelId })\n        });\n        if (!response.ok) {\n          if (response.status === 401 || response.status === 403) {\n            throw new Error('UNAUTHORIZED');\n          }\n          throw new Error('Failed to subscribe');\n        }\n        return response.json();\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subscriptions\", currentUserId] });\n      toast({\n        title: isSubscribed ? \"Unsubscribed\" : \"Subscribed\",\n        description: isSubscribed \n          ? `Unsubscribed from ${video?.channel.name}` \n          : `Subscribed to ${video?.channel.name}`\n      });\n    },\n    onError: (error: Error) => {\n      if (error.message === 'UNAUTHORIZED') {\n        toast({ \n          title: \"Authentication required\", \n          description: \"Please log in to manage subscriptions\", \n          variant: \"destructive\" \n        });\n      } else {\n        toast({ \n          title: \"Error\", \n          description: isSubscribed ? \"Failed to unsubscribe\" : \"Failed to subscribe\", \n          variant: \"destructive\" \n        });\n      }\n    }\n  });\n\n  const createCommentMutation = useMutation({\n    mutationFn: async (data: { content: string; parentId?: string }) => {\n      const response = await fetch(`/api/videos/${videoId}/comments`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          content: data.content,\n          parentId: data.parentId || null\n        })\n      });\n      if (!response.ok) {\n        if (response.status === 401 || response.status === 403) {\n          throw new Error('UNAUTHORIZED');\n        }\n        throw new Error('Failed to post comment');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos/comments\", videoId] });\n      setCommentText(\"\");\n      setReplyTo(null);\n      setReplyText(\"\");\n      toast({ title: \"Comment posted\" });\n    },\n    onError: (error: Error) => {\n      if (error.message === 'UNAUTHORIZED') {\n        toast({ \n          title: \"Authentication required\", \n          description: \"Please log in to comment\", \n          variant: \"destructive\" \n        });\n      } else {\n        toast({ \n          title: \"Error\", \n          description: \"Failed to post comment\", \n          variant: \"destructive\" \n        });\n      }\n    }\n  });\n\n  const updateCommentMutation = useMutation({\n    mutationFn: async (data: { id: string; content: string }) => {\n      const response = await fetch(`/api/comments/${data.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ content: data.content })\n      });\n      if (!response.ok) {\n        if (response.status === 401 || response.status === 403) {\n          throw new Error('UNAUTHORIZED');\n        }\n        throw new Error('Failed to update comment');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos/comments\", videoId] });\n      setEditingComment(null);\n      setEditText(\"\");\n      toast({ title: \"Comment updated\" });\n    },\n    onError: (error: Error) => {\n      if (error.message === 'UNAUTHORIZED') {\n        toast({ \n          title: \"Authentication required\", \n          description: \"Please log in to edit comments\", \n          variant: \"destructive\" \n        });\n      } else {\n        toast({ \n          title: \"Error\", \n          description: \"Failed to update comment\", \n          variant: \"destructive\" \n        });\n      }\n    }\n  });\n\n  const deleteCommentMutation = useMutation({\n    mutationFn: async (commentId: string) => {\n      const response = await fetch(`/api/comments/${commentId}`, { method: 'DELETE' });\n      if (!response.ok) {\n        if (response.status === 401 || response.status === 403) {\n          throw new Error('UNAUTHORIZED');\n        }\n        throw new Error('Failed to delete comment');\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos/comments\", videoId] });\n      toast({ title: \"Comment deleted\" });\n    },\n    onError: (error: Error) => {\n      if (error.message === 'UNAUTHORIZED') {\n        toast({ \n          title: \"Authentication required\", \n          description: \"Please log in to delete comments\", \n          variant: \"destructive\" \n        });\n      } else {\n        toast({ \n          title: \"Error\", \n          description: \"Failed to delete comment\", \n          variant: \"destructive\" \n        });\n      }\n    }\n  });\n\n  const likeCommentMutation = useMutation({\n    mutationFn: async (commentId: string) => {\n      const response = await fetch(`/api/comments/${commentId}/like`, { method: 'POST' });\n      if (!response.ok) {\n        if (response.status === 401 || response.status === 403) {\n          throw new Error('UNAUTHORIZED');\n        }\n        throw new Error('Failed to like comment');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos/comments\", videoId] });\n    },\n    onError: (error: Error) => {\n      if (error.message === 'UNAUTHORIZED') {\n        toast({ \n          title: \"Authentication required\", \n          description: \"Please log in to like comments\", \n          variant: \"destructive\" \n        });\n      } else {\n        toast({ \n          title: \"Error\", \n          description: \"Failed to like comment\", \n          variant: \"destructive\" \n        });\n      }\n    }\n  });\n\n  const { data: userPlaylists = [] } = useQuery({\n    queryKey: [\"/api/playlists\", currentUserId],\n    queryFn: async () => {\n      if (!currentUserId) return [];\n      const response = await fetch(`/api/playlists/${currentUserId}`);\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!currentUserId\n  });\n\n  const createPlaylistMutation = useMutation({\n    mutationFn: async (name: string) => {\n      const response = await fetch('/api/playlists', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, isPublic: false })\n      });\n      if (!response.ok) throw new Error('Failed to create playlist');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/playlists\", currentUserId] });\n      setNewPlaylistName(\"\");\n      toast({ title: \"Playlist created!\" });\n    },\n    onError: () => {\n      toast({ \n        title: \"Error\", \n        description: \"Failed to create playlist\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const addToPlaylistMutation = useMutation({\n    mutationFn: async (playlistId: string) => {\n      const response = await fetch(`/api/playlists/${playlistId}/videos`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          videoId: videoId,\n          position: 0\n        })\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to add to playlist');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      setSaveDialogOpen(false);\n      toast({ \n        title: \"Saved!\", \n        description: \"Video added to playlist\" \n      });\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to add video to playlist\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleVideoPlay = () => {\n    if (!hasTrackedView && videoId) {\n      trackViewMutation.mutate();\n      setHasTrackedView(true);\n    }\n  };\n\n  const handleLike = () => {\n    if (!currentUserId) {\n      toast({ title: \"Please log in\", description: \"You must be logged in to like videos\", variant: \"destructive\" });\n      return;\n    }\n    likeMutation.mutate('like');\n  };\n\n  const handleDislike = () => {\n    if (!currentUserId) {\n      toast({ title: \"Please log in\", description: \"You must be logged in to dislike videos\", variant: \"destructive\" });\n      return;\n    }\n    likeMutation.mutate('dislike');\n  };\n\n  const handleSubscribe = () => {\n    if (!currentUserId) {\n      toast({ title: \"Please log in\", description: \"You must be logged in to subscribe\", variant: \"destructive\" });\n      return;\n    }\n    subscribeMutation.mutate();\n  };\n\n  const handleShare = () => {\n    const videoUrl = window.location.href;\n    navigator.clipboard.writeText(videoUrl).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Video link has been copied to clipboard\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Failed to copy\",\n        description: \"Could not copy link to clipboard\",\n        variant: \"destructive\"\n      });\n    });\n  };\n\n  const handleSave = () => {\n    if (!currentUserId) {\n      toast({ title: \"Please log in\", description: \"You must be logged in to save videos\", variant: \"destructive\" });\n      return;\n    }\n    setSaveDialogOpen(true);\n  };\n\n  const handleCreatePlaylist = () => {\n    if (!newPlaylistName.trim()) return;\n    createPlaylistMutation.mutate(newPlaylistName);\n  };\n\n  const handlePostComment = () => {\n    if (!currentUserId) {\n      toast({ title: \"Please log in\", description: \"You must be logged in to comment\", variant: \"destructive\" });\n      return;\n    }\n    if (!commentText.trim()) return;\n    createCommentMutation.mutate({ content: commentText });\n  };\n\n  const handlePostReply = (parentId: string) => {\n    if (!currentUserId) {\n      toast({ title: \"Please log in\", description: \"You must be logged in to reply\", variant: \"destructive\" });\n      return;\n    }\n    if (!replyText.trim()) return;\n    createCommentMutation.mutate({ content: replyText, parentId });\n  };\n\n  const handleEditComment = (commentId: string) => {\n    if (!editText.trim()) return;\n    updateCommentMutation.mutate({ id: commentId, content: editText });\n  };\n\n  const handleChannelClick = () => {\n    if (video?.channelId) {\n      setLocation(`/channel/${video.channelId}`);\n    }\n  };\n\n  const handleDeleteComment = (commentId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this comment?\")) {\n      deleteCommentMutation.mutate(commentId);\n    }\n  };\n\n  const handleLikeComment = (commentId: string) => {\n    if (!currentUserId) {\n      toast({ title: \"Please log in\", description: \"You must be logged in to like comments\", variant: \"destructive\" });\n      return;\n    }\n    likeCommentMutation.mutate(commentId);\n  };\n\n  const handleRelatedVideoClick = (videoId: string) => {\n    setLocation(`/watch/${videoId}`);\n  };\n\n  if (isLoading || !video) {\n    return (\n      <div className=\"max-w-[1800px] mx-auto px-3 sm:px-4 py-4 sm:py-6\">\n        <div className=\"grid grid-cols-1 xl:grid-cols-[1fr,400px] gap-4 sm:gap-6\">\n          <div className=\"space-y-3 sm:space-y-4\">\n            <div className=\"aspect-video bg-muted animate-pulse rounded-2xl\"></div>\n            <div className=\"h-6 sm:h-8 bg-muted animate-pulse rounded-lg w-3/4\"></div>\n            <div className=\"flex gap-3 sm:gap-4\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-muted animate-pulse rounded-full\"></div>\n              <div className=\"flex-1 space-y-2 sm:space-y-3\">\n                <div className=\"h-3 sm:h-4 bg-muted animate-pulse rounded-lg w-1/4\"></div>\n                <div className=\"h-2 sm:h-3 bg-muted animate-pulse rounded-lg w-1/6\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const CommentItem = ({ comment, isReply = false }: { comment: CommentWithUser; isReply?: boolean }) => {\n    const isOwner = comment.userId === currentUserId;\n    const isEditing = editingComment === comment.id;\n    const isReplying = replyTo === comment.id;\n\n    return (\n      <div className={`flex gap-3 sm:gap-4 ${isReply ? 'ml-10 sm:ml-14 mt-2 sm:mt-3' : 'py-3 sm:py-4'}`}>\n        <Avatar className=\"h-9 w-9 sm:h-10 sm:w-10 flex-shrink-0 ring-2 ring-background\">\n          <AvatarImage src={comment.user?.profileImageUrl || undefined} />\n          <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n            {comment.user?.username?.[0]?.toUpperCase() || 'U'}\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"flex-1 space-y-1.5 sm:space-y-2 min-w-0\">\n          <div>\n            <div className=\"flex items-baseline gap-2 mb-1 flex-wrap\">\n              <span className=\"font-semibold text-sm hover:text-primary cursor-pointer transition-colors\">\n                @{comment.user?.username || 'Anonymous'}\n              </span>\n              <span className=\"text-xs text-muted-foreground\">\n                {comment.createdAt ? formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true }) : 'just now'}\n              </span>\n            </div>\n            \n            {isEditing ? (\n              <div className=\"space-y-3\">\n                <Textarea\n                  value={editText}\n                  onChange={(e) => setEditText(e.target.value)}\n                  className=\"min-h-[80px] resize-none border-2 focus-visible:ring-2 focus-visible:ring-primary\"\n                />\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    onClick={() => handleEditComment(comment.id)}\n                    disabled={updateCommentMutation.isPending}\n                    className=\"rounded-full\"\n                  >\n                    {updateCommentMutation.isPending ? \"Saving...\" : \"Save\"}\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"ghost\" \n                    onClick={() => {\n                      setEditingComment(null);\n                      setEditText(\"\");\n                    }}\n                    className=\"rounded-full\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <p className=\"text-sm leading-relaxed break-words\">{comment.content}</p>\n            )}\n          </div>\n\n          {!isEditing && (\n            <div className=\"flex items-center gap-2 flex-wrap\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-9 px-3 rounded-full hover:bg-primary/10 transition-all\"\n                onClick={() => handleLikeComment(comment.id)}\n                disabled={likeCommentMutation.isPending}\n              >\n                <Heart className=\"h-4 w-4 mr-1.5\" />\n                <span className=\"text-xs font-medium\">{comment.likes || 0}</span>\n              </Button>\n              \n              {!isReply && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-9 px-3 rounded-full hover:bg-primary/10 transition-all\"\n                  onClick={() => {\n                    setReplyTo(comment.id);\n                    setReplyText(\"\");\n                  }}\n                >\n                  <Reply className=\"h-4 w-4 mr-1.5\" />\n                  <span className=\"text-xs font-medium\">Reply</span>\n                </Button>\n              )}\n\n              {isOwner && (\n                <>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 px-3 rounded-full hover:bg-primary/10 transition-all\"\n                    onClick={() => {\n                      setEditingComment(comment.id);\n                      setEditText(comment.content);\n                    }}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 px-3 rounded-full hover:bg-destructive/10 text-destructive transition-all\"\n                    onClick={() => handleDeleteComment(comment.id)}\n                    disabled={deleteCommentMutation.isPending}\n                  >\n                    <Trash className=\"h-4 w-4\" />\n                  </Button>\n                </>\n              )}\n            </div>\n          )}\n\n          {isReplying && (\n            <div className=\"space-y-3 mt-3 bg-muted/30 rounded-xl p-4\">\n              <Textarea\n                value={replyText}\n                onChange={(e) => setReplyText(e.target.value)}\n                placeholder=\"Add a reply...\"\n                className=\"min-h-[80px] resize-none bg-background\"\n              />\n              <div className=\"flex gap-2 justify-end\">\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\"\n                  onClick={() => {\n                    setReplyTo(null);\n                    setReplyText(\"\");\n                  }}\n                  className=\"rounded-full\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  size=\"sm\" \n                  onClick={() => handlePostReply(comment.id)}\n                  disabled={createCommentMutation.isPending || !replyText.trim()}\n                  className=\"rounded-full\"\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  {createCommentMutation.isPending ? \"Posting...\" : \"Reply\"}\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {comment.replies && comment.replies.length > 0 && (\n            <div className=\"space-y-1 mt-4\">\n              {comment.replies.map((reply) => (\n                <CommentItem key={reply.id} comment={reply} isReply />\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-[1800px] mx-auto px-0 sm:px-3 md:px-4 py-0 sm:py-4 md:py-6 w-full overflow-x-hidden\">\n      <div className=\"grid grid-cols-1 xl:grid-cols-[1fr,400px] gap-0 sm:gap-4 md:gap-6 w-full\">\n        {/* Main Content */}\n        <div className=\"space-y-0 sm:space-y-5\">\n          {/* Video Player */}\n          <div className=\"aspect-video bg-black sm:rounded-2xl overflow-hidden shadow-2xl ring-1 ring-white/10\">\n            <CustomVideoPlayer\n              src={video.videoUrl}\n              videoRef={videoRef}\n              onPlay={handleVideoPlay}\n              onError={(e) => {\n                console.error(\"Video error:\", e);\n                toast({ \n                  title: \"Video error\", \n                  description: \"Failed to load video. Using placeholder.\", \n                  variant: \"destructive\" \n                });\n              }}\n            />\n          </div>\n\n          {/* Video Info Section - Mobile Optimized */}\n          <div className=\"px-3 sm:px-0 py-3 sm:py-0 space-y-3\">\n            {/* Video Title */}\n            <h1 className=\"text-lg sm:text-lg md:text-xl lg:text-2xl font-bold leading-tight hover:text-primary/90 transition-colors cursor-default break-words\">\n              {video.title}\n            </h1>\n\n            {/* Views and Date - Compact Line (Mobile Only) */}\n            <div className=\"flex items-center gap-1 text-sm text-muted-foreground sm:hidden\">\n              <span className=\"font-medium\">{video.views?.toLocaleString()} views</span>\n              <span>•</span>\n              <span>\n                {formatDistanceToNow(new Date(video.uploadedAt || Date.now()), { addSuffix: true })}\n              </span>\n            </div>\n            \n            {/* Channel Section - Single Row on Mobile */}\n            <div className=\"flex items-center justify-between gap-3 w-full\">\n              <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                <Avatar className=\"h-10 w-10 sm:h-12 sm:w-12 flex-shrink-0 ring-2 ring-background cursor-pointer hover:ring-primary transition-all\" onClick={handleChannelClick}>\n                  <AvatarImage src={video.channel.avatar || undefined} />\n                  <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white text-base sm:text-lg font-bold\">\n                    {video.channel.name[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-1.5\">\n                    <h2 className=\"font-semibold text-sm sm:text-base truncate hover:text-primary cursor-pointer transition-colors\" onClick={handleChannelClick}>\n                      {video.channel.name}\n                    </h2>\n                    {video.channel.verified && (\n                      <svg className=\"h-4 w-4 sm:h-5 sm:w-5 text-primary flex-shrink-0\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n                      </svg>\n                    )}\n                  </div>\n                  <p className=\"text-xs sm:text-sm text-muted-foreground truncate\">\n                    {video.channel.subscribers?.toLocaleString()} subscribers\n                  </p>\n                </div>\n              </div>\n              <Button \n                variant={isSubscribed ? \"secondary\" : \"default\"} \n                className={`rounded-full px-5 py-2.5 sm:px-6 sm:py-2 h-11 sm:h-auto font-semibold transition-all flex-shrink-0 ${\n                  isSubscribed \n                    ? 'hover:bg-secondary/80' \n                    : 'bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 shadow-lg shadow-red-500/30'\n                }`}\n                onClick={handleSubscribe}\n                disabled={subscribeMutation.isPending}\n              >\n                {isSubscribed ? \"Subscribed\" : \"Subscribe\"}\n              </Button>\n            </div>\n\n            {/* Action Buttons - Horizontal Scrollable on Mobile */}\n            <div className=\"relative -mx-3 sm:mx-0\">\n              <div className=\"overflow-x-auto scrollbar-hide px-3 sm:px-0\">\n                <div className=\"flex items-center gap-2 sm:flex-wrap w-max sm:w-auto\">\n                  {/* Like/Dislike Group */}\n                  <div className=\"flex items-center bg-secondary/50 rounded-full overflow-hidden shadow-sm hover:shadow-md transition-shadow flex-shrink-0\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className={`rounded-none h-11 sm:h-auto px-4 sm:px-4 py-2.5 sm:py-2 ${userLike?.type === 'like' ? 'bg-primary/10 text-primary' : ''} hover:bg-primary/20 transition-all`}\n                      onClick={handleLike}\n                      disabled={likeMutation.isPending}\n                    >\n                      <ThumbsUp className={`h-5 w-5 sm:h-4 sm:w-4 mr-2 ${userLike?.type === 'like' ? 'fill-current' : ''}`} />\n                      <span className=\"font-semibold text-sm\">{likeCounts.likes}</span>\n                    </Button>\n                    <Separator orientation=\"vertical\" className=\"h-6\" />\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className={`rounded-none h-11 sm:h-auto px-4 sm:px-4 py-2.5 sm:py-2 ${userLike?.type === 'dislike' ? 'bg-primary/10 text-primary' : ''} hover:bg-primary/20 transition-all`}\n                      onClick={handleDislike}\n                      disabled={likeMutation.isPending}\n                    >\n                      <ThumbsDown className={`h-5 w-5 sm:h-4 sm:w-4 ${userLike?.type === 'dislike' ? 'fill-current' : ''}`} />\n                    </Button>\n                  </div>\n\n                  <Button \n                    variant=\"secondary\" \n                    size=\"sm\" \n                    className=\"rounded-full h-11 sm:h-auto px-5 py-2.5 sm:px-5 sm:py-2 hover:bg-secondary/80 transition-all shadow-sm flex-shrink-0\"\n                    onClick={handleShare}\n                  >\n                    <Share2 className=\"h-5 w-5 sm:h-4 sm:w-4 mr-2\" />\n                    <span className=\"font-semibold text-sm\">Share</span>\n                  </Button>\n                  \n                  <Button \n                    variant=\"secondary\" \n                    size=\"sm\" \n                    className=\"rounded-full h-11 sm:h-auto px-5 py-2.5 sm:px-5 sm:py-2 hover:bg-secondary/80 transition-all shadow-sm flex-shrink-0\"\n                    onClick={handleSave}\n                  >\n                    <Clock className=\"h-5 w-5 sm:h-4 sm:w-4 mr-2\" />\n                    <span className=\"font-semibold text-sm\">Save</span>\n                  </Button>\n                  \n                  <Button variant=\"secondary\" size=\"sm\" className=\"rounded-full h-11 sm:h-auto px-4 py-2.5 sm:py-2 hover:bg-secondary/80 transition-all shadow-sm flex-shrink-0\">\n                    <MoreVertical className=\"h-5 w-5 sm:h-4 sm:w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Description Section */}\n          <div className=\"mx-3 sm:mx-0 bg-secondary/30 rounded-2xl p-3 sm:p-4 md:p-5 hover:bg-secondary/40 transition-colors\">\n            <div className=\"flex gap-2 sm:gap-4 text-xs sm:text-sm font-semibold mb-3 flex-wrap hidden sm:flex\">\n              <span className=\"text-foreground\">{video.views?.toLocaleString()} views</span>\n              <span className=\"text-muted-foreground\">\n                {new Date(video.uploadedAt || Date.now()).toLocaleDateString('en-US', { \n                  year: 'numeric', \n                  month: 'short', \n                  day: 'numeric' \n                })}\n              </span>\n              {video.category && (\n                <span className=\"px-3 py-0.5 bg-primary/10 text-primary rounded-full text-xs font-medium\">\n                  {video.category}\n                </span>\n              )}\n            </div>\n            <div className={`text-sm leading-relaxed whitespace-pre-wrap ${descriptionExpanded ? '' : 'line-clamp-2'}`}>\n              {video.description || \"No description available.\"}\n            </div>\n            {video.description && video.description.length > 100 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"mt-2 text-foreground font-semibold hover:bg-transparent p-0 h-auto\"\n                onClick={() => setDescriptionExpanded(!descriptionExpanded)}\n              >\n                {descriptionExpanded ? (\n                  <>Show less <ChevronUp className=\"ml-1 h-4 w-4\" /></>\n                ) : (\n                  <>Show more <ChevronDown className=\"ml-1 h-4 w-4\" /></>\n                )}\n              </Button>\n            )}\n          </div>\n\n          {/* Comments Section */}\n          <div className=\"space-y-4 sm:space-y-6 pb-6 sm:pb-8 px-3 sm:px-0\">\n            <div className=\"flex items-center gap-3 sm:gap-4\">\n              <h2 className=\"font-bold text-lg sm:text-xl\">{comments.length} Comments</h2>\n            </div>\n            \n            {/* Add Comment */}\n            <div className=\"flex gap-3 sm:gap-4\">\n              <Avatar className=\"h-10 w-10 flex-shrink-0 ring-2 ring-background\">\n                <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n                  {currentUserId ? 'U' : 'G'}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 space-y-2 sm:space-y-3\">\n                <Textarea\n                  value={commentText}\n                  onChange={(e) => setCommentText(e.target.value)}\n                  placeholder=\"Add a comment...\"\n                  className=\"min-h-[100px] resize-none border-2 focus-visible:ring-2 focus-visible:ring-primary rounded-xl\"\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button \n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setCommentText(\"\")}\n                    className=\"rounded-full\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handlePostComment}\n                    disabled={createCommentMutation.isPending || !commentText.trim()}\n                    className=\"rounded-full px-5\"\n                    size=\"sm\"\n                  >\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    {createCommentMutation.isPending ? \"Posting...\" : \"Comment\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Comments List */}\n            <Separator />\n            \n            <div className=\"space-y-1\">\n              {comments.map((comment) => (\n                <CommentItem key={comment.id} comment={comment} />\n              ))}\n              \n              {comments.length === 0 && (\n                <div className=\"text-center py-16\">\n                  <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-muted mb-4\">\n                    <Send className=\"h-8 w-8 text-muted-foreground\" />\n                  </div>\n                  <p className=\"text-muted-foreground font-medium\">No comments yet</p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">Be the first to share your thoughts!</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Sidebar - Related Videos */}\n        <div className=\"space-y-2 sm:space-y-3 w-full overflow-x-hidden px-3 sm:px-0\">\n          <div className=\"xl:sticky top-4 space-y-2 sm:space-y-3\">\n            <h2 className=\"font-bold text-base sm:text-lg md:text-xl\">Related Videos</h2>\n            <div className=\"space-y-2 sm:space-y-3\">\n              {relatedVideos.map((relatedVideo) => (\n                <div \n                  key={relatedVideo.id} \n                  className=\"group flex gap-2 sm:gap-3 cursor-pointer hover:bg-secondary/30 p-2 rounded-xl transition-all duration-200\"\n                  onClick={() => handleRelatedVideoClick(relatedVideo.id)}\n                >\n                  <div className=\"w-[120px] sm:w-[140px] xl:w-[168px] flex-shrink-0 relative rounded-lg overflow-hidden\">\n                    <img\n                      src={relatedVideo.thumbnail}\n                      alt={relatedVideo.title}\n                      className=\"w-full aspect-video object-cover group-hover:scale-105 transition-transform duration-200\"\n                    />\n                    {relatedVideo.duration && !relatedVideo.isLive && (\n                      <div className=\"absolute bottom-1.5 right-1.5 bg-black/90 text-white text-xs px-1.5 py-0.5 rounded font-semibold\">\n                        {relatedVideo.duration}\n                      </div>\n                    )}\n                    {relatedVideo.isLive && (\n                      <div className=\"absolute bottom-1.5 right-1.5 bg-red-600 text-white text-xs px-2 py-0.5 rounded font-bold uppercase\">\n                        Live\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"text-sm font-semibold line-clamp-2 mb-1.5 group-hover:text-primary transition-colors leading-snug\">\n                      {relatedVideo.title}\n                    </h3>\n                    <div className=\"space-y-0.5\">\n                      <p className=\"text-xs text-muted-foreground hover:text-foreground transition-colors font-medium\">\n                        {relatedVideo.channel.name}\n                        {relatedVideo.channel.verified && (\n                          <svg className=\"inline h-3 w-3 ml-1 text-primary\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                            <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n                          </svg>\n                        )}\n                      </p>\n                      <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                        <span>{relatedVideo.views?.toLocaleString()} views</span>\n                        <span>•</span>\n                        <span>{formatDistanceToNow(new Date(relatedVideo.uploadedAt || Date.now()), { addSuffix: true })}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              {relatedVideos.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p className=\"text-sm\">No related videos found</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Save to Playlist Dialog */}\n      <Dialog open={saveDialogOpen} onOpenChange={setSaveDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Save to playlist</DialogTitle>\n            <DialogDescription>\n              Choose a playlist or create a new one\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            {/* Playlist List */}\n            <div className=\"space-y-2 max-h-[300px] overflow-y-auto\">\n              {userPlaylists.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground text-center py-4\">\n                  No playlists yet. Create one below!\n                </p>\n              ) : (\n                userPlaylists.map((playlist: any) => (\n                  <button\n                    key={playlist.id}\n                    onClick={() => addToPlaylistMutation.mutate(playlist.id)}\n                    disabled={addToPlaylistMutation.isPending}\n                    className=\"w-full flex items-center gap-3 p-3 rounded-lg hover:bg-secondary/50 transition-colors text-left\"\n                  >\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{playlist.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {playlist.isPublic ? 'Public' : 'Private'}\n                      </p>\n                    </div>\n                  </button>\n                ))\n              )}\n            </div>\n\n            {/* Create New Playlist */}\n            <div className=\"border-t pt-4 space-y-2\">\n              <p className=\"text-sm font-medium\">Create new playlist</p>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Playlist name\"\n                  value={newPlaylistName}\n                  onChange={(e) => setNewPlaylistName(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      handleCreatePlaylist();\n                    }\n                  }}\n                />\n                <Button \n                  onClick={handleCreatePlaylist}\n                  disabled={!newPlaylistName.trim() || createPlaylistMutation.isPending}\n                >\n                  Create\n                </Button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":41829},"client/src/components/UploadVideoDialog.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Upload, Video, X, ChevronRight, ChevronLeft, Check, AlertCircle, PlayCircle, Film, Tag, Play } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\ninterface UploadVideoDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ntype UploadStep = \"upload\" | \"details\" | \"elements\" | \"checks\" | \"visibility\";\n\nconst VIDEO_CATEGORIES = [\n  \"Gaming\",\n  \"Music\",\n  \"Education\",\n  \"Entertainment\",\n  \"Sports\",\n  \"News\",\n  \"Movies\",\n  \"Tech\",\n  \"Science\",\n  \"Comedy\",\n  \"Vlog\",\n  \"Tutorial\",\n  \"Review\",\n  \"Travel\",\n  \"Food\",\n  \"Fashion\",\n  \"Other\"\n];\n\nconst MAX_FILE_SIZE = 500 * 1024 * 1024; // 500MB limit (matches server-side multer config)\nconst ACCEPTED_VIDEO_FORMATS = ['video/mp4', 'video/webm', 'video/ogg', 'video/quicktime'];\n\nexport default function UploadVideoDialog({ open, onOpenChange }: UploadVideoDialogProps) {\n  const [currentStep, setCurrentStep] = useState<UploadStep>(\"upload\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [videoPreviewUrl, setVideoPreviewUrl] = useState<string | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  \n  // Video details\n  const [videoTitle, setVideoTitle] = useState(\"\");\n  const [videoDescription, setVideoDescription] = useState(\"\");\n  const [thumbnail, setThumbnail] = useState<File | null>(null);\n  const [thumbnailPreview, setThumbnailPreview] = useState<string | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [tags, setTags] = useState<string[]>([]);\n  const [tagInput, setTagInput] = useState(\"\");\n  const [selectedPlaylist, setSelectedPlaylist] = useState(\"\");\n  const [audienceType, setAudienceType] = useState(\"no\");\n  const [videoDuration, setVideoDuration] = useState<string>(\"\");\n  const [isShortVideo, setIsShortVideo] = useState(false);\n  \n  // Visibility settings\n  const [visibility, setVisibility] = useState<\"private\" | \"unlisted\" | \"public\">(\"private\");\n  const [scheduleDate, setScheduleDate] = useState(\"\");\n  \n  // Error state\n  const [errors, setErrors] = useState<{[key: string]: string}>({});\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const thumbnailInputRef = useRef<HTMLInputElement>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const steps: { id: UploadStep; label: string; completed: boolean }[] = [\n    { id: \"details\", label: \"Details\", completed: currentStep !== \"upload\" && currentStep !== \"details\" },\n    { id: \"elements\", label: \"Video elements\", completed: currentStep === \"checks\" || currentStep === \"visibility\" },\n    { id: \"checks\", label: \"Checks\", completed: currentStep === \"visibility\" },\n    { id: \"visibility\", label: \"Visibility\", completed: false },\n  ];\n\n  const validateFile = (file: File): string | null => {\n    if (!ACCEPTED_VIDEO_FORMATS.includes(file.type)) {\n      return \"Please upload a valid video file (MP4, WebM, OGG, or MOV)\";\n    }\n    if (file.size > MAX_FILE_SIZE) {\n      return `File size must be less than ${MAX_FILE_SIZE / (1024 * 1024)}MB`;\n    }\n    return null;\n  };\n\n  const extractVideoDuration = (file: File): Promise<string> => {\n    return new Promise((resolve) => {\n      const video = document.createElement('video');\n      video.preload = 'metadata';\n      video.onloadedmetadata = () => {\n        window.URL.revokeObjectURL(video.src);\n        const duration = video.duration;\n        const minutes = Math.floor(duration / 60);\n        const seconds = Math.floor(duration % 60);\n        resolve(`${minutes}:${seconds.toString().padStart(2, '0')}`);\n      };\n      video.onerror = () => resolve(\"0:00\");\n      video.src = URL.createObjectURL(file);\n    });\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      const file = files[0];\n      if (file.type.startsWith(\"video/\")) {\n        handleFileSelect(file);\n      }\n    }\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  };\n\n  const handleFileSelect = async (file: File) => {\n    const error = validateFile(file);\n    if (error) {\n      toast({\n        title: \"Invalid file\",\n        description: error,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSelectedFile(file);\n    setVideoTitle(file.name.replace(/\\.[^/.]+$/, \"\"));\n    setIsProcessing(true);\n    \n    // Create video preview\n    const previewUrl = URL.createObjectURL(file);\n    setVideoPreviewUrl(previewUrl);\n    \n    // Extract duration\n    const duration = await extractVideoDuration(file);\n    setVideoDuration(duration);\n    \n    // Check if it's a short video (< 60 seconds)\n    const [minutes, seconds] = duration.split(':').map(Number);\n    const totalSeconds = minutes * 60 + seconds;\n    setIsShortVideo(totalSeconds <= 60);\n    \n    // Simulate processing\n    setTimeout(() => {\n      setIsProcessing(false);\n      setCurrentStep(\"details\");\n    }, 1500);\n  };\n\n  const handleThumbnailSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      setThumbnail(file);\n      const previewUrl = URL.createObjectURL(file);\n      setThumbnailPreview(previewUrl);\n    }\n  };\n\n  const addTag = () => {\n    if (tagInput.trim() && tags.length < 10) {\n      setTags([...tags, tagInput.trim()]);\n      setTagInput(\"\");\n    }\n  };\n\n  const removeTag = (index: number) => {\n    setTags(tags.filter((_, i) => i !== index));\n  };\n\n  const validateStep = (step: UploadStep): boolean => {\n    const newErrors: {[key: string]: string} = {};\n\n    if (step === \"details\") {\n      if (!videoTitle.trim()) {\n        newErrors.title = \"Title is required\";\n      } else if (videoTitle.length > 100) {\n        newErrors.title = \"Title must be 100 characters or less\";\n      }\n      if (!thumbnail) {\n        newErrors.thumbnail = \"Thumbnail is required\";\n      }\n      if (!selectedCategory) {\n        newErrors.category = \"Category is required\";\n      }\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (currentStep === \"details\") {\n      if (validateStep(\"details\")) {\n        setCurrentStep(\"elements\");\n      }\n    } else if (currentStep === \"elements\") setCurrentStep(\"checks\");\n    else if (currentStep === \"checks\") setCurrentStep(\"visibility\");\n  };\n\n  const handleBack = () => {\n    if (currentStep === \"elements\") setCurrentStep(\"details\");\n    else if (currentStep === \"checks\") setCurrentStep(\"elements\");\n    else if (currentStep === \"visibility\") setCurrentStep(\"checks\");\n  };\n\n  const convertFileToBase64 = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = error => reject(error);\n    });\n  };\n\n  const handleSave = async () => {\n    if (!selectedFile || !thumbnail) {\n      toast({\n        title: \"Missing required fields\",\n        description: \"Please provide both video and thumbnail\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    try {\n      // Step 1: Get pre-signed URL for video upload\n      setUploadProgress(5);\n      const videoPresignedResponse = await fetch('/api/upload/presigned-url', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          fileName: selectedFile.name,\n          contentType: selectedFile.type,\n          fileType: 'video'\n        }),\n      });\n\n      if (!videoPresignedResponse.ok) {\n        const error = await videoPresignedResponse.json();\n        if (videoPresignedResponse.status === 401) {\n          throw new Error('Please login to upload videos');\n        } else if (videoPresignedResponse.status === 503) {\n          throw new Error('Video storage not configured. Please set up iDrive E2 credentials.');\n        }\n        throw new Error(error.message || 'Failed to generate upload URL');\n      }\n\n      const { uploadUrl: videoUploadUrl, key: videoKey } = await videoPresignedResponse.json();\n      setUploadProgress(10);\n\n      // Step 2: Upload video directly to iDrive E2 (bypasses server RAM!)\n      const videoDirectUploadResponse = await fetch(videoUploadUrl, {\n        method: 'PUT',\n        body: selectedFile,\n        headers: {\n          'Content-Type': selectedFile.type,\n        },\n      });\n\n      if (!videoDirectUploadResponse.ok) {\n        throw new Error('Failed to upload video to storage');\n      }\n\n      setUploadProgress(50);\n\n      // Step 3: Get pre-signed URL for thumbnail upload\n      const thumbnailPresignedResponse = await fetch('/api/upload/presigned-url', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          fileName: thumbnail.name,\n          contentType: thumbnail.type,\n          fileType: 'thumbnail'\n        }),\n      });\n\n      if (!thumbnailPresignedResponse.ok) {\n        const error = await thumbnailPresignedResponse.json();\n        throw new Error(error.message || 'Failed to generate thumbnail upload URL');\n      }\n\n      const { uploadUrl: thumbnailUploadUrl, key: thumbnailKey } = await thumbnailPresignedResponse.json();\n      setUploadProgress(60);\n\n      // Step 4: Upload thumbnail directly to iDrive E2\n      const thumbnailDirectUploadResponse = await fetch(thumbnailUploadUrl, {\n        method: 'PUT',\n        body: thumbnail,\n        headers: {\n          'Content-Type': thumbnail.type,\n        },\n      });\n\n      if (!thumbnailDirectUploadResponse.ok) {\n        throw new Error('Failed to upload thumbnail to storage');\n      }\n\n      setUploadProgress(75);\n\n      // Construct URLs for video and thumbnail\n      const videoUrl = `/api/videos/stream/${encodeURIComponent(videoKey)}`;\n      const thumbnailUrl = `/api/thumbnails/${encodeURIComponent(thumbnailKey)}`;\n\n      // Step 5: Create video record in database\n      const response = await fetch('/api/videos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: videoTitle,\n          description: videoDescription || undefined,\n          thumbnail: thumbnailUrl,\n          videoUrl: videoUrl,\n          storageKey: videoKey,\n          duration: videoDuration,\n          isShorts: isShortVideo,\n          category: selectedCategory || undefined,\n          tags: tags.length > 0 ? tags : undefined,\n          visibility,\n          scheduledAt: scheduleDate || undefined,\n          madeForKids: audienceType === 'yes',\n          playlist: selectedPlaylist || undefined,\n        }),\n      });\n\n      setUploadProgress(100);\n\n      if (!response.ok) {\n        const error = await response.json();\n        \n        // Handle specific error cases\n        if (response.status === 401) {\n          throw new Error('Please login to upload videos');\n        } else if (response.status === 400) {\n          if (error.message?.includes('channel')) {\n            throw new Error('Please create a channel before uploading videos. Go to Studio Settings to create one.');\n          }\n          throw new Error(error.message || 'Invalid video data. Please check all required fields.');\n        }\n        \n        throw new Error(error.message || 'Upload failed');\n      }\n\n      const result = await response.json();\n      \n      // Invalidate video queries to refresh the list\n      queryClient.invalidateQueries({ queryKey: ['/api/videos'] });\n\n      toast({\n        title: \"Success!\",\n        description: `Video \"${videoTitle}\" uploaded successfully`,\n      });\n\n      // Close dialog after a short delay\n      setTimeout(() => {\n        handleClose();\n      }, 1000);\n\n    } catch (error: any) {\n      console.error(\"Upload error:\", error);\n      toast({\n        title: \"Upload failed\",\n        description: error.message || \"Failed to upload video. Please try again.\",\n        variant: \"destructive\",\n      });\n      setUploadProgress(0);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (videoPreviewUrl) {\n      URL.revokeObjectURL(videoPreviewUrl);\n    }\n    if (thumbnailPreview) {\n      URL.revokeObjectURL(thumbnailPreview);\n    }\n    \n    setSelectedFile(null);\n    setVideoPreviewUrl(null);\n    setCurrentStep(\"upload\");\n    setVideoTitle(\"\");\n    setVideoDescription(\"\");\n    setThumbnail(null);\n    setThumbnailPreview(null);\n    setSelectedCategory(\"\");\n    setTags([]);\n    setTagInput(\"\");\n    setVisibility(\"private\");\n    setIsProcessing(false);\n    setIsUploading(false);\n    setUploadProgress(0);\n    setErrors({});\n    setVideoDuration(\"\");\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md sm:max-w-lg md:max-w-2xl lg:max-w-5xl max-h-[90vh] p-0 flex flex-col\">\n        <DialogHeader className=\"px-4 sm:px-6 pt-4 sm:pt-6 pb-3 sm:pb-4 border-b flex-shrink-0\">\n          <DialogTitle className=\"text-lg sm:text-xl flex items-center gap-2\">\n            <Film className=\"h-5 w-5\" />\n            {currentStep === \"upload\" ? \"Upload video\" : selectedFile?.name || \"video\"}\n          </DialogTitle>\n          {currentStep === \"upload\" && (\n            <DialogDescription className=\"text-sm\">\n              Select or drag a video file to upload to your channel\n            </DialogDescription>\n          )}\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-y-auto min-h-0\">\n          {currentStep === \"upload\" ? (\n            <div className=\"p-4 sm:p-6\">\n              <div\n                className={`border-2 border-dashed rounded-lg p-6 sm:p-8 md:p-12 lg:p-16 text-center transition-all ${\n                  isDragging\n                    ? \"border-primary bg-primary/10 scale-[1.02]\"\n                    : \"border-border hover:border-primary/50\"\n                }`}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n              >\n                <div className=\"flex flex-col items-center gap-3 sm:gap-4 md:gap-6\">\n                  <div className=\"w-24 h-24 sm:w-28 sm:h-28 md:w-32 md:h-32 rounded-full bg-gradient-to-br from-primary/20 to-primary/5 flex items-center justify-center\">\n                    <Upload className=\"w-10 h-10 sm:w-12 sm:h-12 md:w-16 md:h-16 text-primary\" />\n                  </div>\n                  <div className=\"space-y-2 sm:space-y-3\">\n                    <h3 className=\"text-lg sm:text-xl font-semibold\">\n                      Drag and drop video files to upload\n                    </h3>\n                    <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                      Your videos will be private until you publish them.\n                    </p>\n                    <div className=\"flex items-center justify-center gap-2 text-xs text-muted-foreground\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <span className=\"text-center\">Max file size: {Math.floor(MAX_FILE_SIZE / (1024 * 1024))}MB • Supported: MP4, WebM, OGG, MOV</span>\n                    </div>\n                  </div>\n                  <Button\n                    onClick={() => fileInputRef.current?.click()}\n                    size=\"lg\"\n                    className=\"mt-2 w-full sm:w-auto\"\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Select files\n                  </Button>\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"video/*\"\n                    onChange={handleFileInputChange}\n                    className=\"hidden\"\n                  />\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"flex flex-col sm:flex-row min-h-[500px]\">\n              {/* Progress Stepper */}\n              <div className=\"w-full sm:w-48 md:w-64 bg-muted/30 p-4 sm:p-6 border-b sm:border-b-0 sm:border-r\">\n                <div className=\"flex sm:flex-col gap-4 overflow-x-auto sm:overflow-x-visible pb-2 sm:pb-0\">\n                  {steps.map((step, index) => (\n                    <div key={step.id} className=\"flex items-start gap-2 sm:gap-3 min-w-fit sm:min-w-0\">\n                      <div className={`w-7 h-7 sm:w-8 sm:h-8 rounded-full flex items-center justify-center flex-shrink-0 transition-colors ${\n                        step.completed \n                          ? \"bg-primary text-primary-foreground\" \n                          : currentStep === step.id\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"bg-muted text-muted-foreground\"\n                      }`}>\n                        {step.completed ? (\n                          <Check className=\"w-3.5 h-3.5 sm:w-4 sm:h-4\" />\n                        ) : (\n                          <span className=\"text-xs sm:text-sm font-medium\">{index + 1}</span>\n                        )}\n                      </div>\n                      <div className=\"flex-1 pt-1\">\n                        <p className={`text-xs sm:text-sm font-medium whitespace-nowrap sm:whitespace-normal ${\n                          currentStep === step.id ? \"text-foreground\" : \"text-muted-foreground\"\n                        }`}>\n                          {step.label}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Video Preview */}\n                {videoPreviewUrl && (\n                  <div className=\"hidden sm:block mt-6 space-y-2\">\n                    <Label className=\"text-xs text-muted-foreground\">Preview</Label>\n                    <div className=\"relative rounded-lg overflow-hidden bg-black group\">\n                      <video\n                        ref={videoRef}\n                        src={videoPreviewUrl}\n                        className=\"w-full aspect-video object-cover\"\n                        controls\n                      />\n                      <div className=\"absolute inset-0 bg-black/60 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none\">\n                        <PlayCircle className=\"h-12 w-12 text-white\" />\n                      </div>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Duration: {videoDuration}</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Content Area */}\n              <div className=\"flex-1 p-4 sm:p-6\">\n                {isProcessing ? (\n                  <div className=\"flex flex-col items-center justify-center h-full space-y-3 sm:space-y-4\">\n                    <div className=\"w-12 h-12 sm:w-16 sm:h-16 border-4 border-primary border-t-transparent rounded-full animate-spin\" />\n                    <p className=\"text-base sm:text-lg font-medium\">Processing video...</p>\n                    <p className=\"text-xs sm:text-sm text-muted-foreground text-center\">{selectedFile?.name}</p>\n                  </div>\n                ) : currentStep === \"details\" ? (\n                  <div className=\"space-y-4 sm:space-y-6 max-w-2xl\">\n                    <div className=\"flex items-center justify-between\">\n                      <h2 className=\"text-xl sm:text-2xl font-bold\">Details</h2>\n                      {isShortVideo && (\n                        <Badge variant=\"secondary\" className=\"flex items-center gap-1 bg-primary/10 text-primary hover:bg-primary/20\">\n                          <Play className=\"h-3 w-3\" />\n                          Short Video\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-3 sm:space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"video-title\" className=\"text-sm sm:text-base\">\n                          Title (required) <span className=\"text-destructive\">*</span>\n                        </Label>\n                        <Input\n                          id=\"video-title\"\n                          placeholder=\"Add a title that describes your video\"\n                          value={videoTitle}\n                          onChange={(e) => setVideoTitle(e.target.value)}\n                          className={`text-sm sm:text-base ${errors.title ? 'border-destructive' : ''}`}\n                          maxLength={100}\n                        />\n                        <div className=\"flex justify-between items-center\">\n                          <p className=\"text-xs text-destructive\">{errors.title}</p>\n                          <p className=\"text-xs text-muted-foreground\">{videoTitle.length}/100</p>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"video-description\" className=\"text-sm sm:text-base\">Description</Label>\n                        <Textarea\n                          id=\"video-description\"\n                          placeholder=\"Tell viewers about your video\"\n                          value={videoDescription}\n                          onChange={(e) => setVideoDescription(e.target.value)}\n                          rows={4}\n                          className=\"text-sm sm:text-base min-h-[100px]\"\n                          maxLength={5000}\n                        />\n                        <p className=\"text-xs text-muted-foreground text-right\">{videoDescription.length}/5000</p>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-sm sm:text-base\">\n                          Thumbnail <span className=\"text-destructive\">*</span>\n                        </Label>\n                        <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n                          {thumbnailPreview ? (\n                            <div className=\"relative w-full sm:w-40 max-h-32 sm:max-h-40 bg-muted rounded border overflow-hidden group\">\n                              <img \n                                src={thumbnailPreview} \n                                alt=\"Thumbnail\" \n                                className=\"w-full h-full object-cover\"\n                              />\n                              <Button\n                                variant=\"secondary\"\n                                size=\"icon\"\n                                className=\"absolute top-1 right-1 min-w-[44px] min-h-[44px] w-11 h-11 sm:w-6 sm:h-6 opacity-100 sm:opacity-0 group-hover:opacity-100 transition-opacity\"\n                                onClick={() => {\n                                  setThumbnail(null);\n                                  setThumbnailPreview(null);\n                                }}\n                              >\n                                <X className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          ) : (\n                            <button\n                              onClick={() => thumbnailInputRef.current?.click()}\n                              className={`w-full sm:w-40 h-24 sm:h-24 border-2 border-dashed rounded hover:border-primary transition-colors flex items-center justify-center ${errors.thumbnail ? 'border-destructive' : ''}`}\n                            >\n                              <Upload className=\"w-6 h-6 text-muted-foreground\" />\n                            </button>\n                          )}\n                          <input\n                            ref={thumbnailInputRef}\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleThumbnailSelect}\n                            className=\"hidden\"\n                          />\n                          <div className=\"flex-1\">\n                            <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                              Upload a custom thumbnail to represent your video\n                            </p>\n                            {errors.thumbnail && (\n                              <p className=\"text-xs text-destructive mt-1\">{errors.thumbnail}</p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"category\" className=\"text-sm sm:text-base\">\n                          Category <span className=\"text-destructive\">*</span>\n                        </Label>\n                        <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                          <SelectTrigger className={`text-sm sm:text-base ${errors.category ? 'border-destructive' : ''}`}>\n                            <SelectValue placeholder=\"Select a category\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {VIDEO_CATEGORIES.map((category) => (\n                              <SelectItem key={category} value={category}>\n                                {category}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {errors.category && (\n                          <p className=\"text-xs text-destructive\">{errors.category}</p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"tags\" className=\"text-sm sm:text-base\">Tags</Label>\n                        <div className=\"flex gap-2\">\n                          <Input\n                            id=\"tags\"\n                            placeholder=\"Add tags (press Enter)\"\n                            value={tagInput}\n                            onChange={(e) => setTagInput(e.target.value)}\n                            onKeyPress={(e) => {\n                              if (e.key === 'Enter') {\n                                e.preventDefault();\n                                addTag();\n                              }\n                            }}\n                            disabled={tags.length >= 10}\n                            className=\"text-sm sm:text-base\"\n                          />\n                          <Button onClick={addTag} variant=\"outline\" disabled={tags.length >= 10} className=\"min-w-[44px] min-h-[44px]\">\n                            <Tag className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                        {tags.length > 0 && (\n                          <div className=\"flex flex-wrap gap-2 mt-2\">\n                            {tags.map((tag, index) => (\n                              <Badge key={index} variant=\"secondary\" className=\"gap-1 text-xs sm:text-sm\">\n                                {tag}\n                                <button\n                                  onClick={() => removeTag(index)}\n                                  className=\"ml-1 hover:text-destructive min-w-[20px] min-h-[20px]\"\n                                >\n                                  <X className=\"h-3 w-3\" />\n                                </button>\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                        <p className=\"text-xs text-muted-foreground\">{tags.length}/10 tags</p>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-sm sm:text-base\">Playlists</Label>\n                        <Select value={selectedPlaylist} onValueChange={setSelectedPlaylist}>\n                          <SelectTrigger className=\"text-sm sm:text-base\">\n                            <SelectValue placeholder=\"Select\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"none\">No playlist</SelectItem>\n                            <SelectItem value=\"tutorials\">Tutorials</SelectItem>\n                            <SelectItem value=\"vlogs\">Vlogs</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-3 pt-4 border-t\">\n                        <Label className=\"text-sm sm:text-base\">Audience</Label>\n                        <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                          Is this video made for kids?\n                        </p>\n                        <RadioGroup value={audienceType} onValueChange={setAudienceType}>\n                          <div className=\"flex items-center space-x-2 min-h-[44px]\">\n                            <RadioGroupItem value=\"yes\" id=\"kids-yes\" />\n                            <Label htmlFor=\"kids-yes\" className=\"text-sm sm:text-base font-normal cursor-pointer\">\n                              Yes, it's made for kids\n                            </Label>\n                          </div>\n                          <div className=\"flex items-center space-x-2 min-h-[44px]\">\n                            <RadioGroupItem value=\"no\" id=\"kids-no\" />\n                            <Label htmlFor=\"kids-no\" className=\"text-sm sm:text-base font-normal cursor-pointer\">\n                              No, it's not made for kids\n                            </Label>\n                          </div>\n                        </RadioGroup>\n                      </div>\n                    </div>\n                  </div>\n                ) : currentStep === \"elements\" ? (\n                  <div className=\"space-y-4 sm:space-y-6 max-w-2xl\">\n                    <h2 className=\"text-xl sm:text-2xl font-bold\">Video elements</h2>\n                    <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                      Use cards and an end screen to show viewers related videos, websites, and calls to action.\n                    </p>\n                    \n                    <div className=\"space-y-3 sm:space-y-4 pt-2 sm:pt-4\">\n                      <div className=\"p-3 sm:p-4 border rounded-lg space-y-2 sm:space-y-3 hover:bg-muted/50 transition-colors\">\n                        <div className=\"flex flex-col sm:flex-row items-start sm:justify-between gap-3\">\n                          <div className=\"space-y-1 flex-1\">\n                            <h3 className=\"text-sm sm:text-base font-semibold\">Add related video</h3>\n                            <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                              Connect another of your videos to your video\n                            </p>\n                          </div>\n                          <Button variant=\"outline\" className=\"w-full sm:w-auto min-h-[44px]\">Add</Button>\n                        </div>\n                      </div>\n\n                      <div className=\"p-3 sm:p-4 border rounded-lg space-y-2 sm:space-y-3 hover:bg-muted/50 transition-colors\">\n                        <div className=\"flex flex-col sm:flex-row items-start sm:justify-between gap-3\">\n                          <div className=\"space-y-1 flex-1\">\n                            <h3 className=\"text-sm sm:text-base font-semibold\">Add subtitles</h3>\n                            <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                              Reach a broader audience by adding subtitles to your video\n                            </p>\n                          </div>\n                          <Button variant=\"outline\" className=\"w-full sm:w-auto min-h-[44px]\">Add</Button>\n                        </div>\n                      </div>\n\n                      <div className=\"p-3 sm:p-4 border rounded-lg space-y-2 sm:space-y-3 hover:bg-muted/50 transition-colors\">\n                        <div className=\"flex flex-col sm:flex-row items-start sm:justify-between gap-3\">\n                          <div className=\"space-y-1 flex-1\">\n                            <h3 className=\"text-sm sm:text-base font-semibold\">End screen</h3>\n                            <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                              Add elements to the last 5-20 seconds of your video\n                            </p>\n                          </div>\n                          <Button variant=\"outline\" className=\"w-full sm:w-auto min-h-[44px]\">Add</Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : currentStep === \"checks\" ? (\n                  <div className=\"space-y-4 sm:space-y-6 max-w-2xl\">\n                    <h2 className=\"text-xl sm:text-2xl font-bold\">Checks</h2>\n                    <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                      We'll check your video for issues that may restrict its visibility and then you will have the opportunity to fix issues before publishing your video.\n                    </p>\n                    \n                    <div className=\"space-y-3 sm:space-y-4 pt-2 sm:pt-4\">\n                      <div className=\"p-4 sm:p-6 border rounded-lg\">\n                        <div className=\"flex items-center gap-3 mb-2 sm:mb-3\">\n                          <div className=\"w-9 h-9 sm:w-10 sm:h-10 rounded-full bg-green-500/10 flex items-center justify-center flex-shrink-0\">\n                            <Check className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-500\" />\n                          </div>\n                          <div>\n                            <h3 className=\"text-sm sm:text-base font-semibold\">Copyright</h3>\n                            <p className=\"text-xs sm:text-sm text-muted-foreground\">No issues found</p>\n                          </div>\n                        </div>\n                        <p className=\"text-xs sm:text-sm text-muted-foreground ml-0 sm:ml-13\">\n                          Remember: These check results aren't final. Issues may come up in the future that impact your video.\n                        </p>\n                      </div>\n\n                      <div className=\"p-4 sm:p-6 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-9 h-9 sm:w-10 sm:h-10 rounded-full bg-green-500/10 flex items-center justify-center flex-shrink-0\">\n                            <Check className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-500\" />\n                          </div>\n                          <div>\n                            <h3 className=\"text-sm sm:text-base font-semibold\">Community guidelines</h3>\n                            <p className=\"text-xs sm:text-sm text-muted-foreground\">No issues found</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"p-4 sm:p-6 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-9 h-9 sm:w-10 sm:h-10 rounded-full bg-blue-500/10 flex items-center justify-center flex-shrink-0\">\n                            <AlertCircle className=\"w-4 h-4 sm:w-5 sm:h-5 text-blue-500\" />\n                          </div>\n                          <div>\n                            <h3 className=\"text-sm sm:text-base font-semibold\">Video quality</h3>\n                            <p className=\"text-xs sm:text-sm text-muted-foreground\">Resolution: Auto-detected</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : currentStep === \"visibility\" ? (\n                  <div className=\"space-y-4 sm:space-y-6 max-w-2xl\">\n                    <h2 className=\"text-xl sm:text-2xl font-bold\">Visibility</h2>\n                    <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                      Choose when to publish and who can see your video\n                    </p>\n                    \n                    <div className=\"space-y-3 sm:space-y-4 pt-2 sm:pt-4\">\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-sm sm:text-base\">Save or publish</Label>\n                        <p className=\"text-xs sm:text-sm text-muted-foreground mb-3 sm:mb-4\">\n                          Make your video public, unlisted, or private\n                        </p>\n                        <RadioGroup value={visibility} onValueChange={(val) => setVisibility(val as any)}>\n                          <div className=\"space-y-2 sm:space-y-3\">\n                            <div className=\"flex items-start space-x-3 p-3 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer min-h-[60px]\">\n                              <RadioGroupItem value=\"private\" id=\"private\" className=\"mt-1\" />\n                              <div className=\"flex-1\">\n                                <Label htmlFor=\"private\" className=\"font-normal cursor-pointer\">\n                                  <div className=\"text-sm sm:text-base font-semibold\">Private</div>\n                                  <div className=\"text-xs sm:text-sm text-muted-foreground\">\n                                    Only you and people you choose can watch your video\n                                  </div>\n                                </Label>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-start space-x-3 p-3 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer min-h-[60px]\">\n                              <RadioGroupItem value=\"unlisted\" id=\"unlisted\" className=\"mt-1\" />\n                              <div className=\"flex-1\">\n                                <Label htmlFor=\"unlisted\" className=\"font-normal cursor-pointer\">\n                                  <div className=\"text-sm sm:text-base font-semibold\">Unlisted</div>\n                                  <div className=\"text-xs sm:text-sm text-muted-foreground\">\n                                    Anyone with the video link can watch your video\n                                  </div>\n                                </Label>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-start space-x-3 p-3 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer min-h-[60px]\">\n                              <RadioGroupItem value=\"public\" id=\"public\" className=\"mt-1\" />\n                              <div className=\"flex-1\">\n                                <Label htmlFor=\"public\" className=\"font-normal cursor-pointer\">\n                                  <div className=\"text-sm sm:text-base font-semibold\">Public</div>\n                                  <div className=\"text-xs sm:text-sm text-muted-foreground\">\n                                    Everyone can watch your video\n                                  </div>\n                                </Label>\n                              </div>\n                            </div>\n                          </div>\n                        </RadioGroup>\n                      </div>\n\n                      <div className=\"space-y-2 pt-3 sm:pt-4 border-t\">\n                        <Label htmlFor=\"schedule\" className=\"text-sm sm:text-base\">Schedule (Optional)</Label>\n                        <p className=\"text-xs sm:text-sm text-muted-foreground mb-2\">\n                          Select a date to make your video public\n                        </p>\n                        <Input\n                          id=\"schedule\"\n                          type=\"datetime-local\"\n                          value={scheduleDate}\n                          onChange={(e) => setScheduleDate(e.target.value)}\n                          className=\"text-sm sm:text-base min-h-[44px]\"\n                        />\n                      </div>\n\n                      {isUploading && (\n                        <div className=\"space-y-2 pt-3 sm:pt-4\">\n                          <Label className=\"text-sm sm:text-base\">Upload Progress</Label>\n                          <Progress value={uploadProgress} className=\"h-2\" />\n                          <p className=\"text-xs sm:text-sm text-muted-foreground text-center\">{uploadProgress}%</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {currentStep !== \"upload\" && !isProcessing && (\n          <div className=\"border-t px-4 sm:px-6 py-3 sm:py-4 flex flex-col-reverse sm:flex-row items-stretch sm:items-center justify-between gap-3 bg-background flex-shrink-0\">\n            <Button\n              variant=\"outline\"\n              onClick={handleBack}\n              disabled={currentStep === \"details\" || isUploading}\n              className=\"gap-2 w-full sm:w-auto min-h-[44px] px-4 py-2 sm:px-6 sm:py-2\"\n            >\n              <ChevronLeft className=\"w-4 h-4\" />\n              Back\n            </Button>\n\n            <div className=\"flex gap-3\">\n              {currentStep === \"visibility\" ? (\n                <Button \n                  onClick={handleSave} \n                  className=\"gap-2 w-full sm:w-auto min-h-[44px] px-4 py-2 sm:px-6 sm:py-2\"\n                  disabled={isUploading}\n                >\n                  {isUploading ? (\n                    <>\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                      Uploading...\n                    </>\n                  ) : (\n                    <>\n                      <Upload className=\"w-4 h-4\" />\n                      Upload Video\n                    </>\n                  )}\n                </Button>\n              ) : (\n                <Button \n                  onClick={handleNext}\n                  disabled={currentStep === \"details\" && !videoTitle.trim()}\n                  className=\"gap-2 w-full sm:w-auto min-h-[44px] px-4 py-2 sm:px-6 sm:py-2\"\n                >\n                  Next\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":43968},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user: user ?? undefined,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":431},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/pages/Search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Search as SearchIcon, X, Clock, ArrowLeft } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAppStore } from \"@/store/useAppStore\";\n\nconst MAX_SEARCH_HISTORY = 10;\n\nexport default function Search() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchHistory, setSearchHistory] = useState<string[]>([]);\n  const { setSearchQuery: setGlobalSearchQuery } = useAppStore();\n\n  useEffect(() => {\n    const history = localStorage.getItem(\"searchHistory\");\n    if (history) {\n      setSearchHistory(JSON.parse(history));\n    }\n  }, []);\n\n  const saveToHistory = (query: string) => {\n    if (!query.trim()) return;\n    \n    const updatedHistory = [\n      query,\n      ...searchHistory.filter(item => item !== query)\n    ].slice(0, MAX_SEARCH_HISTORY);\n    \n    setSearchHistory(updatedHistory);\n    localStorage.setItem(\"searchHistory\", JSON.stringify(updatedHistory));\n  };\n\n  const handleSearch = (query: string) => {\n    if (query.trim()) {\n      saveToHistory(query.trim());\n      setGlobalSearchQuery(query.trim());\n      setSearchQuery(\"\");\n      setLocation(\"/\");\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    handleSearch(searchQuery);\n  };\n\n  const deleteHistoryItem = (item: string) => {\n    const updatedHistory = searchHistory.filter(h => h !== item);\n    setSearchHistory(updatedHistory);\n    localStorage.setItem(\"searchHistory\", JSON.stringify(updatedHistory));\n  };\n\n  const clearAllHistory = () => {\n    setSearchHistory([]);\n    localStorage.removeItem(\"searchHistory\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"fixed top-0 left-0 right-0 bg-background border-b border-border z-50\">\n        <div className=\"flex items-center gap-3 px-4 h-14\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/\")}\n            className=\"w-10 h-10\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          \n          <form onSubmit={handleSubmit} className=\"flex-1 flex items-center bg-secondary border border-border rounded-full overflow-hidden\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"flex-1 bg-transparent px-4 py-2 text-sm text-foreground placeholder-muted-foreground border-0 rounded-none focus-visible:ring-0\"\n              autoFocus\n            />\n            {searchQuery && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSearchQuery(\"\")}\n                className=\"w-10 h-10\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n            <Button\n              type=\"submit\"\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-12 h-10\"\n            >\n              <SearchIcon className=\"h-5 w-5\" />\n            </Button>\n          </form>\n        </div>\n      </div>\n\n      <div className=\"pt-14 px-4\">\n        {searchHistory.length > 0 && (\n          <div className=\"max-w-2xl mx-auto py-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold\">Recent searches</h2>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={clearAllHistory}\n                className=\"text-sm text-muted-foreground hover:text-foreground\"\n              >\n                Clear all\n              </Button>\n            </div>\n            \n            <div className=\"space-y-1\">\n              {searchHistory.map((item, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center gap-3 py-3 px-2 hover:bg-muted rounded-md group\"\n                >\n                  <Clock className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n                  <button\n                    onClick={() => handleSearch(item)}\n                    className=\"flex-1 text-left text-sm\"\n                  >\n                    {item}\n                  </button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => deleteHistoryItem(item)}\n                    className=\"w-8 h-8 opacity-0 group-hover:opacity-100 transition-opacity\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {searchHistory.length === 0 && (\n          <div className=\"max-w-2xl mx-auto py-16 text-center\">\n            <SearchIcon className=\"h-16 w-16 mx-auto text-muted-foreground/50 mb-4\" />\n            <p className=\"text-muted-foreground\">No search history</p>\n            <p className=\"text-sm text-muted-foreground mt-1\">Your recent searches will appear here</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5300},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatViews(views: number): string {\n  if (views >= 1000000) {\n    return `${(views / 1000000).toFixed(1)}M`;\n  } else if (views >= 1000) {\n    return `${(views / 1000).toFixed(1)}K`;\n  }\n  return views.toString();\n}\n","size_bytes":400},"client/src/pages/Notifications.tsx":{"content":"import { Bell, Check, Video, UserPlus, Heart, MessageCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\ninterface Notification {\n  id: string;\n  userId: string;\n  type: string;\n  title: string;\n  content: string;\n  videoId?: string;\n  channelId?: string;\n  thumbnail?: string;\n  isRead: boolean;\n  createdAt: string;\n}\n\nconst getNotificationIcon = (type: string) => {\n  switch (type) {\n    case \"video_upload\":\n      return <Video className=\"h-5 w-5 text-primary\" />;\n    case \"new_subscriber\":\n      return <UserPlus className=\"h-5 w-5 text-green-500\" />;\n    case \"like\":\n      return <Heart className=\"h-5 w-5 text-red-500\" />;\n    case \"comment\":\n      return <MessageCircle className=\"h-5 w-5 text-blue-500\" />;\n    default:\n      return <Bell className=\"h-5 w-5\" />;\n  }\n};\n\nexport default function Notifications() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: ['/api/notifications', user?.id],\n    enabled: !!user?.id,\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch(`/api/notifications/${user?.id}/mark-all-read`, {\n        method: 'PATCH',\n      });\n      if (!res.ok) throw new Error('Failed to mark all as read');\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications', user?.id] });\n      toast({ title: \"All notifications marked as read\" });\n    },\n  });\n\n  const handleNotificationClick = async (notification: Notification) => {\n    if (notification.videoId) {\n      setLocation(`/watch/${notification.videoId}`);\n    }\n    \n    if (!notification.isRead) {\n      await fetch(`/api/notifications/${notification.id}/read`, {\n        method: 'PATCH',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications', user?.id] });\n    }\n  };\n\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">Notifications</h1>\n          <p className=\"text-muted-foreground\">\n            {unreadCount > 0 ? `You have ${unreadCount} unread notification${unreadCount > 1 ? 's' : ''}` : \"You're all caught up!\"}\n          </p>\n        </div>\n        {unreadCount > 0 && (\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => markAllAsReadMutation.mutate()}\n            disabled={markAllAsReadMutation.isPending}\n          >\n            <Check className=\"h-4 w-4 mr-2\" />\n            Mark all as read\n          </Button>\n        )}\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">Loading notifications...</p>\n        </div>\n      ) : notifications.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <Bell className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-xl font-semibold mb-2\">No notifications yet</h3>\n          <p className=\"text-muted-foreground\">\n            When you get notifications, they'll show up here\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {notifications.map((notification) => (\n            <div\n              key={notification.id}\n              onClick={() => handleNotificationClick(notification)}\n              className={`p-4 rounded-lg border transition-colors cursor-pointer hover:bg-muted/50 ${\n                notification.isRead ? \"bg-background\" : \"bg-muted/20\"\n              }`}\n            >\n              <div className=\"flex gap-4\">\n                <div className=\"flex-shrink-0 mt-1\">\n                  {getNotificationIcon(notification.type)}\n                </div>\n                \n                {notification.thumbnail && (\n                  <img\n                    src={notification.thumbnail}\n                    alt=\"Thumbnail\"\n                    className=\"w-24 h-14 object-cover rounded flex-shrink-0\"\n                  />\n                )}\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-foreground\">{notification.title}</h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {notification.content}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}\n                      </p>\n                    </div>\n                    {!notification.isRead && (\n                      <div className=\"w-2 h-2 bg-primary rounded-full flex-shrink-0 mt-2\" />\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5491},"server/types.ts":{"content":"import 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\ndeclare global {\n  namespace Express {\n    interface User {\n      claims?: {\n        sub: string;\n        email?: string | null;\n        first_name?: string | null;\n        last_name?: string | null;\n        profile_image_url?: string;\n      };\n      access_token?: string;\n      refresh_token?: string;\n      expires_at?: number;\n    }\n  }\n}\n\nexport {};\n","size_bytes":471},"client/src/pages/Explore.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport VideoCard from \"@/components/VideoCard\";\nimport { VideoWithChannel } from \"@shared/schema\";\nimport { \n  ShoppingBag, Music, Film, Radio, Gamepad2, \n  Newspaper, Volleyball, GraduationCap, Shirt, Mic \n} from \"lucide-react\";\n\nconst categoryConfig: Record<string, { icon: any; title: string; description: string }> = {\n  shopping: { icon: ShoppingBag, title: \"Shopping\", description: \"Product reviews and shopping content\" },\n  music: { icon: Music, title: \"Music\", description: \"Music videos and performances\" },\n  movies: { icon: Film, title: \"Movies\", description: \"Movie trailers and reviews\" },\n  live: { icon: Radio, title: \"Live\", description: \"Live streams and broadcasts\" },\n  gaming: { icon: Gamepad2, title: \"Gaming\", description: \"Gaming videos and streams\" },\n  news: { icon: Newspaper, title: \"News\", description: \"Latest news and current events\" },\n  sports: { icon: Volleyball, title: \"Sports\", description: \"Sports highlights and analysis\" },\n  courses: { icon: GraduationCap, title: \"Courses\", description: \"Educational content\" },\n  fashion: { icon: Shirt, title: \"Fashion & Beauty\", description: \"Fashion and beauty content\" },\n  podcasts: { icon: Mic, title: \"Podcasts\", description: \"Podcast episodes\" }\n};\n\nexport default function Explore() {\n  const [, params] = useRoute(\"/explore/:category\");\n  const [, navigate] = useLocation();\n  const category = params?.category || \"gaming\";\n  const config = categoryConfig[category] || categoryConfig.gaming;\n  const Icon = config.icon;\n\n  const { data: videos = [], isLoading } = useQuery<VideoWithChannel[]>({\n    queryKey: [\"/api/videos/explore\", category],\n    queryFn: async () => {\n      const response = await fetch(`/api/videos?category=${config.title}`);\n      if (!response.ok) throw new Error('Failed to fetch videos');\n      return response.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-muted animate-pulse rounded w-48\"></div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <div className=\"aspect-video bg-muted animate-pulse rounded-xl\"></div>\n              <div className=\"flex gap-3\">\n                <div className=\"w-9 h-9 bg-muted animate-pulse rounded-full\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted animate-pulse rounded\"></div>\n                  <div className=\"h-3 bg-muted animate-pulse rounded w-2/3\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Icon className=\"h-6 w-6\" />\n          {config.title}\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">{config.description}</p>\n      </div>\n\n      {videos.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <Icon className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n          <p className=\"text-muted-foreground\">No {config.title.toLowerCase()} videos available yet</p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {videos.map((video) => (\n            <VideoCard\n              key={video.id}\n              video={video}\n              onClick={() => navigate(`/watch/${video.id}`)}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3728},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"client/src/pages/Library.tsx":{"content":"import { BookOpen, Clock, History, ThumbsUp } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nconst libraryCategories = [\n  {\n    icon: History,\n    title: \"History\",\n    description: \"Videos you've watched\",\n    path: \"/history\",\n    color: \"text-blue-500\"\n  },\n  {\n    icon: Clock,\n    title: \"Watch Later\",\n    description: \"Videos saved for later\",\n    path: \"/watch-later\",\n    color: \"text-purple-500\"\n  },\n  {\n    icon: ThumbsUp,\n    title: \"Liked Videos\",\n    description: \"Videos you liked\",\n    path: \"/liked\",\n    color: \"text-green-500\"\n  }\n];\n\nexport default function Library() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <BookOpen className=\"h-6 w-6\" />\n          Library\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">Your personal collection</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {libraryCategories.map((category) => {\n          const Icon = category.icon;\n          return (\n            <Link key={category.path} href={category.path}>\n              <Card className=\"hover:bg-muted/50 transition-colors cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className={`${category.color}`}>\n                      <Icon className=\"h-8 w-8\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-lg mb-1\">{category.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{category.description}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          );\n        })}\n      </div>\n\n      <div className=\"mt-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Playlists</h2>\n        <div className=\"text-center py-12 border border-dashed border-border rounded-lg\">\n          <BookOpen className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n          <p className=\"text-muted-foreground mb-2\">No playlists yet</p>\n          <p className=\"text-sm text-muted-foreground\">Create playlists to organize your favorite videos</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2396},"client/src/pages/Shorts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Play, Home } from \"lucide-react\";\nimport { VideoWithChannel } from \"@shared/schema\";\nimport ShortsPlayer from \"@/components/ShortsPlayer\";\nimport { Button } from \"@/components/ui/button\";\nimport { formatViews } from \"@/lib/utils\";\n\nconst tabs = [\n  { label: \"All\", value: \"all\", icon: Play },\n  { label: \"Subscriptions\", value: \"subscriptions\", icon: Home },\n  { label: \"Trending\", value: \"trending\", icon: Play },\n];\n\nexport default function Shorts() {\n  const [showPlayer, setShowPlayer] = useState(false);\n  const [initialIndex, setInitialIndex] = useState(0);\n  const [activeTab, setActiveTab] = useState(\"all\");\n\n  const { data: videos = [], isLoading } = useQuery<VideoWithChannel[]>({\n    queryKey: [\"/api/videos/shorts\", activeTab],\n    queryFn: async () => {\n      const response = await fetch('/api/videos/shorts');\n      if (!response.ok) throw new Error('Failed to fetch shorts');\n      return response.json();\n    }\n  });\n\n  const openPlayer = (index: number) => {\n    setInitialIndex(index);\n    setShowPlayer(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        {/* Desktop Header */}\n        <div className=\"hidden md:block sticky top-0 z-10 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n                <Play className=\"h-7 w-7 fill-current\" />\n                Shorts\n              </h1>\n              <div className=\"flex items-center gap-2\">\n                {tabs.map((tab) => (\n                  <div key={tab.value} className=\"h-9 w-28 bg-muted animate-pulse rounded-full\"></div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Header */}\n        <div className=\"md:hidden sticky top-0 z-10 bg-background border-b border-border\">\n          <div className=\"px-4 py-3\">\n            <h1 className=\"text-xl font-bold flex items-center gap-2\">\n              <Play className=\"h-6 w-6 fill-current\" />\n              Shorts\n            </h1>\n          </div>\n          <div className=\"flex gap-2 px-4 pb-3 overflow-x-auto scrollbar-hide\">\n            {tabs.map((tab) => (\n              <div key={tab.value} className=\"h-8 w-24 bg-muted animate-pulse rounded-full flex-shrink-0\"></div>\n            ))}\n          </div>\n        </div>\n\n        {/* Content skeleton */}\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 2xl:grid-cols-7 gap-3 md:gap-4\">\n            {Array.from({ length: 14 }).map((_, i) => (\n              <div key={i} className=\"aspect-[9/16] bg-muted animate-pulse rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (showPlayer && videos.length > 0) {\n    return <ShortsPlayer videos={videos} initialIndex={initialIndex} onClose={() => setShowPlayer(false)} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Desktop Header */}\n      <div className=\"hidden md:block sticky top-0 z-10 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-2xl font-bold flex items-center gap-3\">\n              <div className=\"bg-gradient-to-br from-red-500 to-pink-600 p-2 rounded-xl\">\n                <Play className=\"h-7 w-7 text-white fill-white\" />\n              </div>\n              Shorts\n            </h1>\n            <div className=\"flex items-center gap-2\">\n              {tabs.map((tab) => (\n                <Button\n                  key={tab.value}\n                  variant={activeTab === tab.value ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setActiveTab(tab.value)}\n                  className={`rounded-full px-5 transition-all ${\n                    activeTab === tab.value\n                      ? \"bg-foreground text-background hover:bg-foreground/90\"\n                      : \"hover:bg-secondary\"\n                  }`}\n                >\n                  {tab.label}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Header */}\n      <div className=\"md:hidden sticky top-0 z-10 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border\">\n        <div className=\"px-4 py-3\">\n          <h1 className=\"text-xl font-bold flex items-center gap-2\">\n            <div className=\"bg-gradient-to-br from-red-500 to-pink-600 p-1.5 rounded-lg\">\n              <Play className=\"h-5 w-5 text-white fill-white\" />\n            </div>\n            Shorts\n          </h1>\n        </div>\n        <div className=\"flex gap-2 px-4 pb-3 overflow-x-auto scrollbar-hide\">\n          {tabs.map((tab) => (\n            <Button\n              key={tab.value}\n              variant={activeTab === tab.value ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(tab.value)}\n              className={`rounded-full px-4 whitespace-nowrap flex-shrink-0 ${\n                activeTab === tab.value\n                  ? \"bg-foreground text-background\"\n                  : \"\"\n              }`}\n            >\n              {tab.label}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {videos.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-20 text-center\">\n            <div className=\"bg-gradient-to-br from-red-500/20 to-pink-600/20 p-6 rounded-full mb-6\">\n              <Play className=\"h-16 w-16 text-red-500\" />\n            </div>\n            <h2 className=\"text-2xl font-bold mb-3\">No shorts available</h2>\n            <p className=\"text-muted-foreground max-w-md text-lg\">\n              {activeTab === \"subscriptions\" \n                ? \"Subscribe to channels to see their shorts here\"\n                : activeTab === \"trending\"\n                ? \"Check back later for trending shorts\"\n                : \"Be the first to upload a short!\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 2xl:grid-cols-7 gap-3 md:gap-4\">\n            {videos.map((video, index) => (\n              <div\n                key={video.id}\n                className=\"group cursor-pointer transform transition-all duration-200 hover:scale-105\"\n                onClick={() => openPlayer(index)}\n              >\n                <div className=\"aspect-[9/16] bg-muted rounded-2xl md:rounded-3xl overflow-hidden relative ring-1 ring-border/50 group-hover:ring-2 group-hover:ring-primary transition-all shadow-lg group-hover:shadow-2xl\">\n                  <img\n                    src={video.thumbnail}\n                    alt={video.title}\n                    className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n                  />\n                  \n                  {/* Gradient overlay */}\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/90 via-black/30 to-transparent\"></div>\n                  \n                  {/* Play icon overlay */}\n                  <div className=\"absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-200\">\n                    <div className=\"bg-white/95 backdrop-blur-sm rounded-full p-4 md:p-5 transform scale-90 group-hover:scale-100 transition-transform shadow-2xl\">\n                      <Play className=\"h-8 w-8 md:h-10 md:w-10 text-red-600 fill-red-600\" />\n                    </div>\n                  </div>\n\n                  {/* Video info */}\n                  <div className=\"absolute bottom-0 left-0 right-0 p-3 md:p-4 space-y-2\">\n                    <h3 className=\"text-white font-semibold text-sm md:text-base line-clamp-2 leading-tight drop-shadow-lg\">\n                      {video.title}\n                    </h3>\n                    <div className=\"flex items-center gap-2\">\n                      <img\n                        src={video.channel.avatar || \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?w=40&h=40&fit=crop\"}\n                        alt={video.channel.name}\n                        className=\"w-6 h-6 md:w-7 md:h-7 rounded-full object-cover ring-2 ring-white/30\"\n                      />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-white/95 text-xs md:text-sm truncate font-medium drop-shadow\">\n                          {video.channel.name}\n                        </p>\n                        <p className=\"text-white/80 text-xs drop-shadow\">\n                          {formatViews(video.views || 0)} views\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Duration badge */}\n                  <div className=\"absolute top-2 right-2 md:top-3 md:right-3\">\n                    <div className=\"bg-black/80 backdrop-blur-sm px-2 py-1 rounded-md\">\n                      <span className=\"text-white text-xs font-semibold\">{video.duration}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9843},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/Language.tsx":{"content":"import { Globe, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\n\ninterface LanguageOption {\n  code: string;\n  name: string;\n  nativeName: string;\n}\n\nconst languages: LanguageOption[] = [\n  { code: \"en\", name: \"English\", nativeName: \"English\" },\n  { code: \"hi\", name: \"Hindi\", nativeName: \"हिन्दी\" },\n  { code: \"es\", name: \"Spanish\", nativeName: \"Español\" },\n  { code: \"fr\", name: \"French\", nativeName: \"Français\" },\n  { code: \"de\", name: \"German\", nativeName: \"Deutsch\" },\n  { code: \"it\", name: \"Italian\", nativeName: \"Italiano\" },\n  { code: \"pt\", name: \"Portuguese\", nativeName: \"Português\" },\n  { code: \"ru\", name: \"Russian\", nativeName: \"Русский\" },\n  { code: \"ja\", name: \"Japanese\", nativeName: \"日本語\" },\n  { code: \"ko\", name: \"Korean\", nativeName: \"한국어\" },\n  { code: \"zh\", name: \"Chinese\", nativeName: \"中文\" },\n  { code: \"ar\", name: \"Arabic\", nativeName: \"العربية\" },\n  { code: \"bn\", name: \"Bengali\", nativeName: \"বাংলা\" },\n  { code: \"pa\", name: \"Punjabi\", nativeName: \"ਪੰਜਾਬੀ\" },\n  { code: \"mr\", name: \"Marathi\", nativeName: \"मराठी\" },\n  { code: \"te\", name: \"Telugu\", nativeName: \"తెలుగు\" },\n  { code: \"ta\", name: \"Tamil\", nativeName: \"தமிழ்\" },\n  { code: \"ur\", name: \"Urdu\", nativeName: \"اردو\" },\n  { code: \"gu\", name: \"Gujarati\", nativeName: \"ગુજરાતી\" },\n  { code: \"kn\", name: \"Kannada\", nativeName: \"ಕನ್ನಡ\" }\n];\n\nexport default function Language() {\n  const [selectedLanguage, setSelectedLanguage] = useState(\"en\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const filteredLanguages = languages.filter(\n    (lang) =>\n      lang.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      lang.nativeName.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Language</h1>\n        <p className=\"text-muted-foreground\">\n          Select your preferred language\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        <div>\n          <Input\n            type=\"text\"\n            placeholder=\"Search languages...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"mb-4\"\n          />\n        </div>\n\n        <div className=\"space-y-2 max-h-[500px] overflow-y-auto pr-2\">\n          {filteredLanguages.map((language) => (\n            <div\n              key={language.code}\n              className={`p-4 rounded-lg border cursor-pointer transition-colors hover:bg-muted/50 ${\n                selectedLanguage === language.code ? \"bg-muted border-primary\" : \"\"\n              }`}\n              onClick={() => setSelectedLanguage(language.code)}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Globe className=\"h-5 w-5 text-muted-foreground\" />\n                  <div>\n                    <div className=\"font-medium\">{language.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">{language.nativeName}</div>\n                  </div>\n                </div>\n                {selectedLanguage === language.code && (\n                  <Check className=\"h-5 w-5 text-primary\" />\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredLanguages.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Globe className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No languages found</p>\n          </div>\n        )}\n\n        <div className=\"pt-4 border-t\">\n          <Button>Save Changes</Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3959},"client/src/pages/studio/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye, Clock, Users, TrendingUp, Video } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport default function StudioDashboard() {\n  const { user } = useAuth();\n\n  const { data: channel } = useQuery<any>({\n    queryKey: ['/api/users', user?.id, 'channel'],\n    queryFn: async () => {\n      const res = await fetch(`/api/users/${user?.id}/channel`);\n      if (!res.ok) return null;\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: videos = [] } = useQuery<any[]>({\n    queryKey: ['/api/videos'],\n    queryFn: async () => {\n      const res = await fetch('/api/videos');\n      if (!res.ok) return [];\n      return res.json();\n    },\n  });\n\n  const channelVideos = videos.filter((v: any) => v.channelId === channel?.id);\n  const totalViews = channelVideos.reduce((sum: number, v: any) => sum + (v.views || 0), 0);\n  const totalVideos = channelVideos.length;\n\n  return (\n    <div className=\"space-y-4 sm:space-y-6\">\n      <div>\n        <h1 className=\"text-2xl sm:text-3xl font-bold\">Channel dashboard</h1>\n        <p className=\"text-muted-foreground mt-1 text-sm sm:text-base\">Welcome to your creator dashboard</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Subscribers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{channel?.subscriberCount || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              <span className=\"text-green-500\">+0</span> in last 28 days\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Views</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalViews.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">All time</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Watch Time</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">0h</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Last 28 days</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Videos</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalVideos}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Published</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Latest Video Performance */}\n      {channelVideos.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Latest video performance</CardTitle>\n            <CardDescription>Your most recent upload</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n              <div className=\"relative w-32 h-20 sm:w-40 sm:h-24 bg-muted rounded-lg overflow-hidden flex-shrink-0\">\n                <img\n                  src={channelVideos[0].thumbnail}\n                  alt={channelVideos[0].title}\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute bottom-1 right-1 bg-black/80 text-white text-xs px-1 rounded\">\n                  {channelVideos[0].duration}\n                </div>\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-medium line-clamp-2\">{channelVideos[0].title}</h3>\n                <div className=\"mt-2 flex items-center gap-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    <Eye className=\"h-4 w-4\" />\n                    <span>{channelVideos[0].views || 0} views</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>Published recently</span>\n                  </div>\n                </div>\n                <div className=\"mt-3\">\n                  <Button variant=\"outline\" size=\"sm\">Go to video analytics</Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Channel Analytics Summary */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Channel analytics</CardTitle>\n            <CardDescription>Current subscribers</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <div className=\"text-3xl font-bold\">{channel?.subscriberCount || 0}</div>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  <span className=\"text-green-500\">+0</span> in last 28 days\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Views</span>\n                  <span className=\"font-medium\">{totalViews.toLocaleString()}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Watch time (hours)</span>\n                  <span className=\"font-medium\">0.0</span>\n                </div>\n              </div>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full\">Go to channel analytics</Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Top videos</CardTitle>\n            <CardDescription>Last 48 hours · Views</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {channelVideos.length > 0 ? (\n              <div className=\"space-y-3\">\n                {channelVideos.slice(0, 3).map((video: any, index: number) => (\n                  <div key={video.id} className=\"flex items-center gap-3\">\n                    <span className=\"text-sm text-muted-foreground w-4\">{index + 1}</span>\n                    <div className=\"relative w-20 h-12 bg-muted rounded overflow-hidden flex-shrink-0\">\n                      <img\n                        src={video.thumbnail}\n                        alt={video.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium truncate\">{video.title}</p>\n                    </div>\n                    <span className=\"text-sm text-muted-foreground\">{video.views || 0}</span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Video className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                <p>No videos yet</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Creator Insider */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Creator Insider</CardTitle>\n          <CardDescription>Tips and updates for creators</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-start gap-3 p-3 rounded-lg border\">\n              <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <TrendingUp className=\"h-5 w-5 text-primary\" />\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Grow your channel</h4>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Learn best practices for creating engaging content and building your audience\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3 p-3 rounded-lg border\">\n              <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <Users className=\"h-5 w-5 text-primary\" />\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Connect with your community</h4>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Engage with comments and build a loyal subscriber base\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9372},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/lib/mockData.ts":{"content":"import { VideoWithChannel, SpaceWithChannels } from \"@shared/schema\";\n\n// This file contains mock data structure for reference\n// In a real implementation, this data would come from the backend\n\nexport const mockVideos: VideoWithChannel[] = [];\n\nexport const mockSpaces: SpaceWithChannels[] = [];\n","size_bytes":297},"client/src/store/useAppStore.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport type Theme = 'light' | 'dark' | 'device';\n\ninterface AppState {\n  personalMode: boolean;\n  searchQuery: string;\n  currentUserId: string;\n  sidebarCollapsed: boolean;\n  mobileSidebarOpen: boolean;\n  theme: Theme;\n  setPersonalMode: (mode: boolean) => void;\n  setSearchQuery: (query: string) => void;\n  setCurrentUserId: (userId: string) => void;\n  setSidebarCollapsed: (collapsed: boolean) => void;\n  setMobileSidebarOpen: (open: boolean) => void;\n  setTheme: (theme: Theme) => void;\n}\n\nexport const useAppStore = create<AppState>()(\n  persist(\n    (set) => ({\n      personalMode: false,\n      searchQuery: \"\",\n      currentUserId: \"\", // Will be set from authenticated user\n      sidebarCollapsed: false,\n      mobileSidebarOpen: false,\n      theme: 'dark',\n      setPersonalMode: (mode: boolean) => set({ personalMode: mode }),\n      setSearchQuery: (query: string) => set({ searchQuery: query }),\n      setCurrentUserId: (userId: string) => set({ currentUserId: userId }),\n      setSidebarCollapsed: (collapsed: boolean) => set({ sidebarCollapsed: collapsed }),\n      setMobileSidebarOpen: (open: boolean) => set({ mobileSidebarOpen: open }),\n      setTheme: (theme: Theme) => set({ theme }),\n    }),\n    {\n      name: 'cineweave-storage',\n      partialize: (state) => ({ theme: state.theme }),\n    }\n  )\n);\n","size_bytes":1398},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 6%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 13%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 10%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(200, 100%, 62%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(0, 0%, 18%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(0, 0%, 18%);\n  --muted-foreground: hsl(0, 0%, 67%);\n  --accent: hsl(200, 100%, 62%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 24%);\n  --input: hsl(0, 0%, 24%);\n  --ring: hsl(200, 100%, 62%);\n  --sidebar: hsl(0, 0%, 6%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(200, 100%, 62%);\n  --sidebar-primary-foreground: hsl(0, 0%, 0%);\n  --sidebar-accent: hsl(0, 0%, 18%);\n  --sidebar-accent-foreground: hsl(200, 100%, 62%);\n  --sidebar-border: hsl(0, 0%, 24%);\n  --sidebar-ring: hsl(200, 100%, 62%);\n  --font-sans: 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(0, 0%, 6%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 13%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 10%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(200, 100%, 62%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(0, 0%, 18%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(0, 0%, 18%);\n  --muted-foreground: hsl(0, 0%, 67%);\n  --accent: hsl(200, 100%, 62%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 24%);\n  --input: hsl(0, 0%, 24%);\n  --ring: hsl(200, 100%, 62%);\n  --sidebar: hsl(0, 0%, 6%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(200, 100%, 62%);\n  --sidebar-primary-foreground: hsl(0, 0%, 0%);\n  --sidebar-accent: hsl(0, 0%, 18%);\n  --sidebar-accent-foreground: hsl(200, 100%, 62%);\n  --sidebar-border: hsl(0, 0%, 24%);\n  --sidebar-ring: hsl(200, 100%, 62%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html, body {\n    @apply bg-background text-foreground;\n    font-family: 'Roboto', sans-serif;\n    overflow-x: hidden;\n  }\n  \n  * {\n    box-sizing: border-box;\n  }\n}\n\n@layer components {\n  .sidebar-scrollbar::-webkit-scrollbar {\n    width: 8px;\n  }\n  \n  .sidebar-scrollbar::-webkit-scrollbar-track {\n    background: transparent;\n  }\n  \n  .sidebar-scrollbar::-webkit-scrollbar-thumb {\n    background: hsl(0, 0%, 30%);\n    border-radius: 4px;\n  }\n  \n  .sidebar-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: hsl(0, 0%, 40%);\n  }\n  \n  .video-card-thumbnail {\n    position: relative;\n    padding-bottom: 56.25%;\n    background: hsl(0, 0%, 18%);\n    overflow: hidden;\n  }\n  \n  .video-card-thumbnail img {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n  \n  .duration-badge {\n    position: absolute;\n    bottom: 8px;\n    right: 8px;\n    background: rgba(0, 0, 0, 0.8);\n    padding: 2px 4px;\n    border-radius: 2px;\n    font-size: 12px;\n    font-weight: 500;\n  }\n  \n  .live-badge {\n    position: absolute;\n    bottom: 8px;\n    left: 8px;\n    background: hsl(0, 84%, 60%);\n    padding: 2px 6px;\n    border-radius: 2px;\n    font-size: 11px;\n    font-weight: 700;\n    text-transform: uppercase;\n  }\n  \n  .nav-item {\n    transition: background-color 0.2s, color 0.2s;\n  }\n  \n  .nav-item:hover {\n    background-color: hsl(0, 0%, 18%);\n  }\n  \n  .nav-item.active {\n    background-color: hsl(0, 0%, 18%);\n    color: hsl(200, 100%, 62%);\n  }\n  \n  .video-card {\n    transition: transform 0.2s;\n  }\n  \n  .video-card:hover {\n    cursor: pointer;\n  }\n  \n  .video-card:hover .video-card-thumbnail img {\n    transform: scale(1.05);\n    transition: transform 0.2s;\n  }\n  \n  .channel-avatar {\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    background: hsl(0, 0%, 30%);\n    overflow: hidden;\n  }\n  \n  .verified-badge {\n    color: hsl(0, 0%, 67%);\n    font-size: 12px;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n  \n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n  \n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n}\n","size_bytes":4537},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from '@shared/schema';\n\nconst client = postgres(process.env.DATABASE_URL!);\nexport const db = drizzle(client, { schema });\n","size_bytes":226},"client/src/components/ChannelCreationDialog.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Loader2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ChannelCreationDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function ChannelCreationDialog({ open, onOpenChange }: ChannelCreationDialogProps) {\n  const [name, setName] = useState('');\n  const [username, setUsername] = useState('');\n  const [description, setDescription] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createChannelMutation = useMutation({\n    mutationFn: async (data: { name: string; username: string; description?: string }) => {\n      const res = await apiRequest('POST', '/api/channels', data);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success!\",\n        description: \"Your channel has been created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!name || !username) {\n      toast({\n        title: \"Error\",\n        description: \"Channel name and username are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createChannelMutation.mutate({\n      name,\n      username: username.startsWith('@') ? username : `@${username}`,\n      description,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Create Your Channel</DialogTitle>\n          <DialogDescription>\n            Set up your channel to start uploading videos and building your audience.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"channel-name\">Channel Name *</Label>\n            <Input\n              id=\"channel-name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"My Awesome Channel\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"channel-username\">Username *</Label>\n            <Input\n              id=\"channel-username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"@myawesomechannel\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Your channel URL will be: cineweave.com/{username.startsWith('@') ? username : `@${username}`}\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"channel-description\">Description (Optional)</Label>\n            <Textarea\n              id=\"channel-description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Tell viewers about your channel...\"\n              rows={3}\n            />\n          </div>\n        </div>\n\n        <div className=\"flex gap-3 justify-end\">\n          <Button\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            disabled={createChannelMutation.isPending}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSubmit}\n            disabled={createChannelMutation.isPending}\n          >\n            {createChannelMutation.isPending && (\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            )}\n            Create Channel\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4245},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertChannelSchema, insertVideoSchema, insertSpaceSchema, insertSubscriptionSchema, insertCommentSchema, insertLikeSchema, insertWatchHistorySchema, insertPlaylistSchema, insertPlaylistVideoSchema } from \"@shared/schema\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { uploadVideoToStorage, uploadThumbnailToStorage, isStorageConfigured, getVideoFromStorage, getThumbnailFromStorage, generatePresignedUploadUrl } from \"./videoStorage\";\nimport \"./types\";\n\n// Configure multer for memory storage\n// Note: With Render free tier (512MB RAM), files larger than 200-300MB may cause memory issues\n// For production with more RAM, increase this limit accordingly\nconst parseUploadSize = (): number => {\n  if (process.env.MAX_UPLOAD_SIZE) {\n    const parsed = parseInt(process.env.MAX_UPLOAD_SIZE, 10);\n    if (!isNaN(parsed) && parsed > 0) {\n      return parsed * 1024 * 1024; // Convert MB to bytes\n    }\n  }\n  return 500 * 1024 * 1024; // Default 500MB\n};\n\nconst MAX_UPLOAD_SIZE = parseUploadSize();\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: MAX_UPLOAD_SIZE,\n  },\n  fileFilter: (req: any, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n    const allowedVideoTypes = ['video/mp4', 'video/webm', 'video/ogg', 'video/quicktime'];\n    const allowedImageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    \n    if (file.fieldname === 'video' && allowedVideoTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else if ((file.fieldname === 'thumbnail' || file.fieldname === 'avatar') && allowedImageTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error(`Invalid file type for ${file.fieldname}`));\n    }\n  },\n});\n\n// Helper function to get user ID from request (works with all auth methods)\nfunction getUserIdFromRequest(req: any): string | null {\n  // Check if authenticated via Replit Auth\n  if (req.isAuthenticated() && req.user?.claims?.sub) {\n    return req.user.claims.sub;\n  }\n  \n  // Check if authenticated via Google OAuth\n  if (req.isAuthenticated() && req.user?.id) {\n    return req.user.id;\n  }\n  \n  // Check if authenticated via email (session-based)\n  if (req.session && req.session.userId) {\n    return req.session.userId;\n  }\n  \n  return null;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', async (req: any, res) => {\n    try {\n      // Check if authenticated via Replit Auth\n      if (req.isAuthenticated() && req.user?.claims?.sub) {\n        const userId = req.user.claims.sub;\n        const user = await storage.getUser(userId);\n        return res.json(user);\n      }\n      \n      // Check if authenticated via Google OAuth\n      if (req.isAuthenticated() && req.user?.id) {\n        // User is already the full user object from deserializeUser\n        return res.json(req.user);\n      }\n      \n      // Check if authenticated via email (session-based)\n      if (req.session && req.session.userId) {\n        const user = await storage.getUser(req.session.userId);\n        return res.json(user);\n      }\n      \n      res.status(401).json({ message: \"Unauthorized\" });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Email Authentication Routes\n  // Send OTP (for now, accepts any email and returns success)\n  app.post('/api/auth/email/send-otp', async (req, res) => {\n    try {\n      const { email } = req.body;\n      if (!email || !email.includes('@')) {\n        return res.status(400).json({ message: \"Valid email required\" });\n      }\n      \n      // In production, send actual OTP via email service\n      // For now, just return success\n      console.log(`OTP would be sent to: ${email}`);\n      res.json({ message: \"OTP sent successfully\", email });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send OTP\" });\n    }\n  });\n\n  // Verify OTP and create/login user\n  app.post('/api/auth/email/verify-otp', async (req, res) => {\n    try {\n      const { email, otp, firstName, lastName } = req.body;\n      \n      if (!email || !otp) {\n        return res.status(400).json({ message: \"Email and OTP required\" });\n      }\n      \n      // For now, accept any OTP (will integrate external service later)\n      // Check if user exists\n      const existingUser = await storage.getUserByEmail(email);\n      \n      let user;\n      if (existingUser) {\n        user = existingUser;\n      } else {\n        // Create new user\n        user = await storage.createUser({\n          email,\n          firstName: firstName || null,\n          lastName: lastName || null,\n          authProvider: \"email\",\n          isVerified: true,\n        });\n      }\n      \n      // Set session\n      if (req.session) {\n        req.session.userId = user.id;\n      }\n      \n      res.json({ message: \"Login successful\", user });\n    } catch (error) {\n      console.error(\"Error verifying OTP:\", error);\n      res.status(500).json({ message: \"Failed to verify OTP\" });\n    }\n  });\n\n  // Email Logout\n  app.post('/api/auth/email/logout', (req, res) => {\n    if (req.session) {\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Failed to logout\" });\n        }\n        res.json({ message: \"Logged out successfully\" });\n      });\n    } else {\n      res.json({ message: \"Already logged out\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.updateUser(req.params.id, req.body);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Channel routes\n  app.get(\"/api/channels\", async (req, res) => {\n    try {\n      const channels = await storage.getAllChannels();\n      res.json(channels);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/channels/:id\", async (req, res) => {\n    try {\n      const channel = await storage.getChannel(req.params.id);\n      if (!channel) {\n        return res.status(404).json({ message: \"Channel not found\" });\n      }\n      res.json(channel);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get user's channel\n  app.get(\"/api/users/:userId/channel\", async (req, res) => {\n    try {\n      const channel = await storage.getChannelByUserId(req.params.userId);\n      if (!channel) {\n        return res.status(404).json({ message: \"Channel not found\" });\n      }\n      res.json(channel);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create channel for authenticated user\n  app.post(\"/api/channels\", async (req: any, res) => {\n    try {\n      // Get user ID from session, Replit Auth, or Google OAuth\n      let userId = null;\n      if (req.isAuthenticated()) {\n        // For Replit Auth users\n        if (req.user?.claims?.sub) {\n          userId = req.user.claims.sub;\n        }\n        // For Google OAuth users (deserialized from database)\n        else if (req.user?.id) {\n          userId = req.user.id;\n        }\n      } else if (req.session && req.session.userId) {\n        userId = req.session.userId;\n      }\n\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Check if user already has a channel\n      const existingChannel = await storage.getChannelByUserId(userId);\n      if (existingChannel) {\n        return res.status(400).json({ message: \"User already has a channel\" });\n      }\n\n      const channelData = insertChannelSchema.parse({ ...req.body, userId });\n      const channel = await storage.createChannel(channelData);\n      res.status(201).json(channel);\n    } catch (error) {\n      console.error(\"Error creating channel:\", error);\n      res.status(400).json({ message: \"Invalid channel data\" });\n    }\n  });\n\n  // Update user's channel\n  app.patch(\"/api/channels/:id\", async (req: any, res) => {\n    try {\n      // Get user ID from session, Replit Auth, or Google OAuth\n      let userId = null;\n      if (req.isAuthenticated()) {\n        // For Replit Auth users\n        if (req.user?.claims?.sub) {\n          userId = req.user.claims.sub;\n        }\n        // For Google OAuth users (deserialized from database)\n        else if (req.user?.id) {\n          userId = req.user.id;\n        }\n      } else if (req.session && req.session.userId) {\n        userId = req.session.userId;\n      }\n\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Verify the channel belongs to the user\n      const channel = await storage.getChannel(req.params.id);\n      if (!channel || channel.userId !== userId) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const updatedChannel = await storage.updateChannel(req.params.id, req.body);\n      if (!updatedChannel) {\n        return res.status(404).json({ message: \"Channel not found\" });\n      }\n      res.json(updatedChannel);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Video routes\n  app.get(\"/api/videos\", async (req, res) => {\n    try {\n      const { limit, category } = req.query;\n      const userId = getUserIdFromRequest(req);\n      \n      const allVideos = await storage.getVideos(\n        limit ? parseInt(limit as string) : undefined,\n        category as string\n      );\n      \n      // Filter based on visibility:\n      // - Public videos: visible to everyone\n      // - Unlisted videos: visible to everyone (but not in search/recommendations)\n      // - Private videos: only visible to the owner\n      const filteredVideos = allVideos.filter((video: any) => {\n        const visibility = video.visibility || 'public';\n        if (visibility === 'public' || visibility === 'unlisted') {\n          return true;\n        }\n        if (visibility === 'private') {\n          return userId && video.channel?.userId === userId;\n        }\n        return false;\n      });\n      \n      res.json(filteredVideos);\n    } catch (error) {\n      console.error(\"Error in GET /api/videos:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get shorts videos only\n  app.get(\"/api/videos/shorts\", async (req, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      const allShorts = await storage.getShorts();\n      \n      // Filter based on visibility\n      const filteredShorts = allShorts.filter((video: any) => {\n        const visibility = video.visibility || 'public';\n        if (visibility === 'public' || visibility === 'unlisted') {\n          return true;\n        }\n        if (visibility === 'private') {\n          return userId && video.channel?.userId === userId;\n        }\n        return false;\n      });\n      \n      res.json(filteredShorts);\n    } catch (error) {\n      console.error(\"Error in GET /api/videos/shorts:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/videos/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q) {\n        return res.status(400).json({ message: \"Search query required\" });\n      }\n      const userId = getUserIdFromRequest(req);\n      const allVideos = await storage.searchVideos(q as string);\n      \n      // Filter search results:\n      // - Public videos: visible to everyone\n      // - Private videos: only visible to owner\n      // - Unlisted videos: NOT shown in search (even to owner)\n      const filteredVideos = allVideos.filter((video: any) => {\n        const visibility = video.visibility || 'public';\n        if (visibility === 'public') {\n          return true;\n        }\n        if (visibility === 'private') {\n          // Show private videos to the owner\n          return userId && video.channel?.userId === userId;\n        }\n        // Unlisted videos are never shown in search\n        return false;\n      });\n      \n      res.json(filteredVideos);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/videos/by-channels\", async (req, res) => {\n    try {\n      const { channelIds } = req.query;\n      if (!channelIds) {\n        return res.status(400).json({ message: \"Channel IDs required\" });\n      }\n      const userId = getUserIdFromRequest(req);\n      const ids = (channelIds as string).split(',');\n      const allVideos = await storage.getVideosByChannels(ids);\n      \n      // Filter based on visibility\n      const filteredVideos = allVideos.filter((video: any) => {\n        const visibility = video.visibility || 'public';\n        if (visibility === 'public' || visibility === 'unlisted') {\n          return true;\n        }\n        if (visibility === 'private') {\n          return userId && video.channel?.userId === userId;\n        }\n        return false;\n      });\n      \n      res.json(filteredVideos);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/videos/:id\", async (req, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      const video = await storage.getVideo(req.params.id);\n      \n      if (!video) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n      \n      const channel = await storage.getChannel(video.channelId);\n      if (!channel) {\n        return res.status(404).json({ message: \"Channel not found\" });\n      }\n      \n      // Check if user has permission to view this video\n      const visibility = video.visibility || 'public';\n      if (visibility === 'private') {\n        // Only the owner can view private videos\n        if (!userId || channel.userId !== userId) {\n          return res.status(403).json({ message: \"This video is private\" });\n        }\n      }\n      // Public and unlisted videos are accessible to everyone\n      \n      res.json({ ...video, channel });\n    } catch (error) {\n      console.error(\"Error in GET /api/videos/:id:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Stream video from iDrive E2 (proxy endpoint to hide iDrive URLs)\n  app.get(\"/api/videos/stream/:key\", async (req, res) => {\n    try {\n      // Check storage configuration\n      if (!isStorageConfigured()) {\n        return res.status(503).json({ message: \"Video storage not configured\" });\n      }\n\n      const storageKey = decodeURIComponent(req.params.key);\n      const range = req.headers.range;\n\n      // Fetch video from iDrive E2\n      const videoData = await getVideoFromStorage(storageKey, range);\n\n      // Set response headers for video streaming\n      res.setHeader(\"Content-Type\", videoData.contentType);\n      res.setHeader(\"Accept-Ranges\", \"bytes\");\n\n      if (range && videoData.contentRange) {\n        // Partial content (for seeking)\n        res.status(206);\n        res.setHeader(\"Content-Range\", videoData.contentRange);\n        res.setHeader(\"Content-Length\", videoData.contentLength.toString());\n      } else {\n        // Full content\n        res.setHeader(\"Content-Length\", videoData.contentLength.toString());\n      }\n\n      // Stream video to client\n      videoData.stream.pipe(res);\n    } catch (error: any) {\n      console.error(\"Error streaming video:\", error);\n      res.status(500).json({ message: \"Failed to stream video: \" + error.message });\n    }\n  });\n\n  // Serve thumbnail from iDrive E2 (proxy endpoint to avoid CORS issues)\n  app.get(\"/api/thumbnails/:key\", async (req, res) => {\n    try {\n      // Check storage configuration\n      if (!isStorageConfigured()) {\n        return res.status(503).json({ message: \"Thumbnail storage not configured\" });\n      }\n\n      const storageKey = decodeURIComponent(req.params.key);\n\n      // Fetch thumbnail from iDrive E2\n      const { stream, contentLength, contentType } = await getThumbnailFromStorage(storageKey);\n\n      // Set response headers\n      res.setHeader(\"Content-Type\", contentType);\n      res.setHeader(\"Content-Length\", contentLength.toString());\n      res.setHeader(\"Cache-Control\", \"public, max-age=31536000\"); // 1 year cache\n\n      // Stream thumbnail to client\n      stream.pipe(res);\n    } catch (error: any) {\n      console.error(\"Error serving thumbnail:\", error);\n      res.status(500).json({ message: \"Failed to serve thumbnail: \" + error.message });\n    }\n  });\n\n  // Generate pre-signed URL for direct upload to iDrive E2\n  // This bypasses server RAM limits, allowing large file uploads\n  app.post(\"/api/upload/presigned-url\", async (req: any, res) => {\n    try {\n      // Check storage configuration\n      if (!isStorageConfigured()) {\n        return res.status(503).json({ \n          message: \"Storage not configured\",\n          configured: false\n        });\n      }\n\n      // Check authentication\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { fileName, contentType, fileType } = req.body;\n\n      if (!fileName) {\n        return res.status(400).json({ message: \"fileName is required\" });\n      }\n\n      // Generate pre-signed URL\n      const { uploadUrl, key, expiresIn } = await generatePresignedUploadUrl(\n        fileName,\n        contentType || \"video/mp4\",\n        fileType || \"video\"\n      );\n\n      console.log(`Generated pre-signed URL for ${userId}: ${key}`);\n\n      res.json({\n        uploadUrl,\n        key,\n        expiresIn,\n        message: \"Pre-signed URL generated successfully\"\n      });\n    } catch (error: any) {\n      console.error(\"Error generating pre-signed URL:\", error);\n      res.status(500).json({ message: \"Failed to generate upload URL: \" + error.message });\n    }\n  });\n\n  // Upload video file to iDrive E2 storage\n  app.post(\"/api/upload/video\", (req, res, next) => {\n    // Set longer timeout for video uploads (5 minutes)\n    req.setTimeout(300000);\n    res.setTimeout(300000);\n    \n    upload.single('video')(req, res, (err) => {\n      if (err) {\n        if (err.code === 'LIMIT_FILE_SIZE') {\n          const maxSizeMB = Math.floor(MAX_UPLOAD_SIZE / (1024 * 1024));\n          return res.status(413).json({ \n            message: `File too large. Maximum upload size is ${maxSizeMB}MB. For larger files, please upgrade your hosting plan or compress your video.`\n          });\n        }\n        return res.status(400).json({ message: err.message });\n      }\n      next();\n    });\n  }, async (req: any, res) => {\n    try {\n      // Check storage configuration\n      if (!isStorageConfigured()) {\n        return res.status(503).json({ \n          message: \"Video storage not configured. Please set up iDrive E2 credentials.\",\n          configured: false\n        });\n      }\n\n      // Check authentication\n      let userId = null;\n      if (req.isAuthenticated() && req.user?.claims?.sub) {\n        userId = req.user.claims.sub;\n      } else if (req.isAuthenticated() && req.user?.id) {\n        userId = req.user.id;\n      } else if (req.session && req.session.userId) {\n        userId = req.session.userId;\n      }\n\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ message: \"No video file provided\" });\n      }\n\n      console.log(`Uploading video: ${req.file.originalname} (${(req.file.size / (1024 * 1024)).toFixed(2)} MB)`);\n\n      // Upload to iDrive E2\n      const result = await uploadVideoToStorage(\n        req.file.buffer,\n        req.file.originalname,\n        req.file.mimetype\n      );\n\n      console.log(`Video uploaded successfully: ${result.key}`);\n\n      res.json({\n        message: \"Video uploaded successfully\",\n        videoUrl: result.videoUrl,\n        key: result.key,\n        storageKey: result.storageKey\n      });\n    } catch (error: any) {\n      console.error(\"Error uploading video:\", error);\n      res.status(500).json({ message: \"Failed to upload video: \" + error.message });\n    }\n  });\n\n  // Upload thumbnail to iDrive E2 storage\n  app.post(\"/api/upload/thumbnail\", (req, res, next) => {\n    upload.single('thumbnail')(req, res, (err) => {\n      if (err) {\n        if (err.code === 'LIMIT_FILE_SIZE') {\n          const maxSizeMB = Math.floor(MAX_UPLOAD_SIZE / (1024 * 1024));\n          return res.status(413).json({ \n            message: `Thumbnail too large. Maximum upload size is ${maxSizeMB}MB.`\n          });\n        }\n        return res.status(400).json({ message: err.message });\n      }\n      next();\n    });\n  }, async (req: any, res) => {\n    try {\n      // Check storage configuration\n      if (!isStorageConfigured()) {\n        return res.status(503).json({ \n          message: \"Storage not configured\",\n          configured: false\n        });\n      }\n\n      // Check authentication\n      let userId = null;\n      if (req.isAuthenticated() && req.user?.claims?.sub) {\n        userId = req.user.claims.sub;\n      } else if (req.isAuthenticated() && req.user?.id) {\n        userId = req.user.id;\n      } else if (req.session && req.session.userId) {\n        userId = req.session.userId;\n      }\n\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ message: \"No thumbnail file provided\" });\n      }\n\n      console.log(`Uploading thumbnail: ${req.file.originalname}`);\n\n      // Upload to iDrive E2\n      const thumbnailUrl = await uploadThumbnailToStorage(\n        req.file.buffer,\n        req.file.originalname,\n        req.file.mimetype\n      );\n\n      res.json({\n        message: \"Thumbnail uploaded successfully\",\n        thumbnailUrl\n      });\n    } catch (error: any) {\n      console.error(\"Error uploading thumbnail:\", error);\n      res.status(500).json({ message: \"Failed to upload thumbnail: \" + error.message });\n    }\n  });\n\n  // Channel avatar/logo upload\n  app.post(\"/api/upload/avatar\", (req, res, next) => {\n    upload.single('avatar')(req, res, (err) => {\n      if (err) {\n        if (err.code === 'LIMIT_FILE_SIZE') {\n          return res.status(413).json({ \n            message: `Avatar too large. Maximum upload size is 10MB.`\n          });\n        }\n        return res.status(400).json({ message: err.message });\n      }\n      next();\n    });\n  }, async (req: any, res) => {\n    try {\n      // Check storage configuration\n      if (!isStorageConfigured()) {\n        return res.status(503).json({ \n          message: \"Storage not configured\",\n          configured: false\n        });\n      }\n\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ message: \"No avatar file provided\" });\n      }\n\n      console.log(`Uploading avatar: ${req.file.originalname}`);\n\n      // Upload to iDrive E2 (reuse thumbnail storage for avatars)\n      const avatarUrl = await uploadThumbnailToStorage(\n        req.file.buffer,\n        `avatar-${req.file.originalname}`,\n        req.file.mimetype\n      );\n\n      res.json({\n        message: \"Avatar uploaded successfully\",\n        avatarUrl\n      });\n    } catch (error: any) {\n      console.error(\"Error uploading avatar:\", error);\n      res.status(500).json({ message: \"Failed to upload avatar: \" + error.message });\n    }\n  });\n\n  // Check storage configuration status\n  app.get(\"/api/storage/status\", async (req, res) => {\n    res.json({\n      configured: isStorageConfigured(),\n      provider: \"iDrive E2\",\n      cdnEnabled: !!process.env.CLOUDFLARE_CDN_URL,\n      maxUploadSize: MAX_UPLOAD_SIZE,\n      maxUploadSizeMB: Math.floor(MAX_UPLOAD_SIZE / (1024 * 1024))\n    });\n  });\n\n  // Create video (upload)\n  app.post(\"/api/videos\", async (req: any, res) => {\n    try {\n      // Get user ID from session or Replit Auth\n      let userId = null;\n      if (req.isAuthenticated() && req.user?.claims?.sub) {\n        userId = req.user.claims.sub;\n      } else if (req.isAuthenticated() && req.user?.id) {\n        userId = req.user.id;\n      } else if (req.session && req.session.userId) {\n        userId = req.session.userId;\n      }\n\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized - Please login to upload videos\" });\n      }\n\n      // Get user's channel\n      const channel = await storage.getChannelByUserId(userId);\n      if (!channel) {\n        return res.status(400).json({ message: \"You need to create a channel before uploading videos\" });\n      }\n\n      // Validate required fields\n      const { title, thumbnail, videoUrl, duration, description, category, visibility, storageKey } = req.body;\n      \n      if (!title || !thumbnail || !videoUrl || !duration) {\n        return res.status(400).json({ message: \"Missing required fields: title, thumbnail, videoUrl, duration\" });\n      }\n\n      // Create video data\n      const videoData = insertVideoSchema.parse({\n        title,\n        thumbnail,\n        videoUrl,\n        duration,\n        channelId: channel.id,\n        description: description || null,\n        category: category || null,\n        storageKey: storageKey || null,\n        isShorts: duration && duration.includes(':') && parseInt(duration.split(':')[0]) === 0 && parseInt(duration.split(':')[1]) < 60,\n      });\n\n      const video = await storage.createVideo(videoData);\n      \n      // Create notifications for all subscribers of this channel\n      const channelSubscribers = await storage.getChannelSubscribers(channel.id);\n      const notificationPromises = channelSubscribers.map(async (subscriber) => {\n        await storage.createNotification({\n          userId: subscriber.userId,\n          type: 'video_upload',\n          title: `New video from ${channel.name}`,\n          content: video.title,\n          videoId: video.id,\n          channelId: channel.id,\n          thumbnail: video.thumbnail,\n        });\n      });\n      \n      await Promise.all(notificationPromises);\n      \n      res.status(201).json({\n        message: \"Video uploaded successfully\",\n        video: { ...video, channel }\n      });\n    } catch (error: any) {\n      console.error(\"Error creating video:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid video data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to upload video\" });\n    }\n  });\n\n  // Update video (edit details)\n  app.patch(\"/api/videos/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Get video and verify ownership\n      const video = await storage.getVideo(req.params.id);\n      if (!video) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n\n      const channel = await storage.getChannel(video.channelId);\n      if (!channel || channel.userId !== userId) {\n        return res.status(403).json({ message: \"You can only edit your own videos\" });\n      }\n\n      // Update video\n      const { title, description, category, thumbnail, visibility } = req.body;\n      const updates: Partial<typeof video> = {};\n      \n      if (title !== undefined) updates.title = title;\n      if (description !== undefined) updates.description = description;\n      if (category !== undefined) updates.category = category;\n      if (thumbnail !== undefined) updates.thumbnail = thumbnail;\n      if (visibility !== undefined) updates.visibility = visibility;\n\n      const updatedVideo = await storage.updateVideo(req.params.id, updates);\n      res.json({ message: \"Video updated successfully\", video: updatedVideo });\n    } catch (error: any) {\n      console.error(\"Error updating video:\", error);\n      res.status(500).json({ message: \"Failed to update video\" });\n    }\n  });\n\n  // Delete video\n  app.delete(\"/api/videos/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Get video and verify ownership\n      const video = await storage.getVideo(req.params.id);\n      if (!video) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n\n      const channel = await storage.getChannel(video.channelId);\n      if (!channel || channel.userId !== userId) {\n        return res.status(403).json({ message: \"You can only delete your own videos\" });\n      }\n\n      // Delete video\n      const deleted = await storage.deleteVideo(req.params.id);\n      if (!deleted) {\n        return res.status(500).json({ message: \"Failed to delete video\" });\n      }\n\n      res.json({ message: \"Video deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Error deleting video:\", error);\n      res.status(500).json({ message: \"Failed to delete video\" });\n    }\n  });\n\n  // Space routes\n  app.get(\"/api/spaces/user/:userId\", async (req, res) => {\n    try {\n      const spaces = await storage.getSpacesByUser(req.params.userId);\n      res.json(spaces);\n    } catch (error) {\n      console.error(\"Error in GET /api/spaces/user/:userId:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/spaces\", async (req, res) => {\n    try {\n      const spaceData = insertSpaceSchema.parse(req.body);\n      const space = await storage.createSpace(spaceData);\n      res.status(201).json(space);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid space data\" });\n    }\n  });\n\n  app.patch(\"/api/spaces/:id\", async (req, res) => {\n    try {\n      const space = await storage.updateSpace(req.params.id, req.body);\n      if (!space) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      res.json(space);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/spaces/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteSpace(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Space not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Subscription routes\n  app.get(\"/api/subscriptions/:userId\", async (req, res) => {\n    try {\n      const subscriptions = await storage.getSubscriptions(req.params.userId);\n      res.json(subscriptions);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/subscriptions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const subData = insertSubscriptionSchema.parse({ ...req.body, userId });\n      const subscription = await storage.subscribe(subData);\n      \n      // Notify channel owner about new subscriber\n      const channel = await storage.getChannel(subscription.channelId);\n      if (channel) {\n        const subscriber = await storage.getUser(userId);\n        if (subscriber) {\n          await storage.createNotification({\n            userId: channel.userId,\n            type: 'new_subscriber',\n            title: 'New subscriber',\n            content: `${subscriber.username || subscriber.firstName || 'Someone'} subscribed to your channel`,\n            channelId: channel.id,\n            thumbnail: subscriber.profileImageUrl || null,\n          });\n        }\n      }\n      \n      res.status(201).json(subscription);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid subscription data\" });\n    }\n  });\n\n  app.delete(\"/api/subscriptions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const { channelId } = req.body;\n      if (!channelId) {\n        return res.status(400).json({ message: \"ChannelId required\" });\n      }\n      const unsubscribed = await storage.unsubscribe(userId, channelId);\n      if (!unsubscribed) {\n        return res.status(404).json({ message: \"Subscription not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Blocking routes\n  app.post(\"/api/users/:userId/block\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Users can only block channels for themselves\n      if (userId !== req.params.userId) {\n        return res.status(403).json({ message: \"Forbidden: Can only block channels for your own account\" });\n      }\n      \n      const { channelId } = req.body;\n      if (!channelId) {\n        return res.status(400).json({ message: \"Channel ID required\" });\n      }\n      const blocked = await storage.blockChannel(userId, channelId);\n      res.json({ blocked });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/users/:userId/block/:channelId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Users can only unblock channels for themselves\n      if (userId !== req.params.userId) {\n        return res.status(403).json({ message: \"Forbidden: Can only unblock channels for your own account\" });\n      }\n      \n      const unblocked = await storage.unblockChannel(userId, req.params.channelId);\n      res.json({ unblocked });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/blocked-channels\", async (req, res) => {\n    try {\n      const blockedChannels = await storage.getBlockedChannels(req.params.userId);\n      res.json(blockedChannels);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Comment routes\n  app.post(\"/api/videos/:videoId/comments\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const commentData = insertCommentSchema.parse({\n        ...req.body,\n        userId,\n        videoId: req.params.videoId\n      });\n      const comment = await storage.createComment(commentData);\n      \n      // Notify video owner about new comment\n      const video = await storage.getVideo(req.params.videoId);\n      if (video) {\n        const channel = await storage.getChannel(video.channelId);\n        if (channel && channel.userId !== userId) {\n          const commenter = await storage.getUser(userId);\n          await storage.createNotification({\n            userId: channel.userId,\n            type: 'comment',\n            title: 'New comment on your video',\n            content: `${commenter?.username || commenter?.firstName || 'Someone'} commented: ${comment.content.substring(0, 50)}${comment.content.length > 50 ? '...' : ''}`,\n            videoId: video.id,\n            channelId: channel.id,\n            thumbnail: video.thumbnail,\n          });\n        }\n      }\n      \n      res.status(201).json(comment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid comment data\" });\n    }\n  });\n\n  app.get(\"/api/videos/:videoId/comments\", async (req, res) => {\n    try {\n      const { limit, offset, sortBy } = req.query;\n      const comments = await storage.getCommentsByVideo(\n        req.params.videoId,\n        limit ? parseInt(limit as string) : undefined,\n        offset ? parseInt(offset as string) : undefined,\n        sortBy as string\n      );\n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/comments/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserIdFromRequest(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const comment = await storage.getComment(req.params.id);\n      if (!comment || comment.userId !== userId) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      const updatedComment = await storage.updateComment(req.params.id, req.body);\n      if (!updatedComment) {\n        return res.status(404).json({ message: \"Comment not found\" });\n      }\n      res.json(updatedComment);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/comments/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const comment = await storage.getComment(req.params.id);\n      if (!comment || comment.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      const deleted = await storage.deleteComment(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Comment not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/comments/:id/like\", isAuthenticated, async (req: any, res) => {\n    try {\n      const liked = await storage.likeComment(req.params.id);\n      if (!liked) {\n        return res.status(404).json({ message: \"Comment not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Like routes\n  app.post(\"/api/videos/:videoId/like\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const likeData = insertLikeSchema.parse({\n        ...req.body,\n        userId,\n        videoId: req.params.videoId\n      });\n      const result = await storage.toggleLike(likeData);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid like data\" });\n    }\n  });\n\n  app.get(\"/api/videos/:videoId/likes\", async (req, res) => {\n    try {\n      const counts = await storage.getLikeCounts(req.params.videoId);\n      res.json(counts);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/videos/:videoId/user-like/:userId\", async (req, res) => {\n    try {\n      const userLike = await storage.getUserLike(req.params.userId, req.params.videoId);\n      res.json(userLike || null);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Watch history routes\n  app.post(\"/api/watch-history\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const historyData = insertWatchHistorySchema.parse({ ...req.body, userId });\n      const history = await storage.addToWatchHistory(historyData);\n      res.status(201).json(history);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid watch history data\" });\n    }\n  });\n\n  app.get(\"/api/watch-history/:userId\", async (req, res) => {\n    try {\n      const { limit, offset } = req.query;\n      const history = await storage.getWatchHistory(\n        req.params.userId,\n        limit ? parseInt(limit as string) : undefined,\n        offset ? parseInt(offset as string) : undefined\n      );\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/watch-history/:userId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cleared = await storage.clearWatchHistory(userId);\n      if (!cleared) {\n        return res.status(404).json({ message: \"No watch history found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Playlist routes\n  app.post(\"/api/playlists\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const playlistData = insertPlaylistSchema.parse({ ...req.body, userId });\n      const playlist = await storage.createPlaylist(playlistData);\n      res.status(201).json(playlist);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid playlist data\" });\n    }\n  });\n\n  app.get(\"/api/playlists/:userId\", async (req, res) => {\n    try {\n      const playlists = await storage.getPlaylistsByUser(req.params.userId);\n      res.json(playlists);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/playlists/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const playlist = await storage.getPlaylist(req.params.id);\n      if (!playlist || playlist.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      const updatedPlaylist = await storage.updatePlaylist(req.params.id, req.body);\n      if (!updatedPlaylist) {\n        return res.status(404).json({ message: \"Playlist not found\" });\n      }\n      res.json(updatedPlaylist);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/playlists/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const playlist = await storage.getPlaylist(req.params.id);\n      if (!playlist || playlist.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      const deleted = await storage.deletePlaylist(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Playlist not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/playlists/:id/videos\", isAuthenticated, async (req: any, res) => {\n    try {\n      const playlistVideoData = insertPlaylistVideoSchema.parse({\n        ...req.body,\n        playlistId: req.params.id\n      });\n      const playlistVideo = await storage.addVideoToPlaylist(playlistVideoData);\n      res.status(201).json(playlistVideo);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid playlist video data\" });\n    }\n  });\n\n  app.delete(\"/api/playlists/:playlistId/videos/:videoId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const playlist = await storage.getPlaylist(req.params.playlistId);\n      if (!playlist || playlist.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      const removed = await storage.removeVideoFromPlaylist(req.params.playlistId, req.params.videoId);\n      if (!removed) {\n        return res.status(404).json({ message: \"Video not found in playlist\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Video view count route\n  app.post(\"/api/videos/:videoId/view\", async (req, res) => {\n    try {\n      const incremented = await storage.incrementViewCount(req.params.videoId);\n      if (!incremented) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications/:userId\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const notifications = await storage.getNotifications(req.params.userId, limit);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/notifications/:userId/unread-count\", async (req, res) => {\n    try {\n      const count = await storage.getUnreadCount(req.params.userId);\n      res.json({ count });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const marked = await storage.markNotificationAsRead(req.params.id);\n      if (!marked) {\n        return res.status(404).json({ message: \"Notification not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:userId/mark-all-read\", async (req, res) => {\n    try {\n      const marked = await storage.markAllNotificationsAsRead(req.params.userId);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":46169},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/EditVideoDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Loader2, Upload, X } from \"lucide-react\";\n\ninterface EditVideoDialogProps {\n  video: any;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst categories = [\n  \"Gaming\",\n  \"Music\",\n  \"Education\",\n  \"Entertainment\",\n  \"News\",\n  \"Sports\",\n  \"Technology\",\n  \"Cooking\",\n  \"Travel\",\n  \"Fashion\",\n  \"Comedy\",\n  \"Science\",\n  \"Health\",\n  \"Lifestyle\",\n  \"Vlog\",\n  \"Tutorial\",\n  \"Other\",\n];\n\nconst visibilityOptions = [\n  { value: \"public\", label: \"Public\" },\n  { value: \"unlisted\", label: \"Unlisted\" },\n  { value: \"private\", label: \"Private\" },\n];\n\nexport default function EditVideoDialog({ video, open, onOpenChange }: EditVideoDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [title, setTitle] = useState(video?.title || \"\");\n  const [description, setDescription] = useState(video?.description || \"\");\n  const [category, setCategory] = useState(video?.category || \"\");\n  const [visibility, setVisibility] = useState(video?.visibility || \"public\");\n  const [thumbnailFile, setThumbnailFile] = useState<File | null>(null);\n  const [thumbnailPreview, setThumbnailPreview] = useState(video?.thumbnail || \"\");\n  const [uploadingThumbnail, setUploadingThumbnail] = useState(false);\n\n  useEffect(() => {\n    if (video) {\n      setTitle(video.title || \"\");\n      setDescription(video.description || \"\");\n      setCategory(video.category || \"\");\n      setVisibility(video.visibility || \"public\");\n      setThumbnailPreview(video.thumbnail || \"\");\n    }\n  }, [video]);\n\n  const handleThumbnailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setThumbnailFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setThumbnailPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const updateVideoMutation = useMutation({\n    mutationFn: async (updates: any) => {\n      const response = await fetch(`/api/videos/${video.id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updates),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update video\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Video updated successfully\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update video\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async () => {\n    let thumbnailUrl = video?.thumbnail;\n\n    // Upload new thumbnail if selected\n    if (thumbnailFile) {\n      setUploadingThumbnail(true);\n      try {\n        const formData = new FormData();\n        formData.append(\"thumbnail\", thumbnailFile);\n\n        const response = await fetch(\"/api/upload/thumbnail\", {\n          method: \"POST\",\n          body: formData,\n          credentials: \"include\",\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Failed to upload thumbnail\");\n        }\n\n        const data = await response.json();\n        thumbnailUrl = data.thumbnailUrl;\n      } catch (error: any) {\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to upload thumbnail\",\n          variant: \"destructive\",\n        });\n        setUploadingThumbnail(false);\n        return;\n      }\n      setUploadingThumbnail(false);\n    }\n\n    updateVideoMutation.mutate({\n      title,\n      description,\n      category,\n      visibility,\n      thumbnail: thumbnailUrl,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Video</DialogTitle>\n          <DialogDescription>\n            Update your video details\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          {/* Thumbnail */}\n          <div className=\"space-y-2\">\n            <Label>Thumbnail</Label>\n            <div className=\"flex flex-col gap-3\">\n              {thumbnailPreview && (\n                <div className=\"relative w-full aspect-video bg-muted rounded-lg overflow-hidden\">\n                  <img\n                    src={thumbnailPreview}\n                    alt=\"Thumbnail\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                  <Button\n                    size=\"icon\"\n                    variant=\"destructive\"\n                    className=\"absolute top-2 right-2\"\n                    onClick={() => {\n                      setThumbnailFile(null);\n                      setThumbnailPreview(video?.thumbnail || \"\");\n                    }}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => document.getElementById(\"thumbnail-upload\")?.click()}\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                {thumbnailPreview ? \"Change Thumbnail\" : \"Upload Thumbnail\"}\n              </Button>\n              <input\n                id=\"thumbnail-upload\"\n                type=\"file\"\n                accept=\"image/*\"\n                className=\"hidden\"\n                onChange={handleThumbnailChange}\n              />\n            </div>\n          </div>\n\n          {/* Title */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"edit-title\">Title *</Label>\n            <Input\n              id=\"edit-title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              maxLength={100}\n            />\n            <p className=\"text-xs text-muted-foreground\">{title.length}/100</p>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"edit-description\">Description</Label>\n            <Textarea\n              id=\"edit-description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              rows={4}\n              maxLength={5000}\n            />\n            <p className=\"text-xs text-muted-foreground\">{description.length}/5000</p>\n          </div>\n\n          {/* Category */}\n          <div className=\"space-y-2\">\n            <Label>Category</Label>\n            <Select value={category} onValueChange={setCategory}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select category\" />\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map((cat) => (\n                  <SelectItem key={cat} value={cat}>\n                    {cat}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Visibility */}\n          <div className=\"space-y-2\">\n            <Label>Visibility</Label>\n            <Select value={visibility} onValueChange={setVisibility}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {visibilityOptions.map((option) => (\n                  <SelectItem key={option.value} value={option.value}>\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            disabled={updateVideoMutation.isPending || uploadingThumbnail || !title.trim()}\n          >\n            {(updateVideoMutation.isPending || uploadingThumbnail) && (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            )}\n            {uploadingThumbnail ? \"Uploading...\" : \"Save Changes\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9015},"client/src/components/StudioLayout.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  LayoutDashboard,\n  Video,\n  BarChart3,\n  Users,\n  Settings,\n  Menu,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { VisuallyHidden } from \"@radix-ui/react-visually-hidden\";\nimport studioLogoImage from \"@/assets/cineweave-studio-logo.png\";\n\nconst studioNavItems = [\n  { icon: LayoutDashboard, label: \"Dashboard\", path: \"/studio\" },\n  { icon: Video, label: \"Content\", path: \"/studio/content\" },\n  { icon: BarChart3, label: \"Analytics\", path: \"/studio/analytics\" },\n  { icon: Users, label: \"Community\", path: \"/studio/community\" },\n  { icon: Settings, label: \"Settings\", path: \"/studio/settings\" },\n];\n\ninterface StudioLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function StudioLayout({ children }: StudioLayoutProps) {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { mobileSidebarOpen, setMobileSidebarOpen } = useAppStore();\n\n  const isActive = (path: string) => {\n    if (path === \"/studio\") {\n      return location === path;\n    }\n    return location.startsWith(path);\n  };\n\n  const StudioNavContent = () => (\n    <div className=\"py-2\">\n      {studioNavItems.map((item) => {\n        const Icon = item.icon;\n        return (\n          <Link\n            key={item.path}\n            href={item.path}\n            className={cn(\n              \"flex items-center gap-4 px-4 py-3 text-sm font-medium transition-colors\",\n              isActive(item.path)\n                ? \"text-primary bg-muted\"\n                : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n            )}\n            onClick={() => setMobileSidebarOpen(false)}\n          >\n            <Icon className=\"h-5 w-5 flex-shrink-0\" />\n            <span>{item.label}</span>\n          </Link>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Top Header */}\n      <header className=\"fixed top-0 left-0 right-0 h-16 bg-background border-b border-border z-50 flex items-center px-4 md:px-6\">\n        <div className=\"flex items-center gap-2 md:gap-4\">\n          {/* Mobile Menu Button - Shows on < md */}\n          <Sheet open={mobileSidebarOpen} onOpenChange={setMobileSidebarOpen}>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden\"\n              onClick={() => setMobileSidebarOpen(true)}\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <SheetContent side=\"left\" className=\"p-0 w-60\">\n              <VisuallyHidden>\n                <SheetHeader>\n                  <SheetTitle>Studio Navigation</SheetTitle>\n                </SheetHeader>\n              </VisuallyHidden>\n              <StudioNavContent />\n            </SheetContent>\n          </Sheet>\n\n          {/* Desktop Menu Button - Shows on >= md (non-functional, just for consistency) */}\n          <Button variant=\"ghost\" size=\"icon\" className=\"hidden md:flex\">\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n\n          <Link href=\"/\">\n            <div className=\"flex items-center gap-2\">\n              <img src={studioLogoImage} alt=\"CineWeave Studio Logo\" className=\"h-10 w-10 sm:h-12 sm:w-12 object-contain\" />\n              <span className=\"font-semibold text-base md:text-lg\">CineWeave Studio</span>\n            </div>\n          </Link>\n        </div>\n\n        <div className=\"ml-auto flex items-center gap-2 md:gap-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"hidden sm:flex\">\n              Back to CineWeave\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" className=\"sm:hidden\">\n              <span className=\"text-xs\">Exit</span>\n            </Button>\n          </Link>\n          <div className=\"flex items-center gap-2 md:gap-3\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={user?.profileImageUrl || undefined} alt={user?.firstName || user?.email || \"User\"} />\n              <AvatarFallback className=\"bg-gradient-to-br from-purple-500 to-pink-500 text-white font-semibold\">\n                {user?.firstName?.[0]?.toUpperCase() || user?.email?.[0]?.toUpperCase() || 'U'}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"hidden md:block\">\n              <p className=\"text-sm font-medium\">\n                {user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : user?.firstName || user?.username || 'User'}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">{user?.email || `@${user?.username || 'user'}`}</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Side Navigation - Hidden on mobile, visible on desktop */}\n      <aside className=\"hidden md:fixed md:left-0 md:top-16 md:bottom-0 md:block md:w-60 bg-background border-r border-border overflow-y-auto\">\n        <StudioNavContent />\n      </aside>\n\n      {/* Main Content - Responsive margins and padding */}\n      <main className=\"mt-16 p-4 md:p-6 md:ml-60\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":5408},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/studio/Settings.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useState, useEffect } from \"react\";\nimport { Camera, Loader2 } from \"lucide-react\";\nimport type { Channel } from \"@shared/schema\";\n\nexport default function StudioSettings() {\n  const { currentUserId } = useAppStore();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [name, setName] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n\n  const { data: channel, isLoading } = useQuery<Channel>({\n    queryKey: [\"/api/users/channel\", currentUserId],\n    queryFn: async () => {\n      const response = await fetch(`/api/users/${currentUserId}/channel`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch channel');\n      return response.json();\n    },\n    enabled: !!currentUserId\n  });\n\n  useEffect(() => {\n    if (channel) {\n      setName(channel.name || \"\");\n      setUsername(channel.username || \"\");\n      setDescription(channel.description || \"\");\n      setAvatar(channel.avatar || \"\");\n    }\n  }, [channel]);\n\n  const updateChannelMutation = useMutation({\n    mutationFn: async (updates: Partial<Channel>) => {\n      if (!channel) throw new Error('No channel found');\n      const response = await fetch(`/api/channels/${channel.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update channel');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/channel\", currentUserId] });\n      toast({\n        title: \"Channel updated!\",\n        description: \"Your channel settings have been saved successfully\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update channel\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSaveChanges = () => {\n    if (!name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Channel name is required\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    if (!username.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Username is required\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    updateChannelMutation.mutate({\n      name: name.trim(),\n      username: username.trim(),\n      description: description.trim() || null,\n      avatar: avatar.trim() || null\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!channel) {\n    return (\n      <div className=\"max-w-4xl mx-auto py-8 px-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle>No Channel Found</CardTitle>\n            <CardDescription>\n              You need to create a channel before you can customize it.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-8 px-4 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Channel Settings</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Customize your channel information and appearance\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Channel Information</CardTitle>\n          <CardDescription>\n            Update your channel details that appear on your channel page\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Profile Picture */}\n          <div className=\"space-y-2\">\n            <Label>Profile Picture</Label>\n            <div className=\"flex items-center gap-6\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage src={avatar || undefined} />\n                <AvatarFallback className=\"text-2xl bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n                  {name[0] || 'C'}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => document.getElementById('avatar-upload')?.click()}\n                  >\n                    <Camera className=\"h-4 w-4 mr-2\" />\n                    Upload Image\n                  </Button>\n                  <input\n                    id=\"avatar-upload\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"hidden\"\n                    onChange={async (e) => {\n                      const file = e.target.files?.[0];\n                      if (!file) return;\n\n                      const formData = new FormData();\n                      formData.append('avatar', file);\n\n                      try {\n                        const response = await fetch('/api/upload/avatar', {\n                          method: 'POST',\n                          body: formData,\n                          credentials: 'include'\n                        });\n\n                        if (!response.ok) throw new Error('Failed to upload avatar');\n\n                        const data = await response.json();\n                        setAvatar(data.avatarUrl);\n                        toast({\n                          title: \"Success!\",\n                          description: \"Avatar uploaded successfully\"\n                        });\n                      } catch (error: any) {\n                        toast({\n                          title: \"Error\",\n                          description: error.message || \"Failed to upload avatar\",\n                          variant: \"destructive\"\n                        });\n                      }\n                    }}\n                  />\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Upload a profile picture for your channel (JPG, PNG, or WebP)\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Channel Name */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Channel Name *</Label>\n            <Input\n              id=\"name\"\n              placeholder=\"Enter your channel name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              maxLength={50}\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              {name.length}/50 characters\n            </p>\n          </div>\n\n          {/* Username */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username *</Label>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-muted-foreground\">@</span>\n              <Input\n                id=\"username\"\n                placeholder=\"username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value.replace(/[^a-zA-Z0-9_]/g, ''))}\n                maxLength={30}\n              />\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Your unique channel identifier. Only letters, numbers, and underscores allowed.\n            </p>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Tell viewers about your channel\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              rows={4}\n              maxLength={1000}\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              {description.length}/1000 characters\n            </p>\n          </div>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end pt-4\">\n            <Button\n              onClick={handleSaveChanges}\n              disabled={updateChannelMutation.isPending}\n            >\n              {updateChannelMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                'Save Changes'\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Channel Stats */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Channel Stats</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Subscribers</p>\n              <p className=\"text-2xl font-bold\">{channel.subscribers?.toLocaleString() || 0}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Verified</p>\n              <p className=\"text-2xl font-bold\">{channel.verified ? '✓ Yes' : '✗ No'}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9907},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <QueryClientProvider client={queryClient}>\n    <App />\n  </QueryClientProvider>\n);\n","size_bytes":343},"client/src/components/SpaceCard.tsx":{"content":"import { MoreVertical } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { SpaceWithChannels } from \"@shared/schema\";\n\ninterface SpaceCardProps {\n  space: SpaceWithChannels;\n  onClick?: () => void;\n}\n\nconst iconClasses: Record<string, string> = {\n  blue: \"from-blue-500 to-purple-600\",\n  green: \"from-green-500 to-teal-600\",\n  pink: \"from-pink-500 to-red-600\",\n  orange: \"from-orange-500 to-yellow-600\",\n  purple: \"from-purple-500 to-indigo-600\",\n};\n\nconst iconComponents: Record<string, string> = {\n  \"Gaming Space\": \"🎮\",\n  \"Tech & Education\": \"🎓\", \n  \"Movies & Reviews\": \"🎬\",\n  \"Music & Audio\": \"🎵\",\n  \"Sports & Fitness\": \"⚽\",\n  \"Default\": \"📁\",\n};\n\nexport default function SpaceCard({ space, onClick }: SpaceCardProps) {\n  const gradientClass = iconClasses[space.color || \"blue\"] || iconClasses.blue;\n  const icon = iconComponents[space.name] || iconComponents.Default;\n  \n  return (\n    <div\n      className=\"bg-card border border-border rounded-xl p-3 sm:p-4 hover:border-primary transition cursor-pointer\"\n      onClick={onClick}\n      data-testid={`space-card-${space.id}`}\n    >\n      <div className=\"flex items-start justify-between mb-3 sm:mb-4 gap-3 sm:gap-4\">\n        <div className={`w-12 h-12 rounded-lg bg-gradient-to-br ${gradientClass} flex items-center justify-center text-xl`}>\n          {icon}\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"min-w-[44px] min-h-[44px] w-11 h-11 sm:w-6 sm:h-6 text-muted-foreground hover:text-foreground -mt-1\"\n          onClick={(e) => {\n            e.stopPropagation();\n            // Handle space options\n          }}\n          data-testid={`button-space-options-${space.id}`}\n        >\n          <MoreVertical className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      <h3 className=\"text-base sm:text-lg font-semibold text-foreground mb-1\">{space.name}</h3>\n      <p className=\"text-xs sm:text-sm text-muted-foreground mb-3\">\n        {space.channels.length} channels • {space.videoCount} videos\n      </p>\n      <div className=\"flex -space-x-2\">\n        {space.channels.slice(0, 3).map((channel) => (\n          <div\n            key={channel.id}\n            className=\"w-8 h-8 rounded-full border-2 border-card bg-muted overflow-hidden\"\n          >\n            <img\n              src={channel.avatar || \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?w=80&h=80&fit=crop\"}\n              alt={channel.name}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n        ))}\n        {space.channels.length > 3 && (\n          <div className=\"w-8 h-8 rounded-full border-2 border-card bg-muted flex items-center justify-center text-xs font-medium\">\n            +{space.channels.length - 3}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2843},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/videoStorage.ts":{"content":"import { S3Client, PutObjectCommand, DeleteObjectCommand, GetObjectCommand } from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { Upload } from \"@aws-sdk/lib-storage\";\nimport { Readable } from \"stream\";\n\n// iDrive E2 S3-compatible client configuration\nexport const s3Client = new S3Client({\n  endpoint: process.env.IDRIVE_ENDPOINT || \"\",\n  region: process.env.IDRIVE_REGION || \"us-east-1\",\n  credentials: {\n    accessKeyId: process.env.IDRIVE_ACCESS_KEY || \"\",\n    secretAccessKey: process.env.IDRIVE_SECRET_KEY || \"\",\n  },\n  forcePathStyle: true, // Required for S3-compatible services\n  requestHandler: {\n    // Increase connection timeout to 5 minutes for large uploads\n    connectionTimeout: 300000,\n    requestTimeout: 300000,\n  },\n});\n\nconst BUCKET_NAME = process.env.IDRIVE_BUCKET || \"\";\nconst CDN_URL = process.env.CLOUDFLARE_CDN_URL || process.env.IDRIVE_PUBLIC_URL || \"\";\n\nexport interface VideoUploadResult {\n  videoUrl: string;\n  thumbnailUrl?: string;\n  key: string;\n  storageKey: string;\n}\n\n/**\n * Upload video to iDrive E2 storage\n */\nexport async function uploadVideoToStorage(\n  buffer: Buffer,\n  fileName: string,\n  contentType: string = \"video/mp4\"\n): Promise<VideoUploadResult> {\n  const key = `videos/${Date.now()}-${fileName}`;\n  \n  console.log(`Starting upload to iDrive: ${key} (${(buffer.length / (1024 * 1024)).toFixed(2)} MB)`);\n  \n  const upload = new Upload({\n    client: s3Client,\n    params: {\n      Bucket: BUCKET_NAME,\n      Key: key,\n      Body: buffer,\n      ContentType: contentType,\n      CacheControl: \"public, max-age=31536000\", // 1 year cache for videos\n    },\n    queueSize: 4,\n    partSize: 1024 * 1024 * 5, // 5MB parts for better reliability\n    leavePartsOnError: false,\n  });\n\n  // Track upload progress\n  upload.on(\"httpUploadProgress\", (progress) => {\n    if (progress.loaded && progress.total) {\n      const percentage = Math.round((progress.loaded / progress.total) * 100);\n      console.log(`Upload progress: ${percentage}% (${(progress.loaded / (1024 * 1024)).toFixed(2)} MB / ${(progress.total / (1024 * 1024)).toFixed(2)} MB)`);\n    }\n  });\n\n  try {\n    await upload.done();\n    console.log(`Upload completed successfully: ${key}`);\n  } catch (error) {\n    console.error(`Upload failed for ${key}:`, error);\n    throw error;\n  }\n  \n  // Return clean API URL instead of iDrive URL\n  const videoUrl = `/api/videos/stream/${encodeURIComponent(key)}`;\n\n  return {\n    videoUrl,\n    key,\n    storageKey: key,\n  };\n}\n\n/**\n * Upload thumbnail to iDrive E2 storage\n */\nexport async function uploadThumbnailToStorage(\n  buffer: Buffer,\n  fileName: string,\n  contentType: string = \"image/jpeg\"\n): Promise<string> {\n  const key = `thumbnails/${Date.now()}-${fileName}`;\n  \n  const command = new PutObjectCommand({\n    Bucket: BUCKET_NAME,\n    Key: key,\n    Body: buffer,\n    ContentType: contentType,\n    CacheControl: \"public, max-age=31536000\", // 1 year cache\n  });\n\n  await s3Client.send(command);\n  \n  // Return proxy API URL instead of direct iDrive URL (to avoid CORS issues)\n  const thumbnailUrl = `/api/thumbnails/${encodeURIComponent(key)}`;\n\n  return thumbnailUrl;\n}\n\n/**\n * Delete video from iDrive E2 storage\n */\nexport async function deleteVideoFromStorage(key: string): Promise<void> {\n  const command = new DeleteObjectCommand({\n    Bucket: BUCKET_NAME,\n    Key: key,\n  });\n\n  await s3Client.send(command);\n}\n\n/**\n * Upload video from stream (useful for large files)\n */\nexport async function uploadVideoStream(\n  stream: Readable,\n  fileName: string,\n  contentType: string = \"video/mp4\"\n): Promise<VideoUploadResult> {\n  const key = `videos/${Date.now()}-${fileName}`;\n  \n  const upload = new Upload({\n    client: s3Client,\n    params: {\n      Bucket: BUCKET_NAME,\n      Key: key,\n      Body: stream,\n      ContentType: contentType,\n      CacheControl: \"public, max-age=31536000\",\n    },\n    queueSize: 4,\n    partSize: 1024 * 1024 * 10,\n  });\n\n  await upload.done();\n  \n  // Return clean API URL instead of iDrive URL\n  const videoUrl = `/api/videos/stream/${encodeURIComponent(key)}`;\n\n  return {\n    videoUrl,\n    key,\n    storageKey: key,\n  };\n}\n\n/**\n * Get video from iDrive E2 storage\n */\nexport async function getVideoFromStorage(\n  key: string,\n  range?: string\n): Promise<{ stream: Readable; contentLength: number; contentType: string; contentRange?: string }> {\n  const command = new GetObjectCommand({\n    Bucket: BUCKET_NAME,\n    Key: key,\n    Range: range,\n  });\n\n  const response = await s3Client.send(command);\n\n  if (!response.Body) {\n    throw new Error(\"No video data returned from storage\");\n  }\n\n  return {\n    stream: response.Body as Readable,\n    contentLength: response.ContentLength || 0,\n    contentType: response.ContentType || \"video/mp4\",\n    contentRange: response.ContentRange,\n  };\n}\n\n/**\n * Get thumbnail from iDrive E2 storage\n */\nexport async function getThumbnailFromStorage(\n  key: string\n): Promise<{ stream: Readable; contentLength: number; contentType: string }> {\n  const command = new GetObjectCommand({\n    Bucket: BUCKET_NAME,\n    Key: key,\n  });\n\n  const response = await s3Client.send(command);\n\n  if (!response.Body) {\n    throw new Error(\"No thumbnail data returned from storage\");\n  }\n\n  return {\n    stream: response.Body as Readable,\n    contentLength: response.ContentLength || 0,\n    contentType: response.ContentType || \"image/jpeg\",\n  };\n}\n\n/**\n * Check if storage is configured\n */\nexport function isStorageConfigured(): boolean {\n  return !!(\n    process.env.IDRIVE_ENDPOINT &&\n    process.env.IDRIVE_ACCESS_KEY &&\n    process.env.IDRIVE_SECRET_KEY &&\n    process.env.IDRIVE_BUCKET\n  );\n}\n\n/**\n * Generate pre-signed URL for direct upload to iDrive E2\n * This allows browser to upload directly without going through server RAM\n */\nexport async function generatePresignedUploadUrl(\n  fileName: string,\n  contentType: string = \"video/mp4\",\n  fileType: 'video' | 'thumbnail' = 'video'\n): Promise<{ uploadUrl: string; key: string; expiresIn: number }> {\n  const timestamp = Date.now();\n  const sanitizedFileName = fileName.replace(/[^a-zA-Z0-9.-]/g, '_');\n  const key = fileType === 'video' \n    ? `videos/${timestamp}-${sanitizedFileName}`\n    : `thumbnails/${timestamp}-${sanitizedFileName}`;\n  \n  const command = new PutObjectCommand({\n    Bucket: BUCKET_NAME,\n    Key: key,\n    ContentType: contentType,\n    CacheControl: \"public, max-age=31536000\",\n  });\n\n  // Generate URL valid for 1 hour\n  const expiresIn = 3600;\n  const uploadUrl = await getSignedUrl(s3Client, command, { expiresIn });\n\n  console.log(`Generated pre-signed upload URL for: ${key} (expires in ${expiresIn}s)`);\n\n  return {\n    uploadUrl,\n    key,\n    expiresIn\n  };\n}\n","size_bytes":6702},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/pages/WatchLater.tsx":{"content":"import { Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function WatchLater() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Clock className=\"h-6 w-6\" />\n            Watch Later\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">Videos saved for later viewing</p>\n        </div>\n        <Button variant=\"outline\" size=\"sm\">\n          Clear All\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12 border border-dashed border-border rounded-lg\">\n        <Clock className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n        <p className=\"text-muted-foreground mb-2\">No videos saved yet</p>\n        <p className=\"text-sm text-muted-foreground\">Save videos to watch them later</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":950},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport TopNavigation from \"./TopNavigation\";\nimport Sidebar from \"./Sidebar\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { sidebarCollapsed } = useAppStore();\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground overflow-x-hidden\">\n      <TopNavigation />\n      <div className=\"flex pt-14\">\n        <Sidebar />\n        <main className={cn(\n          \"flex-1 p-3 sm:p-4 md:p-6 transition-all duration-300 w-full max-w-full overflow-x-hidden\",\n          sidebarCollapsed ? \"md:ml-20\" : \"md:ml-60\"\n        )}>\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":793},"client/src/pages/Location.tsx":{"content":"import { MapPin, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface LocationOption {\n  code: string;\n  name: string;\n}\n\nconst countries: LocationOption[] = [\n  { code: \"IN\", name: \"India\" },\n  { code: \"US\", name: \"United States\" },\n  { code: \"GB\", name: \"United Kingdom\" },\n  { code: \"CA\", name: \"Canada\" },\n  { code: \"AU\", name: \"Australia\" },\n  { code: \"DE\", name: \"Germany\" },\n  { code: \"FR\", name: \"France\" },\n  { code: \"JP\", name: \"Japan\" },\n  { code: \"BR\", name: \"Brazil\" },\n  { code: \"MX\", name: \"Mexico\" },\n  { code: \"ES\", name: \"Spain\" },\n  { code: \"IT\", name: \"Italy\" },\n  { code: \"RU\", name: \"Russia\" },\n  { code: \"CN\", name: \"China\" },\n  { code: \"KR\", name: \"South Korea\" }\n];\n\nconst indianStates: LocationOption[] = [\n  { code: \"AN\", name: \"Andaman and Nicobar Islands\" },\n  { code: \"AP\", name: \"Andhra Pradesh\" },\n  { code: \"AR\", name: \"Arunachal Pradesh\" },\n  { code: \"AS\", name: \"Assam\" },\n  { code: \"BR\", name: \"Bihar\" },\n  { code: \"CH\", name: \"Chandigarh\" },\n  { code: \"CT\", name: \"Chhattisgarh\" },\n  { code: \"DN\", name: \"Dadra and Nagar Haveli\" },\n  { code: \"DD\", name: \"Daman and Diu\" },\n  { code: \"DL\", name: \"Delhi\" },\n  { code: \"GA\", name: \"Goa\" },\n  { code: \"GJ\", name: \"Gujarat\" },\n  { code: \"HR\", name: \"Haryana\" },\n  { code: \"HP\", name: \"Himachal Pradesh\" },\n  { code: \"JK\", name: \"Jammu and Kashmir\" },\n  { code: \"JH\", name: \"Jharkhand\" },\n  { code: \"KA\", name: \"Karnataka\" },\n  { code: \"KL\", name: \"Kerala\" },\n  { code: \"LA\", name: \"Ladakh\" },\n  { code: \"LD\", name: \"Lakshadweep\" },\n  { code: \"MP\", name: \"Madhya Pradesh\" },\n  { code: \"MH\", name: \"Maharashtra\" },\n  { code: \"MN\", name: \"Manipur\" },\n  { code: \"ML\", name: \"Meghalaya\" },\n  { code: \"MZ\", name: \"Mizoram\" },\n  { code: \"NL\", name: \"Nagaland\" },\n  { code: \"OR\", name: \"Odisha\" },\n  { code: \"PY\", name: \"Puducherry\" },\n  { code: \"PB\", name: \"Punjab\" },\n  { code: \"RJ\", name: \"Rajasthan\" },\n  { code: \"SK\", name: \"Sikkim\" },\n  { code: \"TN\", name: \"Tamil Nadu\" },\n  { code: \"TG\", name: \"Telangana\" },\n  { code: \"TR\", name: \"Tripura\" },\n  { code: \"UP\", name: \"Uttar Pradesh\" },\n  { code: \"UT\", name: \"Uttarakhand\" },\n  { code: \"WB\", name: \"West Bengal\" }\n];\n\nexport default function Location() {\n  const [selectedCountry, setSelectedCountry] = useState(\"IN\");\n  const [selectedState, setSelectedState] = useState(\"DL\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const filteredCountries = countries.filter((country) =>\n    country.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const filteredStates = indianStates.filter((state) =>\n    state.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Location</h1>\n        <p className=\"text-muted-foreground\">\n          Select your country and region to get personalized content\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"country\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n          <TabsTrigger value=\"country\">Country</TabsTrigger>\n          <TabsTrigger value=\"state\">Indian States</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"country\" className=\"space-y-4\">\n          <Input\n            type=\"text\"\n            placeholder=\"Search countries...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n\n          <div className=\"space-y-2 max-h-[500px] overflow-y-auto pr-2\">\n            {filteredCountries.map((country) => (\n              <div\n                key={country.code}\n                className={`p-4 rounded-lg border cursor-pointer transition-colors hover:bg-muted/50 ${\n                  selectedCountry === country.code ? \"bg-muted border-primary\" : \"\"\n                }`}\n                onClick={() => setSelectedCountry(country.code)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n                    <span className=\"font-medium\">{country.name}</span>\n                  </div>\n                  {selectedCountry === country.code && (\n                    <Check className=\"h-5 w-5 text-primary\" />\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"state\" className=\"space-y-4\">\n          <Input\n            type=\"text\"\n            placeholder=\"Search states...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n\n          <div className=\"space-y-2 max-h-[500px] overflow-y-auto pr-2\">\n            {filteredStates.map((state) => (\n              <div\n                key={state.code}\n                className={`p-4 rounded-lg border cursor-pointer transition-colors hover:bg-muted/50 ${\n                  selectedState === state.code ? \"bg-muted border-primary\" : \"\"\n                }`}\n                onClick={() => setSelectedState(state.code)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n                    <span className=\"font-medium\">{state.name}</span>\n                  </div>\n                  {selectedState === state.code && (\n                    <Check className=\"h-5 w-5 text-primary\" />\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      <div className=\"pt-6 border-t mt-6\">\n        <Button>Save Changes</Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5989},"server/storage.ts":{"content":"import { type User, type InsertUser, type UpsertUser, type Channel, type InsertChannel, type Video, type InsertVideo, type Space, type InsertSpace, type Subscription, type InsertSubscription, type Comment, type InsertComment, type Like, type InsertLike, type WatchHistory, type InsertWatchHistory, type Playlist, type InsertPlaylist, type PlaylistVideo, type InsertPlaylistVideo, type Notification, type InsertNotification, type VideoWithChannel, type SpaceWithChannels } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Channel methods\n  getChannel(id: string): Promise<Channel | undefined>;\n  getChannelByUsername(username: string): Promise<Channel | undefined>;\n  getChannelByUserId(userId: string): Promise<Channel | undefined>;\n  getAllChannels(): Promise<Channel[]>;\n  createChannel(channel: InsertChannel): Promise<Channel>;\n  updateChannel(id: string, updates: Partial<Channel>): Promise<Channel | undefined>;\n\n  // Video methods\n  getVideo(id: string): Promise<Video | undefined>;\n  getVideos(limit?: number, category?: string): Promise<VideoWithChannel[]>;\n  getShorts(): Promise<VideoWithChannel[]>;\n  getVideosByChannel(channelId: string): Promise<VideoWithChannel[]>;\n  getVideosByChannels(channelIds: string[]): Promise<VideoWithChannel[]>;\n  createVideo(video: InsertVideo): Promise<Video>;\n  updateVideo(id: string, updates: Partial<Video>): Promise<Video | undefined>;\n  deleteVideo(id: string): Promise<boolean>;\n  searchVideos(query: string): Promise<VideoWithChannel[]>;\n  incrementViewCount(videoId: string): Promise<boolean>;\n\n  // Space methods\n  getSpace(id: string): Promise<Space | undefined>;\n  getSpacesByUser(userId: string): Promise<SpaceWithChannels[]>;\n  createSpace(space: InsertSpace): Promise<Space>;\n  updateSpace(id: string, updates: Partial<Space>): Promise<Space | undefined>;\n  deleteSpace(id: string): Promise<boolean>;\n\n  // Subscription methods\n  getSubscriptions(userId: string): Promise<Subscription[]>;\n  getChannelSubscribers(channelId: string): Promise<Subscription[]>;\n  isSubscribed(userId: string, channelId: string): Promise<boolean>;\n  subscribe(subscription: InsertSubscription): Promise<Subscription>;\n  unsubscribe(userId: string, channelId: string): Promise<boolean>;\n\n  // Blocking methods\n  blockChannel(userId: string, channelId: string): Promise<boolean>;\n  unblockChannel(userId: string, channelId: string): Promise<boolean>;\n  getBlockedChannels(userId: string): Promise<Channel[]>;\n\n  // Comment methods\n  getComment(id: string): Promise<Comment | undefined>;\n  getCommentsByVideo(videoId: string, limit?: number, offset?: number, sortBy?: string): Promise<Comment[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n  updateComment(id: string, updates: Partial<Comment>): Promise<Comment | undefined>;\n  deleteComment(id: string): Promise<boolean>;\n  likeComment(commentId: string): Promise<boolean>;\n\n  // Like methods\n  toggleLike(like: InsertLike): Promise<Like | null>;\n  getLikeCounts(videoId: string): Promise<{ likes: number; dislikes: number }>;\n  getUserLike(userId: string, videoId: string): Promise<Like | undefined>;\n\n  // Watch History methods\n  addToWatchHistory(history: InsertWatchHistory): Promise<WatchHistory>;\n  getWatchHistory(userId: string, limit?: number, offset?: number): Promise<WatchHistory[]>;\n  clearWatchHistory(userId: string): Promise<boolean>;\n\n  // Playlist methods\n  getPlaylist(id: string): Promise<Playlist | undefined>;\n  getPlaylistsByUser(userId: string): Promise<Playlist[]>;\n  createPlaylist(playlist: InsertPlaylist): Promise<Playlist>;\n  updatePlaylist(id: string, updates: Partial<Playlist>): Promise<Playlist | undefined>;\n  deletePlaylist(id: string): Promise<boolean>;\n  addVideoToPlaylist(playlistVideo: InsertPlaylistVideo): Promise<PlaylistVideo>;\n  removeVideoFromPlaylist(playlistId: string, videoId: string): Promise<boolean>;\n  getPlaylistVideos(playlistId: string): Promise<PlaylistVideo[]>;\n\n  // Notification methods\n  getNotifications(userId: string, limit?: number): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<boolean>;\n  markAllNotificationsAsRead(userId: string): Promise<boolean>;\n  getUnreadCount(userId: string): Promise<number>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private channels: Map<string, Channel> = new Map();\n  private videos: Map<string, Video> = new Map();\n  private spaces: Map<string, Space> = new Map();\n  private subscriptions: Map<string, Subscription> = new Map();\n  private comments: Map<string, Comment> = new Map();\n  private likes: Map<string, Like> = new Map();\n  private watchHistory: Map<string, WatchHistory> = new Map();\n  private playlists: Map<string, Playlist> = new Map();\n  private playlistVideos: Map<string, PlaylistVideo> = new Map();\n  private notifications: Map<string, Notification> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // No initial seed data - clean start\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      personalMode: false, \n      blockedChannels: [],\n      username: insertUser.username ?? null,\n      email: insertUser.email ?? null,\n      password: insertUser.password ?? null,\n      firstName: insertUser.firstName ?? null,\n      lastName: insertUser.lastName ?? null,\n      profileImageUrl: insertUser.profileImageUrl ?? null,\n      authProvider: insertUser.authProvider ?? \"email\",\n      oauthId: insertUser.oauthId ?? null,\n      isVerified: insertUser.isVerified ?? false,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Channel methods\n  async getChannel(id: string): Promise<Channel | undefined> {\n    return this.channels.get(id);\n  }\n\n  async getChannelByUsername(username: string): Promise<Channel | undefined> {\n    return Array.from(this.channels.values()).find(channel => channel.username === username);\n  }\n\n  async getChannelByUserId(userId: string): Promise<Channel | undefined> {\n    return Array.from(this.channels.values()).find(channel => channel.userId === userId);\n  }\n\n  async getAllChannels(): Promise<Channel[]> {\n    return Array.from(this.channels.values());\n  }\n\n  async createChannel(insertChannel: InsertChannel): Promise<Channel> {\n    const id = randomUUID();\n    const channel: Channel = { \n      ...insertChannel, \n      id, \n      subscribers: 0, \n      verified: false,\n      description: insertChannel.description ?? null,\n      avatar: insertChannel.avatar ?? null,\n      createdAt: new Date()\n    };\n    this.channels.set(id, channel);\n    return channel;\n  }\n\n  async updateChannel(id: string, updates: Partial<Channel>): Promise<Channel | undefined> {\n    const channel = this.channels.get(id);\n    if (!channel) return undefined;\n    \n    const updatedChannel = { ...channel, ...updates };\n    this.channels.set(id, updatedChannel);\n    return updatedChannel;\n  }\n\n  // Video methods\n  async getVideo(id: string): Promise<Video | undefined> {\n    return this.videos.get(id);\n  }\n\n  async getVideos(limit?: number, category?: string): Promise<VideoWithChannel[]> {\n    let videos = Array.from(this.videos.values());\n    \n    if (category) {\n      videos = videos.filter(video => video.category === category);\n    }\n    \n    if (limit) {\n      videos = videos.slice(0, limit);\n    }\n\n    return videos.map(video => ({\n      ...video,\n      channel: this.channels.get(video.channelId)!\n    }));\n  }\n\n  async getShorts(): Promise<VideoWithChannel[]> {\n    const shorts = Array.from(this.videos.values())\n      .filter(video => video.isShorts === true)\n      .sort((a, b) => {\n        const dateA = a.uploadedAt ? new Date(a.uploadedAt).getTime() : 0;\n        const dateB = b.uploadedAt ? new Date(b.uploadedAt).getTime() : 0;\n        return dateB - dateA;\n      });\n\n    return shorts.map(video => ({\n      ...video,\n      channel: this.channels.get(video.channelId)!\n    }));\n  }\n\n  async getVideosByChannel(channelId: string): Promise<VideoWithChannel[]> {\n    const videos = Array.from(this.videos.values()).filter(video => video.channelId === channelId);\n    return videos.map(video => ({\n      ...video,\n      channel: this.channels.get(video.channelId)!\n    }));\n  }\n\n  async getVideosByChannels(channelIds: string[]): Promise<VideoWithChannel[]> {\n    const videos = Array.from(this.videos.values()).filter(video => channelIds.includes(video.channelId));\n    return videos.map(video => ({\n      ...video,\n      channel: this.channels.get(video.channelId)!\n    }));\n  }\n\n  async createVideo(insertVideo: InsertVideo): Promise<Video> {\n    const id = randomUUID();\n    const video: Video = { \n      ...insertVideo, \n      id, \n      views: 0, \n      uploadedAt: new Date(), \n      isLive: false,\n      isShorts: insertVideo.isShorts ?? false,\n      description: insertVideo.description ?? null,\n      category: insertVideo.category ?? null,\n      storageKey: insertVideo.storageKey ?? null,\n      visibility: insertVideo.visibility ?? \"public\"\n    };\n    this.videos.set(id, video);\n    return video;\n  }\n\n  async searchVideos(query: string): Promise<VideoWithChannel[]> {\n    const videos = Array.from(this.videos.values()).filter(video => \n      video.title.toLowerCase().includes(query.toLowerCase()) ||\n      video.description?.toLowerCase().includes(query.toLowerCase())\n    );\n    \n    return videos.map(video => ({\n      ...video,\n      channel: this.channels.get(video.channelId)!\n    }));\n  }\n\n  // Space methods\n  async getSpace(id: string): Promise<Space | undefined> {\n    return this.spaces.get(id);\n  }\n\n  async getSpacesByUser(userId: string): Promise<SpaceWithChannels[]> {\n    const userSpaces = Array.from(this.spaces.values()).filter(space => space.userId === userId);\n    \n    return userSpaces.map(space => ({\n      ...space,\n      channels: (space.channelIds || []).map(id => this.channels.get(id)!).filter(Boolean),\n      videoCount: Array.from(this.videos.values()).filter(video => (space.channelIds || []).includes(video.channelId)).length\n    }));\n  }\n\n  async createSpace(insertSpace: InsertSpace): Promise<Space> {\n    const id = randomUUID();\n    const space: Space = { \n      ...insertSpace, \n      id, \n      channelIds: [],\n      description: insertSpace.description ?? null,\n      icon: insertSpace.icon ?? null,\n      color: insertSpace.color ?? null\n    };\n    this.spaces.set(id, space);\n    return space;\n  }\n\n  async updateSpace(id: string, updates: Partial<Space>): Promise<Space | undefined> {\n    const space = this.spaces.get(id);\n    if (!space) return undefined;\n    \n    const updatedSpace = { ...space, ...updates };\n    this.spaces.set(id, updatedSpace);\n    return updatedSpace;\n  }\n\n  async deleteSpace(id: string): Promise<boolean> {\n    return this.spaces.delete(id);\n  }\n\n  // Subscription methods\n  async getSubscriptions(userId: string): Promise<Subscription[]> {\n    return Array.from(this.subscriptions.values()).filter(sub => sub.userId === userId);\n  }\n\n  async getChannelSubscribers(channelId: string): Promise<Subscription[]> {\n    return Array.from(this.subscriptions.values()).filter(sub => sub.channelId === channelId);\n  }\n\n  async isSubscribed(userId: string, channelId: string): Promise<boolean> {\n    return Array.from(this.subscriptions.values()).some(sub => \n      sub.userId === userId && sub.channelId === channelId\n    );\n  }\n\n  async subscribe(insertSubscription: InsertSubscription): Promise<Subscription> {\n    const id = randomUUID();\n    const subscription: Subscription = { ...insertSubscription, id };\n    this.subscriptions.set(id, subscription);\n    return subscription;\n  }\n\n  async unsubscribe(userId: string, channelId: string): Promise<boolean> {\n    const subscription = Array.from(this.subscriptions.values()).find(sub => \n      sub.userId === userId && sub.channelId === channelId\n    );\n    \n    if (subscription) {\n      return this.subscriptions.delete(subscription.id);\n    }\n    return false;\n  }\n\n  // Blocking methods\n  async blockChannel(userId: string, channelId: string): Promise<boolean> {\n    const user = this.users.get(userId);\n    if (!user) return false;\n    \n    const blockedChannels = user.blockedChannels || [];\n    if (!blockedChannels.includes(channelId)) {\n      blockedChannels.push(channelId);\n      user.blockedChannels = blockedChannels;\n      this.users.set(userId, user);\n    }\n    return true;\n  }\n\n  async unblockChannel(userId: string, channelId: string): Promise<boolean> {\n    const user = this.users.get(userId);\n    if (!user) return false;\n    \n    user.blockedChannels = (user.blockedChannels || []).filter(id => id !== channelId);\n    this.users.set(userId, user);\n    return true;\n  }\n\n  async getBlockedChannels(userId: string): Promise<Channel[]> {\n    const user = this.users.get(userId);\n    if (!user) return [];\n    \n    return (user.blockedChannels || []).map(id => this.channels.get(id)!).filter(Boolean);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = this.users.get(userData.id ?? '');\n    if (existingUser && userData.id) {\n      const updatedUser = { ...existingUser, ...userData, id: userData.id, updatedAt: new Date() };\n      this.users.set(userData.id, updatedUser);\n      return updatedUser;\n    }\n    const id = userData.id ?? randomUUID();\n    const newUser: User = { \n      id,\n      username: userData.username ?? null,\n      email: userData.email ?? null,\n      password: userData.password ?? null,\n      firstName: userData.firstName ?? null,\n      lastName: userData.lastName ?? null,\n      profileImageUrl: userData.profileImageUrl ?? null,\n      personalMode: userData.personalMode ?? false, \n      blockedChannels: userData.blockedChannels ?? [],\n      authProvider: userData.authProvider ?? \"email\",\n      oauthId: userData.oauthId ?? null,\n      isVerified: userData.isVerified ?? false,\n      createdAt: userData.createdAt ?? new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, newUser);\n    return newUser;\n  }\n\n  async incrementViewCount(videoId: string): Promise<boolean> {\n    const video = this.videos.get(videoId);\n    if (!video) return false;\n    \n    video.views = (video.views || 0) + 1;\n    this.videos.set(videoId, video);\n    return true;\n  }\n\n  async getComment(id: string): Promise<Comment | undefined> {\n    return this.comments.get(id);\n  }\n\n  async getCommentsByVideo(videoId: string, limit: number = 50, offset: number = 0, sortBy: string = 'createdAt'): Promise<Comment[]> {\n    let comments = Array.from(this.comments.values()).filter(comment => comment.videoId === videoId);\n    \n    if (sortBy === 'likes') {\n      comments.sort((a, b) => (b.likes || 0) - (a.likes || 0));\n    } else {\n      comments.sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n    }\n    \n    return comments.slice(offset, offset + limit);\n  }\n\n  async createComment(insertComment: InsertComment): Promise<Comment> {\n    const id = randomUUID();\n    const comment: Comment = { \n      ...insertComment,\n      id,\n      parentId: insertComment.parentId ?? null,\n      likes: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.comments.set(id, comment);\n    return comment;\n  }\n\n  async updateComment(id: string, updates: Partial<Comment>): Promise<Comment | undefined> {\n    const comment = this.comments.get(id);\n    if (!comment) return undefined;\n    \n    const updatedComment = { ...comment, ...updates, updatedAt: new Date() };\n    this.comments.set(id, updatedComment);\n    return updatedComment;\n  }\n\n  async deleteComment(id: string): Promise<boolean> {\n    return this.comments.delete(id);\n  }\n\n  async likeComment(commentId: string): Promise<boolean> {\n    const comment = this.comments.get(commentId);\n    if (!comment) return false;\n    \n    comment.likes = (comment.likes || 0) + 1;\n    this.comments.set(commentId, comment);\n    return true;\n  }\n\n  async toggleLike(insertLike: InsertLike): Promise<Like | null> {\n    const existingLike = Array.from(this.likes.values()).find(\n      like => like.userId === insertLike.userId && like.videoId === insertLike.videoId\n    );\n\n    if (existingLike) {\n      if (existingLike.type === insertLike.type) {\n        this.likes.delete(existingLike.id);\n        return null;\n      } else {\n        existingLike.type = insertLike.type;\n        this.likes.set(existingLike.id, existingLike);\n        return existingLike;\n      }\n    }\n\n    const id = randomUUID();\n    const like: Like = { ...insertLike, id, createdAt: new Date() };\n    this.likes.set(id, like);\n    return like;\n  }\n\n  async getLikeCounts(videoId: string): Promise<{ likes: number; dislikes: number }> {\n    const videoLikes = Array.from(this.likes.values()).filter(like => like.videoId === videoId);\n    const likes = videoLikes.filter(like => like.type === 'like').length;\n    const dislikes = videoLikes.filter(like => like.type === 'dislike').length;\n    return { likes, dislikes };\n  }\n\n  async getUserLike(userId: string, videoId: string): Promise<Like | undefined> {\n    return Array.from(this.likes.values()).find(\n      like => like.userId === userId && like.videoId === videoId\n    );\n  }\n\n  async addToWatchHistory(insertHistory: InsertWatchHistory): Promise<WatchHistory> {\n    const id = randomUUID();\n    const history: WatchHistory = { \n      ...insertHistory, \n      id, \n      watchedAt: new Date()\n    };\n    this.watchHistory.set(id, history);\n    return history;\n  }\n\n  async getWatchHistory(userId: string, limit: number = 50, offset: number = 0): Promise<WatchHistory[]> {\n    const history = Array.from(this.watchHistory.values())\n      .filter(h => h.userId === userId)\n      .sort((a, b) => b.watchedAt!.getTime() - a.watchedAt!.getTime());\n    \n    return history.slice(offset, offset + limit);\n  }\n\n  async clearWatchHistory(userId: string): Promise<boolean> {\n    const userHistory = Array.from(this.watchHistory.entries())\n      .filter(([_, h]) => h.userId === userId);\n    \n    userHistory.forEach(([id, _]) => this.watchHistory.delete(id));\n    return true;\n  }\n\n  async getPlaylist(id: string): Promise<Playlist | undefined> {\n    return this.playlists.get(id);\n  }\n\n  async getPlaylistsByUser(userId: string): Promise<Playlist[]> {\n    return Array.from(this.playlists.values()).filter(playlist => playlist.userId === userId);\n  }\n\n  async createPlaylist(insertPlaylist: InsertPlaylist): Promise<Playlist> {\n    const id = randomUUID();\n    const playlist: Playlist = { \n      ...insertPlaylist,\n      id,\n      description: insertPlaylist.description ?? null,\n      isPublic: insertPlaylist.isPublic ?? false,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.playlists.set(id, playlist);\n    return playlist;\n  }\n\n  async updatePlaylist(id: string, updates: Partial<Playlist>): Promise<Playlist | undefined> {\n    const playlist = this.playlists.get(id);\n    if (!playlist) return undefined;\n    \n    const updatedPlaylist = { ...playlist, ...updates, updatedAt: new Date() };\n    this.playlists.set(id, updatedPlaylist);\n    return updatedPlaylist;\n  }\n\n  async deletePlaylist(id: string): Promise<boolean> {\n    const deleted = this.playlists.delete(id);\n    if (deleted) {\n      const playlistVideosToDelete = Array.from(this.playlistVideos.entries())\n        .filter(([_, pv]) => pv.playlistId === id);\n      playlistVideosToDelete.forEach(([id, _]) => this.playlistVideos.delete(id));\n    }\n    return deleted;\n  }\n\n  async addVideoToPlaylist(insertPlaylistVideo: InsertPlaylistVideo): Promise<PlaylistVideo> {\n    const id = randomUUID();\n    const playlistVideo: PlaylistVideo = { \n      ...insertPlaylistVideo, \n      id, \n      addedAt: new Date()\n    };\n    this.playlistVideos.set(id, playlistVideo);\n    return playlistVideo;\n  }\n\n  async removeVideoFromPlaylist(playlistId: string, videoId: string): Promise<boolean> {\n    const playlistVideo = Array.from(this.playlistVideos.entries()).find(\n      ([_, pv]) => pv.playlistId === playlistId && pv.videoId === videoId\n    );\n    \n    if (playlistVideo) {\n      return this.playlistVideos.delete(playlistVideo[0]);\n    }\n    return false;\n  }\n\n  async getPlaylistVideos(playlistId: string): Promise<PlaylistVideo[]> {\n    return Array.from(this.playlistVideos.values())\n      .filter(pv => pv.playlistId === playlistId)\n      .sort((a, b) => a.position - b.position);\n  }\n}\n\nimport { db } from \"./db\";\nimport { users, channels, videos, spaces, subscriptions, comments, likes, watchHistory, playlists, playlistVideos, notifications } from \"@shared/schema\";\nimport { eq, and, or, ilike, inArray, sql, desc } from \"drizzle-orm\";\n\nexport class DbStorage implements IStorage {\n  private normalizeArray<T>(result: T[] | null): T[] {\n    return result || [];\n  }\n\n  private isNeonNullError(error: unknown): boolean {\n    return error instanceof TypeError && \n           (error.message.includes(\"Cannot read properties of null\") ||\n            error.message.includes(\"Cannot read property 'map' of null\"));\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const result = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result[0];\n  }\n\n  // Channel methods\n  async getChannel(id: string): Promise<Channel | undefined> {\n    const result = await db.select().from(channels).where(eq(channels.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getChannelByUsername(username: string): Promise<Channel | undefined> {\n    const result = await db.select().from(channels).where(eq(channels.username, username)).limit(1);\n    return result[0];\n  }\n\n  async getChannelByUserId(userId: string): Promise<Channel | undefined> {\n    const result = await db.select().from(channels).where(eq(channels.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async getAllChannels(): Promise<Channel[]> {\n    try {\n      const result = await db.select().from(channels);\n      return this.normalizeArray(result);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getAllChannels, returning empty array\");\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  async createChannel(insertChannel: InsertChannel): Promise<Channel> {\n    const result = await db.insert(channels).values(insertChannel).returning();\n    return result[0];\n  }\n\n  async updateChannel(id: string, updates: Partial<Channel>): Promise<Channel | undefined> {\n    const result = await db.update(channels).set(updates).where(eq(channels.id, id)).returning();\n    return result[0];\n  }\n\n  // Video methods\n  async getVideo(id: string): Promise<Video | undefined> {\n    const result = await db.select().from(videos).where(eq(videos.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getVideos(limit?: number, category?: string): Promise<VideoWithChannel[]> {\n    let query = db\n      .select({\n        video: videos,\n        channel: channels,\n      })\n      .from(videos)\n      .innerJoin(channels, eq(videos.channelId, channels.id))\n      .orderBy(sql`${videos.uploadedAt} DESC`);\n\n    if (category) {\n      query = query.where(eq(videos.category, category)) as any;\n    }\n\n    if (limit) {\n      query = query.limit(limit) as any;\n    }\n\n    const results = await query;\n    return results.map(r => ({ ...r.video, channel: r.channel }));\n  }\n\n  async getShorts(): Promise<VideoWithChannel[]> {\n    const results = await db\n      .select({\n        video: videos,\n        channel: channels,\n      })\n      .from(videos)\n      .innerJoin(channels, eq(videos.channelId, channels.id))\n      .where(eq(videos.isShorts, true))\n      .orderBy(sql`${videos.uploadedAt} DESC`);\n\n    return results.map(r => ({ ...r.video, channel: r.channel }));\n  }\n\n  async getVideosByChannel(channelId: string): Promise<VideoWithChannel[]> {\n    const results = await db\n      .select({\n        video: videos,\n        channel: channels,\n      })\n      .from(videos)\n      .innerJoin(channels, eq(videos.channelId, channels.id))\n      .where(eq(videos.channelId, channelId))\n      .orderBy(sql`${videos.uploadedAt} DESC`);\n\n    return results.map(r => ({ ...r.video, channel: r.channel }));\n  }\n\n  async getVideosByChannels(channelIds: string[]): Promise<VideoWithChannel[]> {\n    if (channelIds.length === 0) return [];\n\n    const results = await db\n      .select({\n        video: videos,\n        channel: channels,\n      })\n      .from(videos)\n      .innerJoin(channels, eq(videos.channelId, channels.id))\n      .where(inArray(videos.channelId, channelIds))\n      .orderBy(sql`${videos.uploadedAt} DESC`);\n\n    return results.map(r => ({ ...r.video, channel: r.channel }));\n  }\n\n  async createVideo(insertVideo: InsertVideo): Promise<Video> {\n    const result = await db.insert(videos).values(insertVideo).returning();\n    return result[0];\n  }\n\n  async updateVideo(id: string, updates: Partial<Video>): Promise<Video | undefined> {\n    const result = await db.update(videos).set(updates).where(eq(videos.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteVideo(id: string): Promise<boolean> {\n    const result = await db.delete(videos).where(eq(videos.id, id)).returning();\n    return result.length > 0;\n  }\n\n  async searchVideos(query: string): Promise<VideoWithChannel[]> {\n    const results = await db\n      .select({\n        video: videos,\n        channel: channels,\n      })\n      .from(videos)\n      .innerJoin(channels, eq(videos.channelId, channels.id))\n      .where(\n        or(\n          ilike(videos.title, `%${query}%`),\n          ilike(videos.description, `%${query}%`)\n        )\n      )\n      .orderBy(sql`${videos.uploadedAt} DESC`);\n\n    return results.map(r => ({ ...r.video, channel: r.channel }));\n  }\n\n  // Space methods\n  async getSpace(id: string): Promise<Space | undefined> {\n    const result = await db.select().from(spaces).where(eq(spaces.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getSpacesByUser(userId: string): Promise<SpaceWithChannels[]> {\n    let userSpaces: Space[];\n    try {\n      userSpaces = await db.select().from(spaces).where(eq(spaces.userId, userId));\n      userSpaces = this.normalizeArray(userSpaces);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getSpacesByUser, returning empty array\");\n        userSpaces = [];\n      } else {\n        throw error;\n      }\n    }\n\n    const spacesWithChannels = await Promise.all(\n      userSpaces.map(async (space) => {\n        const channelIds = space.channelIds || [];\n        let spaceChannels: Channel[];\n        try {\n          spaceChannels = channelIds.length > 0\n            ? await db.select().from(channels).where(inArray(channels.id, channelIds))\n            : [];\n          spaceChannels = this.normalizeArray(spaceChannels);\n        } catch (error) {\n          if (this.isNeonNullError(error)) {\n            console.log(\"Neon null result detected in getSpacesByUser channels, returning empty array\");\n            spaceChannels = [];\n          } else {\n            throw error;\n          }\n        }\n\n        const videoCount = channelIds.length > 0\n          ? await db.select({ count: sql<number>`count(*)` })\n              .from(videos)\n              .where(inArray(videos.channelId, channelIds))\n              .then(result => Number(result[0]?.count || 0))\n          : 0;\n\n        return {\n          ...space,\n          channels: spaceChannels,\n          videoCount,\n        };\n      })\n    );\n\n    return spacesWithChannels;\n  }\n\n  async createSpace(insertSpace: InsertSpace): Promise<Space> {\n    const result = await db.insert(spaces).values(insertSpace).returning();\n    return result[0];\n  }\n\n  async updateSpace(id: string, updates: Partial<Space>): Promise<Space | undefined> {\n    const result = await db.update(spaces).set(updates).where(eq(spaces.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteSpace(id: string): Promise<boolean> {\n    const result = await db.delete(spaces).where(eq(spaces.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Subscription methods\n  async getSubscriptions(userId: string): Promise<Subscription[]> {\n    try {\n      const result = await db.select().from(subscriptions).where(eq(subscriptions.userId, userId));\n      return this.normalizeArray(result);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getSubscriptions, returning empty array\");\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  async getChannelSubscribers(channelId: string): Promise<Subscription[]> {\n    try {\n      const result = await db.select().from(subscriptions).where(eq(subscriptions.channelId, channelId));\n      return this.normalizeArray(result);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getChannelSubscribers, returning empty array\");\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  async isSubscribed(userId: string, channelId: string): Promise<boolean> {\n    const result = await db\n      .select()\n      .from(subscriptions)\n      .where(and(eq(subscriptions.userId, userId), eq(subscriptions.channelId, channelId)))\n      .limit(1);\n    return result.length > 0;\n  }\n\n  async subscribe(insertSubscription: InsertSubscription): Promise<Subscription> {\n    const result = await db.insert(subscriptions).values(insertSubscription).returning();\n    return result[0];\n  }\n\n  async unsubscribe(userId: string, channelId: string): Promise<boolean> {\n    const result = await db\n      .delete(subscriptions)\n      .where(and(eq(subscriptions.userId, userId), eq(subscriptions.channelId, channelId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Blocking methods\n  async blockChannel(userId: string, channelId: string): Promise<boolean> {\n    const user = await this.getUser(userId);\n    if (!user) return false;\n\n    const blockedChannels = user.blockedChannels || [];\n    if (!blockedChannels.includes(channelId)) {\n      blockedChannels.push(channelId);\n      await this.updateUser(userId, { blockedChannels });\n    }\n    return true;\n  }\n\n  async unblockChannel(userId: string, channelId: string): Promise<boolean> {\n    const user = await this.getUser(userId);\n    if (!user) return false;\n\n    const blockedChannels = (user.blockedChannels || []).filter(id => id !== channelId);\n    await this.updateUser(userId, { blockedChannels });\n    return true;\n  }\n\n  async getBlockedChannels(userId: string): Promise<Channel[]> {\n    const user = await this.getUser(userId);\n    if (!user || !user.blockedChannels || user.blockedChannels.length === 0) return [];\n\n    try {\n      const result = await db.select().from(channels).where(inArray(channels.id, user.blockedChannels));\n      return this.normalizeArray(result);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getBlockedChannels, returning empty array\");\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  async incrementViewCount(videoId: string): Promise<boolean> {\n    const result = await db\n      .update(videos)\n      .set({ views: sql`${videos.views} + 1` })\n      .where(eq(videos.id, videoId))\n      .returning();\n    return result.length > 0;\n  }\n\n  async getComment(id: string): Promise<Comment | undefined> {\n    const result = await db.select().from(comments).where(eq(comments.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getCommentsByVideo(videoId: string, limit: number = 50, offset: number = 0, sortBy: string = 'createdAt'): Promise<Comment[]> {\n    try {\n      let query = db\n        .select()\n        .from(comments)\n        .where(eq(comments.videoId, videoId))\n        .limit(limit)\n        .offset(offset);\n\n      if (sortBy === 'likes') {\n        query = query.orderBy(desc(comments.likes)) as any;\n      } else {\n        query = query.orderBy(desc(comments.createdAt)) as any;\n      }\n\n      const result = await query;\n      return this.normalizeArray(result);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getCommentsByVideo, returning empty array\");\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  async createComment(insertComment: InsertComment): Promise<Comment> {\n    const result = await db.insert(comments).values(insertComment).returning();\n    return result[0];\n  }\n\n  async updateComment(id: string, updates: Partial<Comment>): Promise<Comment | undefined> {\n    const result = await db\n      .update(comments)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(comments.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteComment(id: string): Promise<boolean> {\n    const result = await db.delete(comments).where(eq(comments.id, id)).returning();\n    return result.length > 0;\n  }\n\n  async likeComment(commentId: string): Promise<boolean> {\n    const result = await db\n      .update(comments)\n      .set({ likes: sql`${comments.likes} + 1` })\n      .where(eq(comments.id, commentId))\n      .returning();\n    return result.length > 0;\n  }\n\n  async toggleLike(insertLike: InsertLike): Promise<Like | null> {\n    const existingLike = await db\n      .select()\n      .from(likes)\n      .where(and(eq(likes.userId, insertLike.userId), eq(likes.videoId, insertLike.videoId)))\n      .limit(1);\n\n    if (existingLike.length > 0) {\n      const existing = existingLike[0];\n      if (existing.type === insertLike.type) {\n        await db\n          .delete(likes)\n          .where(and(eq(likes.userId, insertLike.userId), eq(likes.videoId, insertLike.videoId)));\n        return null;\n      } else {\n        const updated = await db\n          .update(likes)\n          .set({ type: insertLike.type })\n          .where(and(eq(likes.userId, insertLike.userId), eq(likes.videoId, insertLike.videoId)))\n          .returning();\n        return updated[0];\n      }\n    }\n\n    const result = await db.insert(likes).values(insertLike).returning();\n    return result[0];\n  }\n\n  async getLikeCounts(videoId: string): Promise<{ likes: number; dislikes: number }> {\n    const result = await db\n      .select({\n        type: likes.type,\n        count: sql<number>`count(*)`,\n      })\n      .from(likes)\n      .where(eq(likes.videoId, videoId))\n      .groupBy(likes.type);\n\n    const likesCount = result.find(r => r.type === 'like')?.count || 0;\n    const dislikesCount = result.find(r => r.type === 'dislike')?.count || 0;\n\n    return {\n      likes: Number(likesCount),\n      dislikes: Number(dislikesCount),\n    };\n  }\n\n  async getUserLike(userId: string, videoId: string): Promise<Like | undefined> {\n    const result = await db\n      .select()\n      .from(likes)\n      .where(and(eq(likes.userId, userId), eq(likes.videoId, videoId)))\n      .limit(1);\n    return result[0];\n  }\n\n  async addToWatchHistory(insertHistory: InsertWatchHistory): Promise<WatchHistory> {\n    const result = await db.insert(watchHistory).values(insertHistory).returning();\n    return result[0];\n  }\n\n  async getWatchHistory(userId: string, limit: number = 50, offset: number = 0): Promise<WatchHistory[]> {\n    try {\n      const result = await db\n        .select()\n        .from(watchHistory)\n        .where(eq(watchHistory.userId, userId))\n        .orderBy(desc(watchHistory.watchedAt))\n        .limit(limit)\n        .offset(offset);\n      return this.normalizeArray(result);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getWatchHistory, returning empty array\");\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  async clearWatchHistory(userId: string): Promise<boolean> {\n    const result = await db.delete(watchHistory).where(eq(watchHistory.userId, userId)).returning();\n    return result.length > 0;\n  }\n\n  async getPlaylist(id: string): Promise<Playlist | undefined> {\n    const result = await db.select().from(playlists).where(eq(playlists.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getPlaylistsByUser(userId: string): Promise<Playlist[]> {\n    try {\n      const result = await db.select().from(playlists).where(eq(playlists.userId, userId));\n      return this.normalizeArray(result);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getPlaylistsByUser, returning empty array\");\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  async createPlaylist(insertPlaylist: InsertPlaylist): Promise<Playlist> {\n    const result = await db.insert(playlists).values(insertPlaylist).returning();\n    return result[0];\n  }\n\n  async updatePlaylist(id: string, updates: Partial<Playlist>): Promise<Playlist | undefined> {\n    const result = await db\n      .update(playlists)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(playlists.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deletePlaylist(id: string): Promise<boolean> {\n    await db.delete(playlistVideos).where(eq(playlistVideos.playlistId, id));\n    const result = await db.delete(playlists).where(eq(playlists.id, id)).returning();\n    return result.length > 0;\n  }\n\n  async addVideoToPlaylist(insertPlaylistVideo: InsertPlaylistVideo): Promise<PlaylistVideo> {\n    const result = await db.insert(playlistVideos).values(insertPlaylistVideo).returning();\n    return result[0];\n  }\n\n  async removeVideoFromPlaylist(playlistId: string, videoId: string): Promise<boolean> {\n    const result = await db\n      .delete(playlistVideos)\n      .where(and(eq(playlistVideos.playlistId, playlistId), eq(playlistVideos.videoId, videoId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  async getPlaylistVideos(playlistId: string): Promise<PlaylistVideo[]> {\n    try {\n      const result = await db\n        .select()\n        .from(playlistVideos)\n        .where(eq(playlistVideos.playlistId, playlistId))\n        .orderBy(playlistVideos.position);\n      return this.normalizeArray(result);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getPlaylistVideos, returning empty array\");\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  async getNotifications(userId: string, limit: number = 50): Promise<Notification[]> {\n    try {\n      const result = await db\n        .select()\n        .from(notifications)\n        .where(eq(notifications.userId, userId))\n        .orderBy(desc(notifications.createdAt))\n        .limit(limit);\n      return this.normalizeArray(result);\n    } catch (error) {\n      if (this.isNeonNullError(error)) {\n        console.log(\"Neon null result detected in getNotifications, returning empty array\");\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const result = await db.insert(notifications).values(insertNotification).returning();\n    return result[0];\n  }\n\n  async markNotificationAsRead(id: string): Promise<boolean> {\n    const result = await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<boolean> {\n    const result = await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.userId, userId))\n      .returning();\n    return result.length > 0;\n  }\n\n  async getUnreadCount(userId: string): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(notifications)\n      .where(and(eq(notifications.userId, userId), eq(notifications.isRead, false)));\n    return result[0]?.count || 0;\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":42025},"client/src/pages/studio/Analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { TrendingUp, TrendingDown, Eye, Clock, Users } from \"lucide-react\";\n\nexport default function StudioAnalytics() {\n  const { user } = useAuth();\n\n  const { data: channel } = useQuery<any>({\n    queryKey: ['/api/users', user?.id, 'channel'],\n    queryFn: async () => {\n      const res = await fetch(`/api/users/${user?.id}/channel`);\n      if (!res.ok) return null;\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: videos = [] } = useQuery<any[]>({\n    queryKey: ['/api/videos'],\n    queryFn: async () => {\n      const res = await fetch('/api/videos');\n      if (!res.ok) return [];\n      return res.json();\n    },\n  });\n\n  const channelVideos = videos.filter((v: any) => v.channelId === channel?.id);\n  const totalViews = channelVideos.reduce((sum: number, v: any) => sum + (v.views || 0), 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold\">Channel analytics</h1>\n          <p className=\"text-muted-foreground mt-1\">Detailed performance metrics</p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-2 sm:gap-3 w-full sm:w-auto\">\n          <Select defaultValue=\"28\">\n            <SelectTrigger className=\"w-full sm:w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7\">Last 7 days</SelectItem>\n              <SelectItem value=\"28\">Last 28 days</SelectItem>\n              <SelectItem value=\"90\">Last 90 days</SelectItem>\n              <SelectItem value=\"365\">Last 365 days</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" className=\"hidden sm:inline-flex\">Advanced mode</Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"content\">Content</TabsTrigger>\n          <TabsTrigger value=\"audience\">Audience</TabsTrigger>\n          <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Main Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 sm:gap-4\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Views</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-end justify-between\">\n                  <div>\n                    <div className=\"text-3xl font-bold\">{totalViews.toLocaleString()}</div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">About the same as usual</p>\n                  </div>\n                  <TrendingUp className=\"h-6 w-6 text-green-500\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Watch time (hours)</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-end justify-between\">\n                  <div>\n                    <div className=\"text-3xl font-bold\">0.0</div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">No change from previous period</p>\n                  </div>\n                  <Clock className=\"h-6 w-6 text-blue-500\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Subscribers</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-end justify-between\">\n                  <div>\n                    <div className=\"text-3xl font-bold\">{channel?.subscriberCount || 0}</div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">+0 in last 28 days</p>\n                  </div>\n                  <Users className=\"h-6 w-6 text-purple-500\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Chart Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Your channel got {totalViews.toLocaleString()} views in the last 28 days</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center border-2 border-dashed rounded-lg\">\n                <div className=\"text-center text-muted-foreground\">\n                  <TrendingUp className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                  <p>Analytics chart will be displayed here</p>\n                  <p className=\"text-sm mt-1\">Views over time visualization</p>\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <Button variant=\"outline\">See more</Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Top Content */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Your top content in this period</CardTitle>\n              <CardDescription>Videos with the most views</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {channelVideos.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Content</TableHead>\n                        <TableHead className=\"text-right\">Duration</TableHead>\n                        <TableHead className=\"text-right\">Publish date</TableHead>\n                        <TableHead className=\"text-right\">Views</TableHead>\n                        <TableHead className=\"text-right\">Avg view duration</TableHead>\n                        <TableHead className=\"text-right\">Impressions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {channelVideos.slice(0, 10).map((video: any, index: number) => (\n                        <TableRow key={video.id}>\n                          <TableCell>\n                            <div className=\"flex items-center gap-3\">\n                              <span className=\"text-muted-foreground\">{index + 1}</span>\n                              <div className=\"relative w-20 h-12 bg-muted rounded overflow-hidden flex-shrink-0\">\n                                <img\n                                  src={video.thumbnail}\n                                  alt={video.title}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                              </div>\n                              <span className=\"font-medium line-clamp-1\">{video.title}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"text-right\">{video.duration}</TableCell>\n                          <TableCell className=\"text-right text-sm text-muted-foreground\">\n                            {new Date(video.createdAt).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell className=\"text-right font-medium\">{video.views || 0}</TableCell>\n                          <TableCell className=\"text-right\">\n                            {video.duration ? Math.floor(parseFloat(video.duration.split(':')[0]) * 60 * 0.5) + 's' : '0s'}\n                          </TableCell>\n                          <TableCell className=\"text-right\">{(video.views || 0) + Math.floor(Math.random() * 100)}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Eye className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                  <p>No content data available</p>\n                </div>\n              )}\n              {channelVideos.length > 0 && (\n                <div className=\"mt-4\">\n                  <Button variant=\"outline\">See more</Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Realtime */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Realtime</CardTitle>\n                <CardDescription>Updating live</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div>\n                  <div className=\"text-4xl font-bold\">{channel?.subscriberCount || 0}</div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">Subscribers</p>\n                </div>\n                <div className=\"mt-6\">\n                  <div className=\"text-2xl font-bold\">0</div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">Views - Last 48 hours</p>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" className=\"mt-4\">See live count</Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Top content</CardTitle>\n                <CardDescription>Views in the last 48 hours</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {channelVideos.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {channelVideos.slice(0, 3).map((video: any) => (\n                      <div key={video.id} className=\"flex items-center gap-3 p-2 rounded-lg hover:bg-muted\">\n                        <div className=\"relative w-16 h-10 bg-muted rounded overflow-hidden flex-shrink-0\">\n                          <img\n                            src={video.thumbnail}\n                            alt={video.title}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium truncate\">{video.title}</p>\n                          <p className=\"text-xs text-muted-foreground\">{video.views || 0} views</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-6 text-muted-foreground\">\n                    <p className=\"text-sm\">No recent content</p>\n                  </div>\n                )}\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-4\">See more</Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"content\">\n          <Card>\n            <CardContent className=\"py-16 text-center\">\n              <p className=\"text-muted-foreground\">Content analytics will be displayed here</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"audience\">\n          <Card>\n            <CardContent className=\"py-16 text-center\">\n              <p className=\"text-muted-foreground\">Audience analytics will be displayed here</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"trends\">\n          <Card>\n            <CardContent className=\"py-16 text-center\">\n              <p className=\"text-muted-foreground\">Trend analysis will be displayed here</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":12436},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    console.error(\"Error:\", err);\n    res.status(status).json({ message });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2229},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ShortsPlayer.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { \n  Heart, \n  ThumbsDown,\n  MessageCircle, \n  Share2, \n  MoreVertical, \n  Volume2, \n  VolumeX,\n  ChevronUp,\n  ChevronDown,\n  CheckCircle,\n  Repeat2,\n  X,\n  Play,\n  Pause\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { VideoWithChannel } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatViews } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface ShortsPlayerProps {\n  videos: VideoWithChannel[];\n  initialIndex?: number;\n  onClose?: () => void;\n}\n\nexport default function ShortsPlayer({ videos, initialIndex = 0, onClose }: ShortsPlayerProps) {\n  const [currentIndex, setCurrentIndex] = useState(initialIndex);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [showControls, setShowControls] = useState(true);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const controlsTimeoutRef = useRef<NodeJS.Timeout>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  const currentVideo = videos[currentIndex];\n\n  // Auto-hide controls after 3 seconds\n  useEffect(() => {\n    if (showControls) {\n      if (controlsTimeoutRef.current) {\n        clearTimeout(controlsTimeoutRef.current);\n      }\n      controlsTimeoutRef.current = setTimeout(() => {\n        setShowControls(false);\n      }, 3000);\n    }\n    return () => {\n      if (controlsTimeoutRef.current) {\n        clearTimeout(controlsTimeoutRef.current);\n      }\n    };\n  }, [showControls]);\n\n  // Handle video playback\n  useEffect(() => {\n    if (videoRef.current) {\n      if (isPlaying) {\n        videoRef.current.play().catch(console.error);\n      } else {\n        videoRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentIndex]);\n\n  // Auto-play on mount\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.play().catch(console.error);\n    }\n  }, [currentVideo]);\n\n  // Fetch video stats\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/videos\", currentVideo?.id, \"stats\"],\n    queryFn: async () => {\n      const res = await fetch(`/api/videos/${currentVideo.id}/stats`);\n      if (!res.ok) return { likes: 0, dislikes: 0, comments: 0 };\n      return res.json();\n    },\n    enabled: !!currentVideo,\n  });\n\n  // Check if user has liked/disliked the video\n  const { data: likeStatus } = useQuery({\n    queryKey: [\"/api/videos\", currentVideo?.id, \"like-status\"],\n    queryFn: async () => {\n      const res = await fetch(`/api/videos/${currentVideo.id}/like-status`);\n      if (!res.ok) return { hasLiked: false, hasDisliked: false };\n      return res.json();\n    },\n    enabled: !!currentVideo && !!user,\n  });\n\n  // Check subscription status\n  const { data: isSubscribed } = useQuery({\n    queryKey: [\"/api/subscriptions\", currentVideo?.channelId, \"status\"],\n    queryFn: async () => {\n      const res = await fetch(`/api/subscriptions/${currentVideo.channelId}/status`);\n      if (!res.ok) return false;\n      const data = await res.json();\n      return data.isSubscribed;\n    },\n    enabled: !!currentVideo && !!user,\n  });\n\n  // Like/dislike mutation\n  const likeMutation = useMutation({\n    mutationFn: async (type: \"like\" | \"dislike\" | \"none\") => {\n      const res = await fetch(`/api/videos/${currentVideo.id}/like`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ type }),\n      });\n      if (!res.ok) throw new Error(\"Failed to update reaction\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos\", currentVideo.id, \"like-status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/videos\", currentVideo.id, \"stats\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to react to videos\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Subscribe mutation\n  const subscribeMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch(`/api/subscriptions/${currentVideo.channelId}`, {\n        method: isSubscribed ? \"DELETE\" : \"POST\",\n      });\n      if (!res.ok) throw new Error(\"Failed to update subscription\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subscriptions\", currentVideo.channelId, \"status\"] });\n      toast({\n        title: isSubscribed ? \"Unsubscribed\" : \"Subscribed\",\n        description: isSubscribed \n          ? `Unsubscribed from ${currentVideo.channel.name}` \n          : `Subscribed to ${currentVideo.channel.name}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to subscribe\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLike = () => {\n    if (!user) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to like videos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    const newType = likeStatus?.hasLiked ? \"none\" : \"like\";\n    likeMutation.mutate(newType);\n  };\n\n  const handleDislike = () => {\n    if (!user) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to dislike videos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    const newType = likeStatus?.hasDisliked ? \"none\" : \"dislike\";\n    likeMutation.mutate(newType);\n  };\n\n  const handlePrevious = () => {\n    if (currentIndex > 0) {\n      setCurrentIndex(currentIndex - 1);\n      setIsPlaying(true);\n    }\n  };\n\n  const handleNext = () => {\n    if (currentIndex < videos.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n      setIsPlaying(true);\n    }\n  };\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n    setShowControls(true);\n  };\n\n  const togglePlayPause = () => {\n    setIsPlaying(!isPlaying);\n    setShowControls(true);\n  };\n\n  const handleShare = async () => {\n    const shareUrl = `${window.location.origin}/watch/${currentVideo.id}`;\n    \n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: currentVideo.title,\n          text: `Check out this short: ${currentVideo.title}`,\n          url: shareUrl,\n        });\n      } catch (err) {\n        console.log('Share cancelled');\n      }\n    } else {\n      navigator.clipboard.writeText(shareUrl);\n      toast({\n        title: \"Link Copied!\",\n        description: \"Short link has been copied to clipboard\",\n      });\n    }\n  };\n\n  const goToChannel = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setLocation(`/channel/${currentVideo.channelId}`);\n  };\n\n  // Touch handling for swipe\n  const touchStartY = useRef(0);\n  const touchEndY = useRef(0);\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    touchStartY.current = e.touches[0].clientY;\n  };\n\n  const handleTouchEnd = (e: React.TouchEvent) => {\n    touchEndY.current = e.changedTouches[0].clientY;\n    const diff = touchStartY.current - touchEndY.current;\n\n    if (Math.abs(diff) > 50) {\n      if (diff > 0) {\n        handleNext();\n      } else {\n        handlePrevious();\n      }\n    }\n  };\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === \"ArrowUp\") {\n        e.preventDefault();\n        handlePrevious();\n      } else if (e.key === \"ArrowDown\") {\n        e.preventDefault();\n        handleNext();\n      } else if (e.key === \" \") {\n        e.preventDefault();\n        togglePlayPause();\n      } else if (e.key === \"m\" || e.key === \"M\") {\n        e.preventDefault();\n        toggleMute();\n      } else if (e.key === \"Escape\") {\n        e.preventDefault();\n        onClose?.();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [currentIndex, isPlaying, isMuted, onClose]);\n\n  if (!currentVideo) {\n    return (\n      <div className=\"fixed inset-0 bg-black flex items-center justify-center z-50\">\n        <p className=\"text-white\">No shorts available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"fixed inset-0 bg-black z-50 flex items-center justify-center\"\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n      onClick={() => setShowControls(true)}\n    >\n      {/* Video Player */}\n      <div className=\"relative w-full max-w-[500px] h-full flex items-center justify-center\">\n        <video\n          ref={videoRef}\n          src={currentVideo.videoUrl}\n          className=\"w-full h-full object-contain bg-black\"\n          loop\n          muted={isMuted}\n          playsInline\n          onClick={togglePlayPause}\n        />\n\n        {/* Play/Pause overlay */}\n        {!isPlaying && (\n          <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n            <div className=\"bg-white/20 backdrop-blur-md rounded-full p-6\">\n              <Play className=\"h-16 w-16 text-white fill-white\" />\n            </div>\n          </div>\n        )}\n\n        {/* Gradient overlays */}\n        <div className={`absolute inset-x-0 top-0 h-32 bg-gradient-to-b from-black/70 to-transparent transition-opacity ${showControls ? 'opacity-100' : 'opacity-0'}`} />\n        <div className=\"absolute inset-x-0 bottom-0 h-80 bg-gradient-to-t from-black/95 via-black/60 to-transparent\" />\n\n        {/* Top controls */}\n        <div className={`absolute top-0 left-0 right-0 p-4 sm:p-6 flex items-center justify-between z-20 transition-opacity ${showControls ? 'opacity-100' : 'opacity-0'}`}>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"bg-gradient-to-br from-red-500 to-pink-600 p-2 rounded-lg\">\n              <Play className=\"h-5 w-5 text-white fill-white\" />\n            </div>\n            <span className=\"text-white font-semibold text-lg hidden sm:block\">Shorts</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white hover:bg-white/20 h-10 w-10\"\n              onClick={toggleMute}\n            >\n              {isMuted ? <VolumeX className=\"h-6 w-6\" /> : <Volume2 className=\"h-6 w-6\" />}\n            </Button>\n            {onClose && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-white hover:bg-white/20 h-10 w-10\"\n                onClick={onClose}\n              >\n                <X className=\"h-6 w-6\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Bottom info & controls */}\n        <div className=\"absolute bottom-0 left-0 right-0 p-4 sm:p-6 pb-6 sm:pb-8 z-20\">\n          <div className=\"flex items-end gap-3 sm:gap-4\">\n            {/* Video info - Mobile & Desktop optimized */}\n            <div className=\"flex-1 text-white space-y-3\">\n              <div \n                className=\"flex items-center gap-3 cursor-pointer group\"\n                onClick={goToChannel}\n              >\n                <img\n                  src={currentVideo.channel.avatar || \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?w=80&h=80&fit=crop\"}\n                  alt={currentVideo.channel.name}\n                  className=\"w-12 h-12 sm:w-14 sm:h-14 rounded-full object-cover ring-2 ring-white/30 group-hover:ring-white/60 transition-all\"\n                />\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-bold text-base sm:text-lg truncate\">{currentVideo.channel.name}</span>\n                    {currentVideo.channel.verified && (\n                      <CheckCircle className=\"h-4 w-4 sm:h-5 sm:w-5 text-blue-400 fill-blue-400 flex-shrink-0\" />\n                    )}\n                  </div>\n                  <span className=\"text-xs sm:text-sm text-white/70\">\n                    {(currentVideo.channel.subscribers || 0).toLocaleString()} subscribers\n                  </span>\n                </div>\n                <Button\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    subscribeMutation.mutate();\n                  }}\n                  className={`rounded-full px-4 sm:px-6 h-9 sm:h-10 font-bold text-sm sm:text-base transition-all ${\n                    isSubscribed \n                      ? \"bg-white/20 text-white hover:bg-white/30\" \n                      : \"bg-white text-black hover:bg-white/90\"\n                  }`}\n                >\n                  {isSubscribed ? \"Subscribed\" : \"Subscribe\"}\n                </Button>\n              </div>\n\n              <h3 className=\"font-semibold text-base sm:text-lg line-clamp-2 leading-snug\">\n                {currentVideo.title}\n              </h3>\n\n              {currentVideo.description && (\n                <p className=\"text-sm sm:text-base text-white/80 line-clamp-2 leading-snug\">\n                  {currentVideo.description}\n                </p>\n              )}\n\n              <p className=\"text-xs sm:text-sm text-white/60 font-medium\">\n                {formatViews(currentVideo.views || 0)} views\n              </p>\n            </div>\n\n            {/* Action buttons - Mobile & Desktop optimized */}\n            <div className=\"flex flex-col items-center gap-4 sm:gap-5 pb-2\">\n              <button\n                onClick={handleLike}\n                className=\"flex flex-col items-center gap-1 text-white hover:scale-110 active:scale-95 transition-transform\"\n              >\n                <div className=\"relative\">\n                  <Heart\n                    className={`h-7 w-7 sm:h-9 sm:w-9 ${likeStatus?.hasLiked ? \"fill-red-500 text-red-500\" : \"\"}`}\n                  />\n                </div>\n                <span className=\"text-xs sm:text-sm font-bold\">{formatViews(stats?.likes || 0)}</span>\n              </button>\n\n              <button\n                onClick={handleDislike}\n                className=\"flex flex-col items-center gap-1 text-white hover:scale-110 active:scale-95 transition-transform\"\n              >\n                <ThumbsDown\n                  className={`h-6 w-6 sm:h-8 sm:w-8 ${likeStatus?.hasDisliked ? \"fill-white\" : \"\"}`}\n                />\n                <span className=\"text-xs sm:text-sm font-bold\">Dislike</span>\n              </button>\n\n              <button\n                onClick={() => setLocation(`/watch/${currentVideo.id}`)}\n                className=\"flex flex-col items-center gap-1 text-white hover:scale-110 active:scale-95 transition-transform\"\n              >\n                <MessageCircle className=\"h-7 w-7 sm:h-9 sm:w-9\" />\n                <span className=\"text-xs sm:text-sm font-bold\">{stats?.comments || 0}</span>\n              </button>\n\n              <button\n                onClick={handleShare}\n                className=\"flex flex-col items-center gap-1 text-white hover:scale-110 active:scale-95 transition-transform\"\n              >\n                <Share2 className=\"h-7 w-7 sm:h-9 sm:w-9\" />\n                <span className=\"text-xs sm:text-sm font-bold\">Share</span>\n              </button>\n\n              <button \n                className=\"flex flex-col items-center gap-1 text-white hover:scale-110 active:scale-95 transition-transform\"\n                onClick={() => toast({ title: \"Remix\", description: \"Feature coming soon!\" })}\n              >\n                <Repeat2 className=\"h-6 w-6 sm:h-8 sm:w-8\" />\n                <span className=\"text-xs sm:text-sm font-bold\">Remix</span>\n              </button>\n\n              <button className=\"flex flex-col items-center gap-1 text-white hover:scale-110 active:scale-95 transition-transform\">\n                <MoreVertical className=\"h-6 w-6 sm:h-8 sm:w-8\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation buttons - Desktop only */}\n        {currentIndex > 0 && (\n          <button\n            onClick={handlePrevious}\n            className=\"hidden md:flex absolute top-1/2 right-6 -translate-y-1/2 items-center justify-center text-white/90 hover:text-white hover:bg-white/20 rounded-full p-3 transition-all\"\n          >\n            <ChevronUp className=\"h-8 w-8\" />\n          </button>\n        )}\n\n        {currentIndex < videos.length - 1 && (\n          <button\n            onClick={handleNext}\n            className=\"hidden md:flex absolute bottom-[42%] right-6 items-center justify-center text-white/90 hover:text-white hover:bg-white/20 rounded-full p-3 transition-all\"\n          >\n            <ChevronDown className=\"h-8 w-8\" />\n          </button>\n        )}\n\n        {/* Progress indicator */}\n        <div className={`absolute top-20 sm:top-24 left-1/2 -translate-x-1/2 flex gap-1.5 sm:gap-2 z-20 transition-opacity ${showControls ? 'opacity-100' : 'opacity-0'}`}>\n          {videos.slice(0, 10).map((_, idx) => (\n            <div\n              key={idx}\n              className={`h-1 w-7 sm:w-10 rounded-full transition-all ${\n                idx === currentIndex\n                  ? \"bg-white\"\n                  : idx < currentIndex\n                  ? \"bg-white/60\"\n                  : \"bg-white/30\"\n              }`}\n            />\n          ))}\n          {videos.length > 10 && <span className=\"text-white/60 text-xs sm:text-sm font-bold\">+{videos.length - 10}</span>}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17756},"client/src/components/AuthModal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Mail, Loader2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\n\ninterface AuthModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AuthModal({ open, onOpenChange }: AuthModalProps) {\n  const [mode, setMode] = useState<'options' | 'email' | 'otp'>('options');\n  const [step, setStep] = useState<'email' | 'otp'>('email');\n  const [email, setEmail] = useState('');\n  const [otp, setOtp] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const { toast } = useToast();\n\n  const sendOtpMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const res = await fetch('/api/auth/email/send-otp', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email }),\n      });\n      if (!res.ok) throw new Error('Failed to send OTP');\n      return res.json();\n    },\n    onSuccess: () => {\n      setMode('otp');\n      setStep('otp');\n      toast({\n        title: \"OTP Sent\",\n        description: \"Check your email for the verification code (or enter any code for now)\",\n      });\n    },\n  });\n\n  const verifyOtpMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch('/api/auth/email/verify-otp', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, otp, firstName, lastName }),\n      });\n      if (!res.ok) throw new Error('Failed to verify OTP');\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success!\",\n        description: \"Account created successfully\",\n      });\n      window.location.href = '/';\n    },\n  });\n\n  const handleClose = () => {\n    onOpenChange(false);\n    setTimeout(() => {\n      setMode('options');\n      setStep('email');\n      setEmail('');\n      setOtp('');\n      setFirstName('');\n      setLastName('');\n    }, 200);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>\n            {mode === 'options' && 'Welcome to CineWeave'}\n            {mode === 'email' && 'Sign up with Email'}\n            {mode === 'otp' && 'Enter OTP'}\n          </DialogTitle>\n          <DialogDescription>\n            {mode === 'options' && 'Sign in to unlock personalized features'}\n            {mode === 'email' && 'Enter your email to receive a verification code'}\n            {mode === 'otp' && 'Enter the OTP sent to your email (any code works for now)'}\n          </DialogDescription>\n        </DialogHeader>\n\n        {mode === 'options' && (\n          <div className=\"space-y-3 py-4\">\n            <Button\n              className=\"w-full\"\n              size=\"lg\"\n              onClick={() => window.location.href = \"/api/login\"}\n              data-testid=\"button-google-signup\"\n            >\n              Sign in with Google\n            </Button>\n            <Button\n              className=\"w-full\"\n              size=\"lg\"\n              variant=\"outline\"\n              onClick={() => setMode('email')}\n              data-testid=\"button-email-signup\"\n            >\n              <Mail className=\"w-4 h-4 mr-2\" />\n              Sign up with Email\n            </Button>\n          </div>\n        )}\n\n        {mode === 'email' && (\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"your@email.com\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"firstName\">First Name (Optional)</Label>\n              <Input\n                id=\"firstName\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n                placeholder=\"John\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"lastName\">Last Name (Optional)</Label>\n              <Input\n                id=\"lastName\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n                placeholder=\"Doe\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => setMode('options')}\n              >\n                Back\n              </Button>\n              <Button\n                className=\"w-full\"\n                onClick={() => sendOtpMutation.mutate(email)}\n                disabled={!email || sendOtpMutation.isPending}\n              >\n                {sendOtpMutation.isPending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                {sendOtpMutation.isPending ? 'Sending...' : 'Send OTP'}\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {mode === 'otp' && (\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"otp\">OTP Code</Label>\n              <Input\n                id=\"otp\"\n                value={otp}\n                onChange={(e) => setOtp(e.target.value)}\n                placeholder=\"Enter any code\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => {\n                  setMode('email');\n                  setStep('email');\n                }}\n              >\n                Back\n              </Button>\n              <Button\n                className=\"w-full\"\n                onClick={() => verifyOtpMutation.mutate()}\n                disabled={!otp || verifyOtpMutation.isPending}\n              >\n                {verifyOtpMutation.isPending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                {verifyOtpMutation.isPending ? 'Verifying...' : 'Verify & Sign Up'}\n              </Button>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6637},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"..\", \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2277},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/KeyboardShortcuts.tsx":{"content":"import { Keyboard } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface Shortcut {\n  keys: string[];\n  description: string;\n}\n\ninterface ShortcutSection {\n  title: string;\n  shortcuts: Shortcut[];\n}\n\nconst shortcutSections: ShortcutSection[] = [\n  {\n    title: \"Video Player\",\n    shortcuts: [\n      { keys: [\"Space\", \"K\"], description: \"Play/Pause\" },\n      { keys: [\"←\"], description: \"Rewind 5 seconds\" },\n      { keys: [\"→\"], description: \"Fast forward 5 seconds\" },\n      { keys: [\"↑\"], description: \"Increase volume\" },\n      { keys: [\"↓\"], description: \"Decrease volume\" },\n      { keys: [\"M\"], description: \"Mute/Unmute\" },\n      { keys: [\"F\"], description: \"Toggle fullscreen\" },\n      { keys: [\"C\"], description: \"Toggle captions\" },\n      { keys: [\"J\"], description: \"Rewind 10 seconds\" },\n      { keys: [\"L\"], description: \"Fast forward 10 seconds\" },\n      { keys: [\"0-9\"], description: \"Jump to 0%-90% of video\" },\n      { keys: [\"<\"], description: \"Decrease playback speed\" },\n      { keys: [\">\"], description: \"Increase playback speed\" }\n    ]\n  },\n  {\n    title: \"Navigation\",\n    shortcuts: [\n      { keys: [\"Home\"], description: \"Go to home page\" },\n      { keys: [\"/\"], description: \"Focus search box\" },\n      { keys: [\"Esc\"], description: \"Close overlays/menus\" },\n      { keys: [\"Shift\", \"?\"], description: \"Show keyboard shortcuts\" }\n    ]\n  },\n  {\n    title: \"General\",\n    shortcuts: [\n      { keys: [\"Ctrl\", \"K\"], description: \"Open search\" },\n      { keys: [\"N\"], description: \"Toggle notifications\" },\n      { keys: [\"S\"], description: \"Toggle sidebar\" },\n      { keys: [\"P\"], description: \"Toggle personal mode\" }\n    ]\n  }\n];\n\nexport default function KeyboardShortcuts() {\n  return (\n    <div className=\"max-w-5xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center gap-3 mb-2\">\n          <Keyboard className=\"h-8 w-8 text-primary\" />\n          <h1 className=\"text-3xl font-bold\">Keyboard Shortcuts</h1>\n        </div>\n        <p className=\"text-muted-foreground\">\n          Use these keyboard shortcuts to navigate and control CineWeave more efficiently\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        {shortcutSections.map((section) => (\n          <Card key={section.title}>\n            <CardHeader>\n              <CardTitle>{section.title}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {section.shortcuts.map((shortcut, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between py-2 border-b last:border-b-0\"\n                  >\n                    <span className=\"text-sm\">{shortcut.description}</span>\n                    <div className=\"flex gap-1\">\n                      {shortcut.keys.map((key, keyIndex) => (\n                        <span key={keyIndex} className=\"flex items-center gap-1\">\n                          <kbd className=\"px-3 py-1.5 text-xs font-semibold text-foreground bg-muted border border-border rounded shadow-sm\">\n                            {key}\n                          </kbd>\n                          {keyIndex < shortcut.keys.length - 1 && (\n                            <span className=\"text-muted-foreground text-xs\">+</span>\n                          )}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"mt-8 p-4 bg-muted rounded-lg\">\n        <p className=\"text-sm text-muted-foreground\">\n          <strong>Tip:</strong> Press <kbd className=\"px-2 py-1 text-xs font-semibold bg-background border rounded\">Shift</kbd> + <kbd className=\"px-2 py-1 text-xs font-semibold bg-background border rounded\">?</kbd> to quickly access this list while browsing.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4029},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Play } from \"lucide-react\";\nimport VideoCard from \"@/components/VideoCard\";\nimport SpaceCard from \"@/components/SpaceCard\";\nimport ShortsCard from \"@/components/ShortsCard\";\nimport ChannelCreationDialog from \"@/components/ChannelCreationDialog\";\nimport { useAppStore } from \"@/store/useAppStore\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { VideoWithChannel, SpaceWithChannels } from \"@shared/schema\";\n\nconst categoryFilters = [\n  { label: \"All\", value: \"\" },\n  { label: \"From Subscriptions\", value: \"subscriptions\" },\n  { label: \"Gaming\", value: \"Gaming\" },\n  { label: \"Music\", value: \"Music\" },\n  { label: \"Live\", value: \"Live\" },\n  { label: \"Recently uploaded\", value: \"recent\" },\n  { label: \"Watched\", value: \"watched\" },\n];\n\nexport default function Home() {\n  const { personalMode, searchQuery, currentUserId } = useAppStore();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeCategory, setActiveCategory] = useState(\"\");\n  const [showChannelCreation, setShowChannelCreation] = useState(false);\n\n  // Check if user has a channel (only when authenticated)\n  const { data: userChannel, isLoading: channelLoading } = useQuery({\n    queryKey: ['/api/users', user?.id, 'channel'],\n    queryFn: async () => {\n      if (!user?.id) return null;\n      const res = await fetch(`/api/users/${user.id}/channel`);\n      if (res.status === 404) return null;\n      if (!res.ok) throw new Error('Failed to fetch channel');\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Removed auto-popup for better UX - users can create channel from AccountMenu\n\n  // Fetch videos based on personal mode and search query\n  const { data: videos = [], isLoading: videosLoading } = useQuery<VideoWithChannel[]>({\n    queryKey: [\"/api/videos\", { personalMode, searchQuery, category: activeCategory }],\n    queryFn: async () => {\n      if (searchQuery) {\n        const response = await fetch(`/api/videos/search?q=${encodeURIComponent(searchQuery)}`);\n        if (!response.ok) throw new Error('Failed to search videos');\n        return response.json();\n      } else if (personalMode) {\n        // Get subscribed channels and their videos\n        const subsResponse = await fetch(`/api/subscriptions/${currentUserId}`);\n        if (!subsResponse.ok) return [];\n        const subscriptions = await subsResponse.json();\n        const channelIds = subscriptions.map((sub: any) => sub.channelId);\n        \n        if (channelIds.length === 0) return [];\n        \n        const videosResponse = await fetch(`/api/videos/by-channels?channelIds=${channelIds.join(',')}`);\n        if (!videosResponse.ok) return [];\n        return videosResponse.json();\n      } else {\n        const response = await fetch(`/api/videos?${activeCategory ? `category=${activeCategory}` : ''}`);\n        if (!response.ok) throw new Error('Failed to fetch videos');\n        return response.json();\n      }\n    }\n  });\n\n  // Fetch user spaces (only when authenticated)\n  const { data: spaces = [] } = useQuery<SpaceWithChannels[]>({\n    queryKey: [\"/api/spaces/user\", currentUserId],\n    enabled: !!user?.id,\n  });\n\n  // Fetch shorts for homepage integration\n  const { data: shorts = [] } = useQuery<VideoWithChannel[]>({\n    queryKey: [\"/api/videos/shorts\"],\n    queryFn: async () => {\n      const response = await fetch('/api/videos/shorts');\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !searchQuery,\n  });\n\n  const handleVideoClick = (video: VideoWithChannel) => {\n    setLocation(`/watch/${video.id}`);\n  };\n\n  const handleShortClick = (shortId: string, index: number) => {\n    setLocation(`/shorts`);\n  };\n\n  const handleSpaceClick = (space: SpaceWithChannels) => {\n    console.log(\"Viewing space:\", space.name);\n    // TODO: Navigate to space-specific feed\n  };\n\n  const handleCreateSpace = () => {\n    console.log(\"Creating new space\");\n    // TODO: Open create space modal\n  };\n\n  if (videosLoading) {\n    return (\n      <div className=\"space-y-6 w-full overflow-x-hidden\">\n        <div className=\"h-8 bg-muted animate-pulse rounded\"></div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4\">\n          {Array.from({ length: 12 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <div className=\"aspect-video bg-muted animate-pulse rounded-xl\"></div>\n              <div className=\"flex gap-3\">\n                <div className=\"w-9 h-9 bg-muted animate-pulse rounded-full\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted animate-pulse rounded\"></div>\n                  <div className=\"h-3 bg-muted animate-pulse rounded w-2/3\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 sm:space-y-8 w-full overflow-x-hidden\">\n      {/* Category Filter Chips */}\n      <div className=\"flex items-center gap-2 sm:gap-3 overflow-x-auto pb-2 scrollbar-hide -mx-3 px-3 sm:mx-0 sm:px-0\">\n        {categoryFilters.map((filter) => (\n          <Button\n            key={filter.value}\n            variant={activeCategory === filter.value ? \"default\" : \"secondary\"}\n            size=\"sm\"\n            onClick={() => setActiveCategory(filter.value)}\n            className={`whitespace-nowrap ${\n              activeCategory === filter.value \n                ? \"bg-foreground text-background hover:bg-foreground/90\" \n                : \"bg-muted text-foreground hover:bg-secondary\"\n            }`}\n            data-testid={`filter-${filter.value || 'all'}`}\n          >\n            {filter.label}\n          </Button>\n        ))}\n      </div>\n\n      {/* Search Results Header */}\n      {searchQuery && (\n        <div className=\"mb-6 flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">\n              Search results for \"{searchQuery}\"\n            </h2>\n            {videos.length === 0 && (\n              <p className=\"text-muted-foreground\">No videos found matching your search.</p>\n            )}\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => useAppStore.getState().setSearchQuery(\"\")}\n            className=\"text-sm\"\n          >\n            Clear search\n          </Button>\n        </div>\n      )}\n\n      {/* Personal Mode Empty State */}\n      {personalMode && videos.length === 0 && !searchQuery && (\n        <div className=\"text-center py-12\">\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">No subscription content</h2>\n          <p className=\"text-muted-foreground\">\n            Subscribe to channels to see their content in Personal Mode.\n          </p>\n        </div>\n      )}\n\n      {/* Top Video Grid (First 2-3 rows = 8-12 videos) */}\n      {videos.length > 0 && (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4\">\n          {videos.slice(0, 12).map((video) => (\n            <VideoCard\n              key={video.id}\n              video={video}\n              onClick={() => handleVideoClick(video)}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Shorts Section - Horizontal scrollable */}\n      {shorts.length > 0 && !searchQuery && (\n        <div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-foreground flex items-center gap-2\">\n              <Play className=\"h-6 w-6 text-primary\" />\n              Shorts\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-primary hover:underline\"\n              onClick={() => setLocation(\"/shorts\")}\n            >\n              View all →\n            </Button>\n          </div>\n\n          <div className=\"flex gap-3 overflow-x-auto pb-4 scrollbar-hide -mx-3 px-3 sm:mx-0 sm:px-0\">\n            {shorts.slice(0, 10).map((short) => (\n              <ShortsCard\n                key={short.id}\n                short={short}\n                onClick={() => handleShortClick(short.id, 0)}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Spaces Section - Only show for authenticated users */}\n      {user && !searchQuery && videos.length > 0 && (\n        <div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-foreground flex items-center gap-2\">\n              <span className=\"text-2xl\">📁</span>\n              Your Spaces\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-primary hover:underline\"\n              onClick={() => window.location.href = \"/spaces\"}\n              data-testid=\"button-view-all-spaces\"\n            >\n              View all →\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4\">\n            {spaces.slice(0, 3).map((space) => (\n              <SpaceCard\n                key={space.id}\n                space={space}\n                onClick={() => handleSpaceClick(space)}\n              />\n            ))}\n\n            {/* Create New Space CTA */}\n            <div\n              className=\"p-4 border-2 border-dashed border-border rounded-xl flex items-center justify-center hover:border-primary transition cursor-pointer\"\n              onClick={handleCreateSpace}\n              data-testid=\"button-create-space\"\n            >\n              <div className=\"text-center\">\n                <Plus className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n                <p className=\"text-sm font-medium text-foreground\">Create New Space</p>\n                <p className=\"text-xs text-muted-foreground\">Organize your favorite channels</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Remaining Videos (After Spaces) */}\n      {videos.length > 12 && (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4\">\n          {videos.slice(12).map((video) => (\n            <VideoCard\n              key={video.id}\n              video={video}\n              onClick={() => handleVideoClick(video)}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Channel Creation Dialog - Only for authenticated users */}\n      {user && (\n        <ChannelCreationDialog \n          open={showChannelCreation}\n          onOpenChange={setShowChannelCreation}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":10839},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { channels, videos, users, comments, likes, subscriptions } from \"@shared/schema\";\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  const existingChannels = await db.select().from(channels).limit(1);\n  if (existingChannels.length > 0) {\n    console.log(\"Database already seeded, skipping...\");\n    return;\n  }\n\n  const sampleUsers = [\n    {\n      username: \"viewer1\",\n      email: \"viewer1@cineweave.com\",\n      firstName: \"Alex\",\n      lastName: \"Johnson\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=80&h=80&fit=crop\",\n      personalMode: false,\n      blockedChannels: [],\n    },\n    {\n      username: \"techfan\",\n      email: \"techfan@cineweave.com\",\n      firstName: \"Sarah\",\n      lastName: \"Chen\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=80&h=80&fit=crop\",\n      personalMode: false,\n      blockedChannels: [],\n    },\n    {\n      username: \"gamerlord\",\n      email: \"gamer@cineweave.com\",\n      firstName: \"Mike\",\n      lastName: \"Thompson\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1599566150163-29194dcaad36?w=80&h=80&fit=crop\",\n      personalMode: true,\n      blockedChannels: [],\n    },\n  ];\n\n  const createdUsers = await db.insert(users).values(sampleUsers).returning();\n  console.log(`Created ${createdUsers.length} users`);\n\n  const sampleChannels = [\n    {\n      userId: createdUsers[0].id,\n      name: \"A Gamingcraft\",\n      username: \"@agamingcraft\",\n      avatar: \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?w=80&h=80&fit=crop\",\n      verified: true,\n      subscribers: 1200000,\n      description: \"Epic gaming adventures and walkthroughs\",\n    },\n    {\n      userId: createdUsers[1].id,\n      name: \"A Filmcraft\",\n      username: \"@afilmcraft\",\n      avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=80&h=80&fit=crop\",\n      verified: true,\n      subscribers: 1200000,\n      description: \"Film analysis and cinematic storytelling\",\n    },\n    {\n      userId: createdUsers[2].id,\n      name: \"Tech Vision\",\n      username: \"@techvision\",\n      avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=80&h=80&fit=crop\",\n      verified: true,\n      subscribers: 2100000,\n      description: \"Technology reviews and tutorials\",\n    },\n    {\n      userId: createdUsers[0].id,\n      name: \"Cooking Masters\",\n      username: \"@cookingmasters\",\n      avatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=80&h=80&fit=crop\",\n      verified: true,\n      subscribers: 850000,\n      description: \"Professional cooking tutorials and recipes\",\n    },\n    {\n      userId: createdUsers[1].id,\n      name: \"Nature Explorer\",\n      username: \"@natureexplorer\",\n      avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=80&h=80&fit=crop\",\n      verified: true,\n      subscribers: 3500000,\n      description: \"Wildlife documentaries and nature exploration\",\n    },\n    {\n      userId: createdUsers[2].id,\n      name: \"Fitness Pro\",\n      username: \"@fitnesspro\",\n      avatar: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=80&h=80&fit=crop\",\n      verified: false,\n      subscribers: 450000,\n      description: \"Workout routines and fitness tips\",\n    },\n    {\n      userId: createdUsers[0].id,\n      name: \"Music Vibes\",\n      username: \"@musicvibes\",\n      avatar: \"https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=80&h=80&fit=crop\",\n      verified: true,\n      subscribers: 5200000,\n      description: \"Latest music videos and live performances\",\n    },\n    {\n      userId: createdUsers[1].id,\n      name: \"Science Daily\",\n      username: \"@sciencedaily\",\n      avatar: \"https://images.unsplash.com/photo-1539571696357-5a69c17a67c6?w=80&h=80&fit=crop\",\n      verified: true,\n      subscribers: 1800000,\n      description: \"Science experiments and educational content\",\n    },\n    {\n      userId: createdUsers[2].id,\n      name: \"Travel World\",\n      username: \"@travelworld\",\n      avatar: \"https://images.unsplash.com/photo-1531123897727-8f129e1688ce?w=80&h=80&fit=crop\",\n      verified: true,\n      subscribers: 2900000,\n      description: \"Travel vlogs from around the world\",\n    },\n    {\n      userId: createdUsers[0].id,\n      name: \"Comedy Central\",\n      username: \"@comedycentral\",\n      avatar: \"https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=80&h=80&fit=crop\",\n      verified: false,\n      subscribers: 670000,\n      description: \"Stand-up comedy and funny sketches\",\n    },\n  ];\n\n  const createdChannels = await db.insert(channels).values(sampleChannels).returning();\n  console.log(`Created ${createdChannels.length} channels`);\n\n  const sampleVideos = [\n    {\n      title: \"Uncharted Ruins of Eldoris\",\n      thumbnail: \"https://images.unsplash.com/photo-1518709268805-4e9042af9f23?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      duration: \"12:48\",\n      views: 1200000,\n      channelId: createdChannels[0].id,\n      isLive: false,\n      description: \"Exploring the mysterious ruins in this epic fantasy adventure\",\n      category: \"Gaming\",\n    },\n    {\n      title: \"Exploration X: The Hidden Valleys\",\n      thumbnail: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4\",\n      duration: \"22:48\",\n      views: 1200000,\n      channelId: createdChannels[1].id,\n      isLive: false,\n      description: \"A cinematic journey through hidden valleys and ancient landscapes\",\n      category: \"Movies\",\n    },\n    {\n      title: \"Pro Tournament Live: Finals Day\",\n      thumbnail: \"https://images.unsplash.com/photo-1542751371-adc38448a05e?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4\",\n      duration: \"\",\n      views: 45000,\n      channelId: createdChannels[0].id,\n      isLive: true,\n      description: \"Live coverage of the championship finals\",\n      category: \"Gaming\",\n    },\n    {\n      title: \"iPhone 16 Pro Review - Best Phone of 2025?\",\n      thumbnail: \"https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4\",\n      duration: \"15:32\",\n      views: 890000,\n      channelId: createdChannels[2].id,\n      isLive: false,\n      description: \"Comprehensive review of the latest iPhone flagship\",\n      category: \"Technology\",\n    },\n    {\n      title: \"Perfect Italian Pasta - 3 Simple Recipes\",\n      thumbnail: \"https://images.unsplash.com/photo-1621996346565-e3dbc646d9a9?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4\",\n      duration: \"18:24\",\n      views: 520000,\n      channelId: createdChannels[3].id,\n      isLive: false,\n      description: \"Master these classic Italian pasta dishes\",\n      category: \"Food\",\n    },\n    {\n      title: \"Amazon Rainforest Wildlife Documentary\",\n      thumbnail: \"https://images.unsplash.com/photo-1516426122078-c23e76319801?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerJoyrides.mp4\",\n      duration: \"45:12\",\n      views: 2100000,\n      channelId: createdChannels[4].id,\n      isLive: false,\n      description: \"Stunning 4K footage of Amazon rainforest wildlife\",\n      category: \"Documentary\",\n    },\n    {\n      title: \"Full Body Workout - 30 Minutes No Equipment\",\n      thumbnail: \"https://images.unsplash.com/photo-1571019614242-c5c5dee9f50b?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerMeltdowns.mp4\",\n      duration: \"30:15\",\n      views: 340000,\n      channelId: createdChannels[5].id,\n      isLive: false,\n      description: \"Complete at-home workout routine\",\n      category: \"Fitness\",\n    },\n    {\n      title: \"Summer Hits 2025 - Best Music Mix\",\n      thumbnail: \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4\",\n      duration: \"52:18\",\n      views: 4500000,\n      channelId: createdChannels[6].id,\n      isLive: false,\n      description: \"Top hits compilation for summer 2025\",\n      category: \"Music\",\n    },\n    {\n      title: \"How Quantum Computers Work\",\n      thumbnail: \"https://images.unsplash.com/photo-1635070041078-e363dbe005cb?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/SubaruOutbackOnStreetAndDirt.mp4\",\n      duration: \"24:56\",\n      views: 780000,\n      channelId: createdChannels[7].id,\n      isLive: false,\n      description: \"Understanding quantum computing for beginners\",\n      category: \"Science\",\n    },\n    {\n      title: \"Tokyo Japan Travel Guide 2025\",\n      thumbnail: \"https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4\",\n      duration: \"35:42\",\n      views: 1600000,\n      channelId: createdChannels[8].id,\n      isLive: false,\n      description: \"Complete travel guide to Tokyo with hidden gems\",\n      category: \"Travel\",\n    },\n    {\n      title: \"Stand-Up Comedy Special - Best Moments\",\n      thumbnail: \"https://images.unsplash.com/photo-1585699324551-f6c309eedeca?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/VolkswagenGTIReview.mp4\",\n      duration: \"42:30\",\n      views: 920000,\n      channelId: createdChannels[9].id,\n      isLive: false,\n      description: \"Hilarious moments from recent comedy shows\",\n      category: \"Comedy\",\n    },\n    {\n      title: \"Dark Souls Boss Battle Compilation\",\n      thumbnail: \"https://images.unsplash.com/photo-1538481199705-c710c4e965fc?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/WeAreGoingOnBullrun.mp4\",\n      duration: \"28:15\",\n      views: 650000,\n      channelId: createdChannels[0].id,\n      isLive: false,\n      description: \"Epic boss battles from Dark Souls series\",\n      category: \"Gaming\",\n    },\n    {\n      title: \"The Art of Cinematography\",\n      thumbnail: \"https://images.unsplash.com/photo-1478720568477-152d9b164e26?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/WhatCarCanYouGetForAGrand.mp4\",\n      duration: \"38:20\",\n      views: 440000,\n      channelId: createdChannels[1].id,\n      isLive: false,\n      description: \"Masterclass on cinematic techniques\",\n      category: \"Education\",\n    },\n    {\n      title: \"AI Revolution: What's Next in 2025\",\n      thumbnail: \"https://images.unsplash.com/photo-1677442136019-21780ecad995?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      duration: \"19:45\",\n      views: 1100000,\n      channelId: createdChannels[2].id,\n      isLive: false,\n      description: \"Latest AI developments and future predictions\",\n      category: \"Technology\",\n    },\n    {\n      title: \"Baking Perfect Sourdough Bread\",\n      thumbnail: \"https://images.unsplash.com/photo-1509440159596-0249088772ff?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4\",\n      duration: \"16:30\",\n      views: 380000,\n      channelId: createdChannels[3].id,\n      isLive: false,\n      description: \"Step-by-step sourdough bread tutorial\",\n      category: \"Food\",\n    },\n    {\n      title: \"African Safari - Lions and Elephants\",\n      thumbnail: \"https://images.unsplash.com/photo-1549366021-9f761d450615?w=480&h=270&fit=crop\",\n      videoUrl: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4\",\n      duration: \"40:08\",\n      views: 1900000,\n      channelId: createdChannels[4].id,\n      isLive: false,\n      description: \"Incredible wildlife encounters in Africa\",\n      category: \"Documentary\",\n    },\n  ];\n\n  const createdVideos = await db.insert(videos).values(sampleVideos).returning();\n  console.log(`Created ${createdVideos.length} videos`);\n\n  const sampleComments = [\n    {\n      videoId: createdVideos[0].id,\n      userId: createdUsers[0].id,\n      content: \"This is amazing! The graphics are incredible!\",\n      likes: 245,\n    },\n    {\n      videoId: createdVideos[0].id,\n      userId: createdUsers[1].id,\n      content: \"Been waiting for this walkthrough, thank you!\",\n      likes: 89,\n    },\n    {\n      videoId: createdVideos[1].id,\n      userId: createdUsers[2].id,\n      content: \"Absolutely stunning cinematography. This deserves an award!\",\n      likes: 512,\n    },\n    {\n      videoId: createdVideos[3].id,\n      userId: createdUsers[0].id,\n      content: \"Great review! Very detailed and helpful.\",\n      likes: 156,\n    },\n    {\n      videoId: createdVideos[4].id,\n      userId: createdUsers[1].id,\n      content: \"Tried this recipe and it turned out perfect! Thanks!\",\n      likes: 78,\n    },\n    {\n      videoId: createdVideos[5].id,\n      userId: createdUsers[2].id,\n      content: \"The quality of this documentary is outstanding. 4K looks beautiful!\",\n      likes: 892,\n    },\n    {\n      videoId: createdVideos[6].id,\n      userId: createdUsers[0].id,\n      content: \"This workout kicked my butt! Definitely doing this again tomorrow.\",\n      likes: 234,\n    },\n    {\n      videoId: createdVideos[7].id,\n      userId: createdUsers[1].id,\n      content: \"Best summer playlist! Playing this on repeat 🔥\",\n      likes: 1543,\n    },\n  ];\n\n  const createdComments = await db.insert(comments).values(sampleComments).returning();\n  console.log(`Created ${createdComments.length} comments`);\n\n  const replyComments = [\n    {\n      videoId: createdVideos[0].id,\n      userId: createdUsers[2].id,\n      parentId: createdComments[0].id,\n      content: \"I totally agree! The level design is next level.\",\n      likes: 45,\n    },\n    {\n      videoId: createdVideos[1].id,\n      userId: createdUsers[0].id,\n      parentId: createdComments[2].id,\n      content: \"The director really outdid themselves with this one!\",\n      likes: 67,\n    },\n  ];\n\n  const createdReplies = await db.insert(comments).values(replyComments).returning();\n  console.log(`Created ${createdReplies.length} reply comments`);\n\n  const sampleLikes = [\n    { userId: createdUsers[0].id, videoId: createdVideos[0].id, type: \"like\" },\n    { userId: createdUsers[1].id, videoId: createdVideos[0].id, type: \"like\" },\n    { userId: createdUsers[2].id, videoId: createdVideos[0].id, type: \"like\" },\n    { userId: createdUsers[0].id, videoId: createdVideos[1].id, type: \"like\" },\n    { userId: createdUsers[1].id, videoId: createdVideos[2].id, type: \"dislike\" },\n    { userId: createdUsers[2].id, videoId: createdVideos[3].id, type: \"like\" },\n    { userId: createdUsers[0].id, videoId: createdVideos[4].id, type: \"like\" },\n    { userId: createdUsers[1].id, videoId: createdVideos[5].id, type: \"like\" },\n    { userId: createdUsers[2].id, videoId: createdVideos[6].id, type: \"like\" },\n    { userId: createdUsers[0].id, videoId: createdVideos[7].id, type: \"like\" },\n  ];\n\n  const createdLikes = await db.insert(likes).values(sampleLikes).returning();\n  console.log(`Created ${createdLikes.length} likes`);\n\n  const sampleSubscriptions = [\n    { userId: createdUsers[0].id, channelId: createdChannels[0].id },\n    { userId: createdUsers[0].id, channelId: createdChannels[2].id },\n    { userId: createdUsers[0].id, channelId: createdChannels[4].id },\n    { userId: createdUsers[1].id, channelId: createdChannels[1].id },\n    { userId: createdUsers[1].id, channelId: createdChannels[3].id },\n    { userId: createdUsers[1].id, channelId: createdChannels[6].id },\n    { userId: createdUsers[2].id, channelId: createdChannels[0].id },\n    { userId: createdUsers[2].id, channelId: createdChannels[2].id },\n    { userId: createdUsers[2].id, channelId: createdChannels[7].id },\n  ];\n\n  const createdSubscriptions = await db.insert(subscriptions).values(sampleSubscriptions).returning();\n  console.log(`Created ${createdSubscriptions.length} subscriptions`);\n\n  console.log(\"Seeding complete!\");\n  console.log(`Summary:`);\n  console.log(`- ${createdUsers.length} users`);\n  console.log(`- ${createdChannels.length} channels`);\n  console.log(`- ${createdVideos.length} videos`);\n  console.log(`- ${createdComments.length + createdReplies.length} comments`);\n  console.log(`- ${createdLikes.length} likes`);\n  console.log(`- ${createdSubscriptions.length} subscriptions`);\n  \n  process.exit(0);\n}\n\nseed().catch((error) => {\n  console.error(\"Seeding failed:\", error);\n  process.exit(1);\n});\n","size_bytes":16975},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, integer, jsonb, timestamp, index, unique } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").unique(),\n  email: varchar(\"email\").unique(),\n  password: text(\"password\"),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  personalMode: boolean(\"personal_mode\").default(false),\n  blockedChannels: text(\"blocked_channels\").array().default([]),\n  authProvider: varchar(\"auth_provider\").default(\"email\"),\n  oauthId: text(\"oauth_id\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const channels = pgTable(\"channels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  username: text(\"username\").notNull().unique(),\n  avatar: text(\"avatar\"),\n  verified: boolean(\"verified\").default(false),\n  subscribers: integer(\"subscribers\").default(0),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const videos = pgTable(\"videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  thumbnail: text(\"thumbnail\").notNull(),\n  videoUrl: text(\"video_url\").notNull(),\n  storageKey: text(\"storage_key\"),\n  duration: text(\"duration\").notNull(),\n  views: integer(\"views\").default(0),\n  channelId: varchar(\"channel_id\").notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").default(sql`now()`),\n  isLive: boolean(\"is_live\").default(false),\n  isShorts: boolean(\"is_shorts\").default(false),\n  description: text(\"description\"),\n  category: text(\"category\"),\n  visibility: text(\"visibility\").default(\"public\"),\n});\n\nexport const spaces = pgTable(\"spaces\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  userId: varchar(\"user_id\").notNull(),\n  channelIds: text(\"channel_ids\").array().default([]),\n  icon: text(\"icon\"),\n  color: text(\"color\").default(\"blue\"),\n});\n\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  channelId: varchar(\"channel_id\").notNull(),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  videoId: varchar(\"video_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  parentId: varchar(\"parent_id\"),\n  content: text(\"content\").notNull(),\n  likes: integer(\"likes\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const likes = pgTable(\"likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  videoId: varchar(\"video_id\").notNull(),\n  type: text(\"type\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  unique().on(table.userId, table.videoId),\n]);\n\nexport const watchHistory = pgTable(\"watch_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  videoId: varchar(\"video_id\").notNull(),\n  watchedAt: timestamp(\"watched_at\").defaultNow(),\n  watchDuration: integer(\"watch_duration\").notNull(),\n});\n\nexport const playlists = pgTable(\"playlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  isPublic: boolean(\"is_public\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const playlistVideos = pgTable(\"playlist_videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  playlistId: varchar(\"playlist_id\").notNull(),\n  videoId: varchar(\"video_id\").notNull(),\n  position: integer(\"position\").notNull(),\n  addedAt: timestamp(\"added_at\").defaultNow(),\n}, (table) => [\n  unique().on(table.playlistId, table.videoId),\n]);\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  type: text(\"type\").notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  videoId: varchar(\"video_id\"),\n  channelId: varchar(\"channel_id\"),\n  thumbnail: text(\"thumbnail\"),\n  metadata: jsonb(\"metadata\"),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertChannelSchema = createInsertSchema(channels).omit({\n  id: true,\n});\n\nexport const insertVideoSchema = createInsertSchema(videos).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertSpaceSchema = createInsertSchema(spaces).omit({\n  id: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLikeSchema = createInsertSchema(likes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWatchHistorySchema = createInsertSchema(watchHistory).omit({\n  id: true,\n  watchedAt: true,\n});\n\nexport const insertPlaylistSchema = createInsertSchema(playlists).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPlaylistVideoSchema = createInsertSchema(playlistVideos).omit({\n  id: true,\n  addedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = typeof users.$inferInsert;\n\nexport type Channel = typeof channels.$inferSelect;\nexport type InsertChannel = z.infer<typeof insertChannelSchema>;\n\nexport type Video = typeof videos.$inferSelect;\nexport type InsertVideo = z.infer<typeof insertVideoSchema>;\n\nexport type Space = typeof spaces.$inferSelect;\nexport type InsertSpace = z.infer<typeof insertSpaceSchema>;\n\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\n\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n\nexport type Like = typeof likes.$inferSelect;\nexport type InsertLike = z.infer<typeof insertLikeSchema>;\n\nexport type WatchHistory = typeof watchHistory.$inferSelect;\nexport type InsertWatchHistory = z.infer<typeof insertWatchHistorySchema>;\n\nexport type Playlist = typeof playlists.$inferSelect;\nexport type InsertPlaylist = z.infer<typeof insertPlaylistSchema>;\n\nexport type PlaylistVideo = typeof playlistVideos.$inferSelect;\nexport type InsertPlaylistVideo = z.infer<typeof insertPlaylistVideoSchema>;\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\n// Extended types for frontend\nexport type VideoWithChannel = Video & {\n  channel: Channel;\n};\n\nexport type SpaceWithChannels = Space & {\n  channels: Channel[];\n  videoCount: number;\n};\n","size_bytes":7903},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"replit.md":{"content":"# CineWeave - Video Streaming Platform\n\n## Overview\n\nCineWeave is a video streaming platform similar to YouTube, focusing on enhanced personalization. It allows users to discover, watch, and organize video content through features like Personal Mode (a subscription-only feed), Spaces (customizable channel collections), and permanent channel blocking. The project aims to provide a robust, scalable, and user-friendly platform for video consumption and management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System:** React 18 with TypeScript, Vite for fast development and optimized builds, and Wouter for lightweight client-side routing.\n**UI Component System:** Shadcn UI (New York style) built on Radix UI primitives, styled with Tailwind CSS, supporting runtime theming and dark mode.\n**State Management:** Zustand for global state, TanStack Query for server state management and caching, and React hooks for local component state.\n**Key Application Features:**\n- **Home Page:** Content-focused layout with top videos, \"Your Spaces\" section, and additional videos designed for natural scrolling.\n- **Spaces Page:** Manages custom channel collections.\n- **Settings Page:** User preferences and blocked channel management.\n- **Persistent Layout:** Top navigation and collapsible sidebar.\n- **Video Upload System:** Comprehensive video upload functionality including file validation, category/tag selection, iDrive E2 integration for object storage, progress tracking, thumbnail management, visibility controls, scheduling, and audience selection.\n- **Watch Page:** Mobile-first responsive design matching YouTube's mobile UX, with optimized content hierarchy and touch targets.\n- **Shorts Page:** Professional desktop and mobile UI with responsive grid layout, enhanced video cards for vertical aspect ratio content, and a full-featured `ShortsPlayer` supporting gestures, keyboard navigation, and interactive elements (like/dislike, subscribe, comments, share).\n\n### Backend Architecture\n\n**Server Framework:** Express.js with TypeScript and Node.js, utilizing ESM for modern JavaScript compatibility.\n**API Design:** RESTful API endpoints with Zod schema validation, separating concerns between route handling, storage logic, and database persistence.\n**Authentication:** Replit OpenID Connect (OIDC) integration via Passport.js, with Express sessions stored in PostgreSQL using `connect-pg-simple` and 1-week persistent session cookies.\n**Storage Layer Architecture:** Abstract `IStorage` interface with `DbStorage` (Drizzle ORM with PostgreSQL) and `MemStorage` (in-memory) implementations, ensuring separation of domain logic from database specifics.\n\n### Database Architecture\n\n**Database Provider:** Neon serverless PostgreSQL, utilizing its HTTP driver for serverless-friendly connections and automatic connection pooling.\n**Schema Design:**\n- `users`: User profiles, personal mode preferences, blocked channels.\n- `channels`: Channel information (name, avatar, verification, subscriber count).\n- `videos`: Video metadata, foreign key to channels, category.\n- `spaces`: User-created channel collections.\n- `subscriptions`: Many-to-many user-channel relationships.\n- `blocked_channels`: Many-to-many user-blocked channel relationships.\n- `sessions`: Express session storage.\n**ORM & Migrations:** Drizzle ORM for type-safe queries, Drizzle Kit for schema migrations, and shared schema (`shared/schema.ts`) with `drizzle-zod` for runtime validation. Includes a workaround for a Neon HTTP driver bug regarding empty table queries.\n\n## External Dependencies\n\n**Database:**\n- Neon serverless PostgreSQL (`@neondatabase/serverless`) for primary data persistence.\n\n**Authentication:**\n- Replit OIDC provider (`https://replit.com/oidc`).\n- `openid-client` library for OpenID Connect flow.\n- Passport.js for authentication middleware.\n\n**UI Component Library:**\n- Radix UI primitives for accessible, unstyled components.\n- Tailwind CSS for utility-first styling.\n- Lucide React for icon components.\n\n**Session Management:**\n- `connect-pg-simple` for PostgreSQL-backed Express session storage.\n\n**Object Storage:**\n- iDrive E2 for video file storage.\n\n## Recent Changes & Updates\n\n- **Direct Upload to iDrive E2 via Pre-signed URLs (Oct 9, 2025):**\n  - **Problem Solved:** Render free tier (0.5GB RAM) could not handle video uploads larger than 200MB\n  - **Solution Implemented:** Pre-signed URL direct upload system\n    - Backend generates secure pre-signed URLs with 1-hour expiry\n    - Browser uploads video/thumbnails **directly to iDrive E2** (bypasses server RAM entirely)\n    - Server only handles lightweight metadata operations\n  - **Technical Implementation:**\n    - Added `generatePresignedUploadUrl()` function in `videoStorage.ts` using `@aws-sdk/s3-request-presigner`\n    - Created `/api/upload/presigned-url` endpoint with authentication checks\n    - Updated `UploadVideoDialog.tsx` to use 5-step direct upload flow:\n      1. Request pre-signed URL for video\n      2. Upload video directly to iDrive via PUT request\n      3. Request pre-signed URL for thumbnail  \n      4. Upload thumbnail directly to iDrive via PUT request\n      5. Save metadata to database with storage keys\n  - **Benefits:**\n    - ✅ No RAM limit - can upload GB-sized videos\n    - ✅ Multiple users can upload simultaneously without server overload\n    - ✅ Faster uploads (direct to storage, no server relay)\n    - ✅ More reliable on low-RAM hosting environments\n  - **Security:** Pre-signed URLs are authenticated, time-limited (1 hour), and user-specific\n\n- **Video Player Modernization (Oct 9, 2025):**\n  - **YouTube-Style Controls:**\n    - 10-second skip controls moved to video center sides (left/right) instead of bottom\n    - Round buttons with backdrop blur and hover scale animations\n    - Controls auto-hide after 1 second on both mobile and desktop (YouTube behavior)\n  - **Modern Play/Pause Animation:**\n    - Center overlay with animated fade-in/zoom-in effect\n    - Shows correct icon (play/pause) based on current state\n    - Disappears after 1 second (instant feedback like YouTube)\n    - Static play button when paused with hover scale effect\n  - **Mobile Optimization:**\n    - Touch-friendly 56px buttons for skip controls\n    - Consistent auto-hide behavior across all devices\n    - Responsive sizing for all screen sizes\n\n- **Database Cleanup (Oct 9, 2025):**\n  - Deleted all sample/seed videos from database (16 videos removed)\n  - Fixed Shorts player default audio state: now **unmuted by default** instead of muted\n  - Database ready for production deployment with user's own iDrive E2 storage\n\n- **Shorts Page Complete Redesign (Oct 9, 2025):**\n  - **Professional Desktop & Mobile UI:**\n    - Gradient red/pink play icon in header matching YouTube Shorts branding\n    - Clean sticky header with tabs (All, Subscriptions, Trending)\n    - Responsive grid layout: 2-7 columns based on screen size (mobile to 2xl)\n    - Professional card design with rounded corners and ring borders\n    - Duration badges on each video (top-right corner)\n    - Smooth hover effects with scale animation (1.05x) and shadow\n    - Play button overlay with white background on hover\n    - Gradient overlays (black/90 to transparent) for better text visibility\n    - Channel avatars with ring borders\n    - View counts and channel names clearly displayed\n  - **Enhanced Video Cards:**\n    - Vertical aspect ratio (9:16) optimized for shorts\n    - High-quality thumbnails with object-cover\n    - Title truncation (2 lines max) with proper text hierarchy\n    - Channel info with verification badges\n    - Touch-friendly tap targets for mobile\n  - **Full-Featured ShortsPlayer:**\n    - **Responsive Design:** Optimized for both mobile and desktop\n    - **Auto-hiding Controls:** Controls fade after 3 seconds for immersive viewing\n    - **Like/Dislike:** Visible counts with heart animation for likes\n    - **Subscribe Button:** Integrated in player with subscribed state\n    - **Comments:** Count display with navigation to full video\n    - **Share:** Native share API with clipboard fallback\n    - **Remix Button:** Placeholder for future remix feature\n    - **Navigation:** \n      - Mobile: Swipe up/down gestures for video navigation\n      - Desktop: Arrow buttons (up/down) on right side\n      - Keyboard: Arrow keys, Space (play/pause), M (mute), Escape (close)\n    - **Progress Indicator:** Visual dots showing position (max 10 shown + counter)\n    - **Mute Toggle:** Top-right corner with icon feedback\n    - **Channel Info:** Large avatar with verification badge and subscriber count\n    - **Gradient Overlays:** Top and bottom gradients for better UI visibility\n    - **Play/Pause Overlay:** Large centered icon when paused\n    - **Close Button:** Easy exit with X button (top-right)\n\n- **Watch Page Mobile Optimization (Oct 9, 2025):**\n  - Complete mobile-first redesign matching YouTube's mobile UX\n  - Moved description to dedicated \"Description\" tab (with info panel)\n  - Reorganized content hierarchy: Video → Channel info → Actions → Tabs\n  - Optimized touch targets (44px minimum) for better mobile interaction\n  - Improved spacing and padding for mobile screens (<640px)\n  - Clean separation of mobile and desktop layouts using Tailwind breakpoints\n  - Enhanced visual hierarchy with better typography scaling","size_bytes":9432},"client/src/pages/Channel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport VideoCard from \"@/components/VideoCard\";\nimport { VideoWithChannel } from \"@shared/schema\";\nimport type { Channel } from \"@shared/schema\";\n\nexport default function ChannelPage() {\n  const [, params] = useRoute(\"/channel/:id\");\n  const channelId = params?.id;\n\n  const { data: channel, isLoading: channelLoading } = useQuery<Channel>({\n    queryKey: [\"/api/channels\", channelId],\n    queryFn: async () => {\n      const response = await fetch(`/api/channels/${channelId}`);\n      if (!response.ok) throw new Error('Failed to fetch channel');\n      return response.json();\n    },\n    enabled: !!channelId\n  });\n\n  const { data: videos = [] } = useQuery<VideoWithChannel[]>({\n    queryKey: [\"/api/videos/channel\", channelId],\n    queryFn: async () => {\n      const response = await fetch(`/api/videos/by-channels?channelIds=${channelId}`);\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!channelId\n  });\n\n  if (channelLoading || !channel) {\n    return (\n      <div className=\"p-4 sm:p-6 space-y-4 sm:space-y-6\">\n        <div className=\"h-32 sm:h-40 md:h-48 bg-muted animate-pulse rounded-xl\"></div>\n        <div className=\"flex flex-col sm:flex-row items-center sm:items-start gap-4 sm:gap-6\">\n          <div className=\"h-24 w-24 sm:h-28 sm:w-28 md:h-32 md:w-32 bg-muted animate-pulse rounded-full\"></div>\n          <div className=\"flex-1 space-y-3 w-full\">\n            <div className=\"h-8 bg-muted animate-pulse rounded w-1/3 mx-auto sm:mx-0\"></div>\n            <div className=\"h-4 bg-muted animate-pulse rounded w-1/4 mx-auto sm:mx-0\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-4 sm:space-y-6\">\n      <div className=\"h-32 sm:h-40 md:h-48 bg-gradient-to-br from-primary/20 to-primary/5 rounded-xl\"></div>\n\n      <div className=\"flex flex-col sm:flex-row items-center sm:items-start gap-4 sm:gap-6\">\n        <Avatar className=\"h-24 w-24 sm:h-28 sm:w-28 md:h-32 md:w-32 border-2 sm:border-4 border-background\">\n          <AvatarImage src={channel.avatar || undefined} />\n          <AvatarFallback className=\"text-4xl\">{channel.name[0]}</AvatarFallback>\n        </Avatar>\n\n        <div className=\"flex-1 w-full sm:w-auto\">\n          <div className=\"flex items-center gap-2 mb-2 justify-center sm:justify-start\">\n            <h1 className=\"text-xl sm:text-2xl md:text-3xl font-bold text-center sm:text-left\">{channel.name}</h1>\n            {channel.verified && (\n              <svg className=\"h-6 w-6 text-primary\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n              </svg>\n            )}\n          </div>\n          <p className=\"text-sm sm:text-base text-muted-foreground mb-1 text-center sm:text-left\">@{channel.username}</p>\n          <p className=\"text-sm sm:text-base text-muted-foreground mb-4 text-center sm:text-left\">\n            {channel.subscribers?.toLocaleString()} subscribers • {videos.length} videos\n          </p>\n          <p className=\"text-sm mb-4 text-center sm:text-left\">{channel.description || \"No description available.\"}</p>\n          <div className=\"flex gap-2 flex-wrap justify-center sm:justify-start\">\n            <Button>Subscribe</Button>\n            <Button variant=\"outline\">Joined</Button>\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"home\" className=\"w-full\">\n        <TabsList className=\"w-full justify-start border-b rounded-none h-auto p-0 bg-transparent overflow-x-auto\">\n          <TabsTrigger value=\"home\" className=\"rounded-none border-b-2 border-transparent data-[state=active]:border-foreground data-[state=active]:bg-transparent\">Home</TabsTrigger>\n          <TabsTrigger value=\"videos\" className=\"rounded-none border-b-2 border-transparent data-[state=active]:border-foreground data-[state=active]:bg-transparent\">Videos</TabsTrigger>\n          <TabsTrigger value=\"shorts\" className=\"rounded-none border-b-2 border-transparent data-[state=active]:border-foreground data-[state=active]:bg-transparent\">Shorts</TabsTrigger>\n          <TabsTrigger value=\"posts\" className=\"rounded-none border-b-2 border-transparent data-[state=active]:border-foreground data-[state=active]:bg-transparent\">Posts</TabsTrigger>\n          <TabsTrigger value=\"about\" className=\"rounded-none border-b-2 border-transparent data-[state=active]:border-foreground data-[state=active]:bg-transparent\">About</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"home\" className=\"mt-6\">\n          {videos.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No videos yet</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {videos.slice(0, 8).map((video) => (\n                <VideoCard\n                  key={video.id}\n                  video={video}\n                  onClick={() => console.log('Play video:', video.id)}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"videos\" className=\"mt-6\">\n          {videos.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No videos yet</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {videos.map((video) => (\n                <VideoCard\n                  key={video.id}\n                  video={video}\n                  onClick={() => console.log('Play video:', video.id)}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"shorts\" className=\"mt-6\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">No shorts yet</p>\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"posts\" className=\"mt-6\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">No posts yet</p>\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"about\" className=\"mt-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Description</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {channel.description || \"No description available.\"}\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Stats</h3>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>{channel.subscribers?.toLocaleString()} subscribers</li>\n                <li>{videos.length} videos</li>\n              </ul>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":7232},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Play, Video, Zap, Shield, Mail } from \"lucide-react\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\n\nexport default function Landing() {\n  const [showEmailSignup, setShowEmailSignup] = useState(false);\n  const [step, setStep] = useState<'email' | 'otp'>('email');\n  const [email, setEmail] = useState('');\n  const [otp, setOtp] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const { toast } = useToast();\n\n  const sendOtpMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const res = await fetch('/api/auth/email/send-otp', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email }),\n      });\n      if (!res.ok) throw new Error('Failed to send OTP');\n      return res.json();\n    },\n    onSuccess: () => {\n      setStep('otp');\n      toast({\n        title: \"OTP Sent\",\n        description: \"Check your email for the verification code (or enter any code for now)\",\n      });\n    },\n  });\n\n  const verifyOtpMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch('/api/auth/email/verify-otp', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, otp, firstName, lastName }),\n      });\n      if (!res.ok) throw new Error('Failed to verify OTP');\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success!\",\n        description: \"Account created successfully\",\n      });\n      window.location.href = '/';\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <nav className=\"border-b border-border\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Play className=\"w-8 h-8 text-primary\" />\n            <span className=\"text-2xl font-bold\">CineWeave</span>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"container mx-auto px-4\">\n        <section className=\"py-20 text-center\">\n          <h1 className=\"text-5xl font-bold mb-6\">\n            Your Videos, Your Way\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Experience video streaming with powerful personalization. Block unwanted content, \n            organize your subscriptions, and enjoy a truly customized viewing experience.\n          </p>\n          <div className=\"flex gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              onClick={() => window.location.href = \"/api/login\"}\n              data-testid=\"button-google-signup\"\n            >\n              Sign up with Google\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\"\n              onClick={() => setShowEmailSignup(true)}\n              data-testid=\"button-email-signup\"\n            >\n              <Mail className=\"w-4 h-4 mr-2\" />\n              Sign up with Email\n            </Button>\n          </div>\n        </section>\n\n        <Dialog open={showEmailSignup} onOpenChange={setShowEmailSignup}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>{step === 'email' ? 'Sign up with Email' : 'Enter OTP'}</DialogTitle>\n              <DialogDescription>\n                {step === 'email' \n                  ? 'Enter your email to receive a verification code'\n                  : 'Enter the OTP sent to your email (any code works for now)'}\n              </DialogDescription>\n            </DialogHeader>\n\n            {step === 'email' ? (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    placeholder=\"your@email.com\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"firstName\">First Name (Optional)</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={firstName}\n                    onChange={(e) => setFirstName(e.target.value)}\n                    placeholder=\"John\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name (Optional)</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={lastName}\n                    onChange={(e) => setLastName(e.target.value)}\n                    placeholder=\"Doe\"\n                  />\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => sendOtpMutation.mutate(email)}\n                  disabled={!email || sendOtpMutation.isPending}\n                >\n                  {sendOtpMutation.isPending ? 'Sending...' : 'Send OTP'}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"otp\">OTP Code</Label>\n                  <Input\n                    id=\"otp\"\n                    value={otp}\n                    onChange={(e) => setOtp(e.target.value)}\n                    placeholder=\"Enter any code\"\n                  />\n                </div>\n                <Button \n                  className=\"w-full\" \n                  onClick={() => verifyOtpMutation.mutate()}\n                  disabled={!otp || verifyOtpMutation.isPending}\n                >\n                  {verifyOtpMutation.isPending ? 'Verifying...' : 'Verify & Sign Up'}\n                </Button>\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full\" \n                  onClick={() => setStep('email')}\n                >\n                  Back\n                </Button>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        <section className=\"py-20 grid md:grid-cols-3 gap-12\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-primary/10 rounded-full flex items-center justify-center\">\n              <Video className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Personal Mode</h3>\n            <p className=\"text-muted-foreground\">\n              Toggle to see only videos from channels you subscribe to. No algorithms, no distractions.\n            </p>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-primary/10 rounded-full flex items-center justify-center\">\n              <Shield className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Content Control</h3>\n            <p className=\"text-muted-foreground\">\n              Permanently block channels and never see their content again. Full control over what you watch.\n            </p>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-primary/10 rounded-full flex items-center justify-center\">\n              <Zap className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Smart Spaces</h3>\n            <p className=\"text-muted-foreground\">\n              Organize subscriptions into custom collections. Create spaces for gaming, tech, entertainment, and more.\n            </p>\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8033}},"version":2}